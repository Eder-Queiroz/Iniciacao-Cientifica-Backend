
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Curso
 * 
 */
export type Curso = {
  id: string
  nome: string
  turno: string
  agrupamento: number
}

/**
 * Model Disciplina
 * 
 */
export type Disciplina = {
  id: string
  nome: string
  periodo: number
  qtaulas: number
  professor_id: string
  curso_id: string
}

/**
 * Model Professor
 * 
 */
export type Professor = {
  id: string
  nome: string
  email: string
}

/**
 * Model Restricao
 * 
 */
export type Restricao = {
  id: string
  professor_id: string
  dia: number
  periodo: string
}

/**
 * Model Turma
 * 
 */
export type Turma = {
  id: string
  periodo: number
  qtalunos: number
  curso_id: string
}

/**
 * Model Sala
 * 
 */
export type Sala = {
  id: string
  nome: string
  capacidade: number
  qtdpcs: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Cursos
 * const cursos = await prisma.curso.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Cursos
   * const cursos = await prisma.curso.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.curso`: Exposes CRUD operations for the **Curso** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cursos
    * const cursos = await prisma.curso.findMany()
    * ```
    */
  get curso(): Prisma.CursoDelegate<GlobalReject>;

  /**
   * `prisma.disciplina`: Exposes CRUD operations for the **Disciplina** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Disciplinas
    * const disciplinas = await prisma.disciplina.findMany()
    * ```
    */
  get disciplina(): Prisma.DisciplinaDelegate<GlobalReject>;

  /**
   * `prisma.professor`: Exposes CRUD operations for the **Professor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Professors
    * const professors = await prisma.professor.findMany()
    * ```
    */
  get professor(): Prisma.ProfessorDelegate<GlobalReject>;

  /**
   * `prisma.restricao`: Exposes CRUD operations for the **Restricao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Restricaos
    * const restricaos = await prisma.restricao.findMany()
    * ```
    */
  get restricao(): Prisma.RestricaoDelegate<GlobalReject>;

  /**
   * `prisma.turma`: Exposes CRUD operations for the **Turma** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Turmas
    * const turmas = await prisma.turma.findMany()
    * ```
    */
  get turma(): Prisma.TurmaDelegate<GlobalReject>;

  /**
   * `prisma.sala`: Exposes CRUD operations for the **Sala** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Salas
    * const salas = await prisma.sala.findMany()
    * ```
    */
  get sala(): Prisma.SalaDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.15.0
   * Query Engine version: 8fbc245156db7124f997f4cecdd8d1219e360944
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Curso: 'Curso',
    Disciplina: 'Disciplina',
    Professor: 'Professor',
    Restricao: 'Restricao',
    Turma: 'Turma',
    Sala: 'Sala'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CursoCountOutputType
   */


  export type CursoCountOutputType = {
    disciplina: number
    turma: number
  }

  export type CursoCountOutputTypeSelect = {
    disciplina?: boolean
    turma?: boolean
  }

  export type CursoCountOutputTypeGetPayload<S extends boolean | null | undefined | CursoCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CursoCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CursoCountOutputTypeArgs)
    ? CursoCountOutputType 
    : S extends { select: any } & (CursoCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CursoCountOutputType ? CursoCountOutputType[P] : never
  } 
      : CursoCountOutputType




  // Custom InputTypes

  /**
   * CursoCountOutputType without action
   */
  export type CursoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CursoCountOutputType
     */
    select?: CursoCountOutputTypeSelect | null
  }



  /**
   * Count Type ProfessorCountOutputType
   */


  export type ProfessorCountOutputType = {
    restricao: number
    disciplina: number
  }

  export type ProfessorCountOutputTypeSelect = {
    restricao?: boolean
    disciplina?: boolean
  }

  export type ProfessorCountOutputTypeGetPayload<S extends boolean | null | undefined | ProfessorCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ProfessorCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ProfessorCountOutputTypeArgs)
    ? ProfessorCountOutputType 
    : S extends { select: any } & (ProfessorCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ProfessorCountOutputType ? ProfessorCountOutputType[P] : never
  } 
      : ProfessorCountOutputType




  // Custom InputTypes

  /**
   * ProfessorCountOutputType without action
   */
  export type ProfessorCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProfessorCountOutputType
     */
    select?: ProfessorCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Curso
   */


  export type AggregateCurso = {
    _count: CursoCountAggregateOutputType | null
    _avg: CursoAvgAggregateOutputType | null
    _sum: CursoSumAggregateOutputType | null
    _min: CursoMinAggregateOutputType | null
    _max: CursoMaxAggregateOutputType | null
  }

  export type CursoAvgAggregateOutputType = {
    agrupamento: number | null
  }

  export type CursoSumAggregateOutputType = {
    agrupamento: number | null
  }

  export type CursoMinAggregateOutputType = {
    id: string | null
    nome: string | null
    turno: string | null
    agrupamento: number | null
  }

  export type CursoMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    turno: string | null
    agrupamento: number | null
  }

  export type CursoCountAggregateOutputType = {
    id: number
    nome: number
    turno: number
    agrupamento: number
    _all: number
  }


  export type CursoAvgAggregateInputType = {
    agrupamento?: true
  }

  export type CursoSumAggregateInputType = {
    agrupamento?: true
  }

  export type CursoMinAggregateInputType = {
    id?: true
    nome?: true
    turno?: true
    agrupamento?: true
  }

  export type CursoMaxAggregateInputType = {
    id?: true
    nome?: true
    turno?: true
    agrupamento?: true
  }

  export type CursoCountAggregateInputType = {
    id?: true
    nome?: true
    turno?: true
    agrupamento?: true
    _all?: true
  }

  export type CursoAggregateArgs = {
    /**
     * Filter which Curso to aggregate.
     */
    where?: CursoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cursos to fetch.
     */
    orderBy?: Enumerable<CursoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CursoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cursos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cursos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cursos
    **/
    _count?: true | CursoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CursoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CursoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CursoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CursoMaxAggregateInputType
  }

  export type GetCursoAggregateType<T extends CursoAggregateArgs> = {
        [P in keyof T & keyof AggregateCurso]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCurso[P]>
      : GetScalarType<T[P], AggregateCurso[P]>
  }




  export type CursoGroupByArgs = {
    where?: CursoWhereInput
    orderBy?: Enumerable<CursoOrderByWithAggregationInput>
    by: CursoScalarFieldEnum[]
    having?: CursoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CursoCountAggregateInputType | true
    _avg?: CursoAvgAggregateInputType
    _sum?: CursoSumAggregateInputType
    _min?: CursoMinAggregateInputType
    _max?: CursoMaxAggregateInputType
  }


  export type CursoGroupByOutputType = {
    id: string
    nome: string
    turno: string
    agrupamento: number
    _count: CursoCountAggregateOutputType | null
    _avg: CursoAvgAggregateOutputType | null
    _sum: CursoSumAggregateOutputType | null
    _min: CursoMinAggregateOutputType | null
    _max: CursoMaxAggregateOutputType | null
  }

  type GetCursoGroupByPayload<T extends CursoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CursoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CursoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CursoGroupByOutputType[P]>
            : GetScalarType<T[P], CursoGroupByOutputType[P]>
        }
      >
    >


  export type CursoSelect = {
    id?: boolean
    nome?: boolean
    turno?: boolean
    agrupamento?: boolean
    disciplina?: boolean | Curso$disciplinaArgs
    turma?: boolean | Curso$turmaArgs
    _count?: boolean | CursoCountOutputTypeArgs
  }


  export type CursoInclude = {
    disciplina?: boolean | Curso$disciplinaArgs
    turma?: boolean | Curso$turmaArgs
    _count?: boolean | CursoCountOutputTypeArgs
  }

  export type CursoGetPayload<S extends boolean | null | undefined | CursoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Curso :
    S extends undefined ? never :
    S extends { include: any } & (CursoArgs | CursoFindManyArgs)
    ? Curso  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'disciplina' ? Array < DisciplinaGetPayload<S['include'][P]>>  :
        P extends 'turma' ? Array < TurmaGetPayload<S['include'][P]>>  :
        P extends '_count' ? CursoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CursoArgs | CursoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'disciplina' ? Array < DisciplinaGetPayload<S['select'][P]>>  :
        P extends 'turma' ? Array < TurmaGetPayload<S['select'][P]>>  :
        P extends '_count' ? CursoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Curso ? Curso[P] : never
  } 
      : Curso


  type CursoCountArgs = 
    Omit<CursoFindManyArgs, 'select' | 'include'> & {
      select?: CursoCountAggregateInputType | true
    }

  export interface CursoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Curso that matches the filter.
     * @param {CursoFindUniqueArgs} args - Arguments to find a Curso
     * @example
     * // Get one Curso
     * const curso = await prisma.curso.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CursoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CursoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Curso'> extends True ? Prisma__CursoClient<CursoGetPayload<T>> : Prisma__CursoClient<CursoGetPayload<T> | null, null>

    /**
     * Find one Curso that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CursoFindUniqueOrThrowArgs} args - Arguments to find a Curso
     * @example
     * // Get one Curso
     * const curso = await prisma.curso.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CursoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CursoFindUniqueOrThrowArgs>
    ): Prisma__CursoClient<CursoGetPayload<T>>

    /**
     * Find the first Curso that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoFindFirstArgs} args - Arguments to find a Curso
     * @example
     * // Get one Curso
     * const curso = await prisma.curso.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CursoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CursoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Curso'> extends True ? Prisma__CursoClient<CursoGetPayload<T>> : Prisma__CursoClient<CursoGetPayload<T> | null, null>

    /**
     * Find the first Curso that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoFindFirstOrThrowArgs} args - Arguments to find a Curso
     * @example
     * // Get one Curso
     * const curso = await prisma.curso.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CursoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CursoFindFirstOrThrowArgs>
    ): Prisma__CursoClient<CursoGetPayload<T>>

    /**
     * Find zero or more Cursos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cursos
     * const cursos = await prisma.curso.findMany()
     * 
     * // Get first 10 Cursos
     * const cursos = await prisma.curso.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cursoWithIdOnly = await prisma.curso.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CursoFindManyArgs>(
      args?: SelectSubset<T, CursoFindManyArgs>
    ): Prisma.PrismaPromise<Array<CursoGetPayload<T>>>

    /**
     * Create a Curso.
     * @param {CursoCreateArgs} args - Arguments to create a Curso.
     * @example
     * // Create one Curso
     * const Curso = await prisma.curso.create({
     *   data: {
     *     // ... data to create a Curso
     *   }
     * })
     * 
    **/
    create<T extends CursoCreateArgs>(
      args: SelectSubset<T, CursoCreateArgs>
    ): Prisma__CursoClient<CursoGetPayload<T>>

    /**
     * Create many Cursos.
     *     @param {CursoCreateManyArgs} args - Arguments to create many Cursos.
     *     @example
     *     // Create many Cursos
     *     const curso = await prisma.curso.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CursoCreateManyArgs>(
      args?: SelectSubset<T, CursoCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Curso.
     * @param {CursoDeleteArgs} args - Arguments to delete one Curso.
     * @example
     * // Delete one Curso
     * const Curso = await prisma.curso.delete({
     *   where: {
     *     // ... filter to delete one Curso
     *   }
     * })
     * 
    **/
    delete<T extends CursoDeleteArgs>(
      args: SelectSubset<T, CursoDeleteArgs>
    ): Prisma__CursoClient<CursoGetPayload<T>>

    /**
     * Update one Curso.
     * @param {CursoUpdateArgs} args - Arguments to update one Curso.
     * @example
     * // Update one Curso
     * const curso = await prisma.curso.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CursoUpdateArgs>(
      args: SelectSubset<T, CursoUpdateArgs>
    ): Prisma__CursoClient<CursoGetPayload<T>>

    /**
     * Delete zero or more Cursos.
     * @param {CursoDeleteManyArgs} args - Arguments to filter Cursos to delete.
     * @example
     * // Delete a few Cursos
     * const { count } = await prisma.curso.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CursoDeleteManyArgs>(
      args?: SelectSubset<T, CursoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cursos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cursos
     * const curso = await prisma.curso.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CursoUpdateManyArgs>(
      args: SelectSubset<T, CursoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Curso.
     * @param {CursoUpsertArgs} args - Arguments to update or create a Curso.
     * @example
     * // Update or create a Curso
     * const curso = await prisma.curso.upsert({
     *   create: {
     *     // ... data to create a Curso
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Curso we want to update
     *   }
     * })
    **/
    upsert<T extends CursoUpsertArgs>(
      args: SelectSubset<T, CursoUpsertArgs>
    ): Prisma__CursoClient<CursoGetPayload<T>>

    /**
     * Count the number of Cursos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoCountArgs} args - Arguments to filter Cursos to count.
     * @example
     * // Count the number of Cursos
     * const count = await prisma.curso.count({
     *   where: {
     *     // ... the filter for the Cursos we want to count
     *   }
     * })
    **/
    count<T extends CursoCountArgs>(
      args?: Subset<T, CursoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CursoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Curso.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CursoAggregateArgs>(args: Subset<T, CursoAggregateArgs>): Prisma.PrismaPromise<GetCursoAggregateType<T>>

    /**
     * Group by Curso.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CursoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CursoGroupByArgs['orderBy'] }
        : { orderBy?: CursoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CursoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCursoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Curso.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CursoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    disciplina<T extends Curso$disciplinaArgs= {}>(args?: Subset<T, Curso$disciplinaArgs>): Prisma.PrismaPromise<Array<DisciplinaGetPayload<T>>| Null>;

    turma<T extends Curso$turmaArgs= {}>(args?: Subset<T, Curso$turmaArgs>): Prisma.PrismaPromise<Array<TurmaGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Curso base type for findUnique actions
   */
  export type CursoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CursoInclude | null
    /**
     * Filter, which Curso to fetch.
     */
    where: CursoWhereUniqueInput
  }

  /**
   * Curso findUnique
   */
  export interface CursoFindUniqueArgs extends CursoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Curso findUniqueOrThrow
   */
  export type CursoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CursoInclude | null
    /**
     * Filter, which Curso to fetch.
     */
    where: CursoWhereUniqueInput
  }


  /**
   * Curso base type for findFirst actions
   */
  export type CursoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CursoInclude | null
    /**
     * Filter, which Curso to fetch.
     */
    where?: CursoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cursos to fetch.
     */
    orderBy?: Enumerable<CursoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cursos.
     */
    cursor?: CursoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cursos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cursos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cursos.
     */
    distinct?: Enumerable<CursoScalarFieldEnum>
  }

  /**
   * Curso findFirst
   */
  export interface CursoFindFirstArgs extends CursoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Curso findFirstOrThrow
   */
  export type CursoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CursoInclude | null
    /**
     * Filter, which Curso to fetch.
     */
    where?: CursoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cursos to fetch.
     */
    orderBy?: Enumerable<CursoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cursos.
     */
    cursor?: CursoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cursos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cursos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cursos.
     */
    distinct?: Enumerable<CursoScalarFieldEnum>
  }


  /**
   * Curso findMany
   */
  export type CursoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CursoInclude | null
    /**
     * Filter, which Cursos to fetch.
     */
    where?: CursoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cursos to fetch.
     */
    orderBy?: Enumerable<CursoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cursos.
     */
    cursor?: CursoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cursos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cursos.
     */
    skip?: number
    distinct?: Enumerable<CursoScalarFieldEnum>
  }


  /**
   * Curso create
   */
  export type CursoCreateArgs = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CursoInclude | null
    /**
     * The data needed to create a Curso.
     */
    data: XOR<CursoCreateInput, CursoUncheckedCreateInput>
  }


  /**
   * Curso createMany
   */
  export type CursoCreateManyArgs = {
    /**
     * The data used to create many Cursos.
     */
    data: Enumerable<CursoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Curso update
   */
  export type CursoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CursoInclude | null
    /**
     * The data needed to update a Curso.
     */
    data: XOR<CursoUpdateInput, CursoUncheckedUpdateInput>
    /**
     * Choose, which Curso to update.
     */
    where: CursoWhereUniqueInput
  }


  /**
   * Curso updateMany
   */
  export type CursoUpdateManyArgs = {
    /**
     * The data used to update Cursos.
     */
    data: XOR<CursoUpdateManyMutationInput, CursoUncheckedUpdateManyInput>
    /**
     * Filter which Cursos to update
     */
    where?: CursoWhereInput
  }


  /**
   * Curso upsert
   */
  export type CursoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CursoInclude | null
    /**
     * The filter to search for the Curso to update in case it exists.
     */
    where: CursoWhereUniqueInput
    /**
     * In case the Curso found by the `where` argument doesn't exist, create a new Curso with this data.
     */
    create: XOR<CursoCreateInput, CursoUncheckedCreateInput>
    /**
     * In case the Curso was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CursoUpdateInput, CursoUncheckedUpdateInput>
  }


  /**
   * Curso delete
   */
  export type CursoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CursoInclude | null
    /**
     * Filter which Curso to delete.
     */
    where: CursoWhereUniqueInput
  }


  /**
   * Curso deleteMany
   */
  export type CursoDeleteManyArgs = {
    /**
     * Filter which Cursos to delete
     */
    where?: CursoWhereInput
  }


  /**
   * Curso.disciplina
   */
  export type Curso$disciplinaArgs = {
    /**
     * Select specific fields to fetch from the Disciplina
     */
    select?: DisciplinaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplinaInclude | null
    where?: DisciplinaWhereInput
    orderBy?: Enumerable<DisciplinaOrderByWithRelationInput>
    cursor?: DisciplinaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DisciplinaScalarFieldEnum>
  }


  /**
   * Curso.turma
   */
  export type Curso$turmaArgs = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude | null
    where?: TurmaWhereInput
    orderBy?: Enumerable<TurmaOrderByWithRelationInput>
    cursor?: TurmaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TurmaScalarFieldEnum>
  }


  /**
   * Curso without action
   */
  export type CursoArgs = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CursoInclude | null
  }



  /**
   * Model Disciplina
   */


  export type AggregateDisciplina = {
    _count: DisciplinaCountAggregateOutputType | null
    _avg: DisciplinaAvgAggregateOutputType | null
    _sum: DisciplinaSumAggregateOutputType | null
    _min: DisciplinaMinAggregateOutputType | null
    _max: DisciplinaMaxAggregateOutputType | null
  }

  export type DisciplinaAvgAggregateOutputType = {
    periodo: number | null
    qtaulas: number | null
  }

  export type DisciplinaSumAggregateOutputType = {
    periodo: number | null
    qtaulas: number | null
  }

  export type DisciplinaMinAggregateOutputType = {
    id: string | null
    nome: string | null
    periodo: number | null
    qtaulas: number | null
    professor_id: string | null
    curso_id: string | null
  }

  export type DisciplinaMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    periodo: number | null
    qtaulas: number | null
    professor_id: string | null
    curso_id: string | null
  }

  export type DisciplinaCountAggregateOutputType = {
    id: number
    nome: number
    periodo: number
    qtaulas: number
    professor_id: number
    curso_id: number
    _all: number
  }


  export type DisciplinaAvgAggregateInputType = {
    periodo?: true
    qtaulas?: true
  }

  export type DisciplinaSumAggregateInputType = {
    periodo?: true
    qtaulas?: true
  }

  export type DisciplinaMinAggregateInputType = {
    id?: true
    nome?: true
    periodo?: true
    qtaulas?: true
    professor_id?: true
    curso_id?: true
  }

  export type DisciplinaMaxAggregateInputType = {
    id?: true
    nome?: true
    periodo?: true
    qtaulas?: true
    professor_id?: true
    curso_id?: true
  }

  export type DisciplinaCountAggregateInputType = {
    id?: true
    nome?: true
    periodo?: true
    qtaulas?: true
    professor_id?: true
    curso_id?: true
    _all?: true
  }

  export type DisciplinaAggregateArgs = {
    /**
     * Filter which Disciplina to aggregate.
     */
    where?: DisciplinaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplinas to fetch.
     */
    orderBy?: Enumerable<DisciplinaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DisciplinaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplinas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Disciplinas
    **/
    _count?: true | DisciplinaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DisciplinaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DisciplinaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DisciplinaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DisciplinaMaxAggregateInputType
  }

  export type GetDisciplinaAggregateType<T extends DisciplinaAggregateArgs> = {
        [P in keyof T & keyof AggregateDisciplina]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDisciplina[P]>
      : GetScalarType<T[P], AggregateDisciplina[P]>
  }




  export type DisciplinaGroupByArgs = {
    where?: DisciplinaWhereInput
    orderBy?: Enumerable<DisciplinaOrderByWithAggregationInput>
    by: DisciplinaScalarFieldEnum[]
    having?: DisciplinaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DisciplinaCountAggregateInputType | true
    _avg?: DisciplinaAvgAggregateInputType
    _sum?: DisciplinaSumAggregateInputType
    _min?: DisciplinaMinAggregateInputType
    _max?: DisciplinaMaxAggregateInputType
  }


  export type DisciplinaGroupByOutputType = {
    id: string
    nome: string
    periodo: number
    qtaulas: number
    professor_id: string
    curso_id: string
    _count: DisciplinaCountAggregateOutputType | null
    _avg: DisciplinaAvgAggregateOutputType | null
    _sum: DisciplinaSumAggregateOutputType | null
    _min: DisciplinaMinAggregateOutputType | null
    _max: DisciplinaMaxAggregateOutputType | null
  }

  type GetDisciplinaGroupByPayload<T extends DisciplinaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DisciplinaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DisciplinaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DisciplinaGroupByOutputType[P]>
            : GetScalarType<T[P], DisciplinaGroupByOutputType[P]>
        }
      >
    >


  export type DisciplinaSelect = {
    id?: boolean
    nome?: boolean
    periodo?: boolean
    qtaulas?: boolean
    professor_id?: boolean
    curso_id?: boolean
    professor?: boolean | ProfessorArgs
    curso?: boolean | CursoArgs
  }


  export type DisciplinaInclude = {
    professor?: boolean | ProfessorArgs
    curso?: boolean | CursoArgs
  }

  export type DisciplinaGetPayload<S extends boolean | null | undefined | DisciplinaArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Disciplina :
    S extends undefined ? never :
    S extends { include: any } & (DisciplinaArgs | DisciplinaFindManyArgs)
    ? Disciplina  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'professor' ? ProfessorGetPayload<S['include'][P]> :
        P extends 'curso' ? CursoGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (DisciplinaArgs | DisciplinaFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'professor' ? ProfessorGetPayload<S['select'][P]> :
        P extends 'curso' ? CursoGetPayload<S['select'][P]> :  P extends keyof Disciplina ? Disciplina[P] : never
  } 
      : Disciplina


  type DisciplinaCountArgs = 
    Omit<DisciplinaFindManyArgs, 'select' | 'include'> & {
      select?: DisciplinaCountAggregateInputType | true
    }

  export interface DisciplinaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Disciplina that matches the filter.
     * @param {DisciplinaFindUniqueArgs} args - Arguments to find a Disciplina
     * @example
     * // Get one Disciplina
     * const disciplina = await prisma.disciplina.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DisciplinaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DisciplinaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Disciplina'> extends True ? Prisma__DisciplinaClient<DisciplinaGetPayload<T>> : Prisma__DisciplinaClient<DisciplinaGetPayload<T> | null, null>

    /**
     * Find one Disciplina that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DisciplinaFindUniqueOrThrowArgs} args - Arguments to find a Disciplina
     * @example
     * // Get one Disciplina
     * const disciplina = await prisma.disciplina.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DisciplinaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DisciplinaFindUniqueOrThrowArgs>
    ): Prisma__DisciplinaClient<DisciplinaGetPayload<T>>

    /**
     * Find the first Disciplina that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinaFindFirstArgs} args - Arguments to find a Disciplina
     * @example
     * // Get one Disciplina
     * const disciplina = await prisma.disciplina.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DisciplinaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DisciplinaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Disciplina'> extends True ? Prisma__DisciplinaClient<DisciplinaGetPayload<T>> : Prisma__DisciplinaClient<DisciplinaGetPayload<T> | null, null>

    /**
     * Find the first Disciplina that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinaFindFirstOrThrowArgs} args - Arguments to find a Disciplina
     * @example
     * // Get one Disciplina
     * const disciplina = await prisma.disciplina.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DisciplinaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DisciplinaFindFirstOrThrowArgs>
    ): Prisma__DisciplinaClient<DisciplinaGetPayload<T>>

    /**
     * Find zero or more Disciplinas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Disciplinas
     * const disciplinas = await prisma.disciplina.findMany()
     * 
     * // Get first 10 Disciplinas
     * const disciplinas = await prisma.disciplina.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const disciplinaWithIdOnly = await prisma.disciplina.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DisciplinaFindManyArgs>(
      args?: SelectSubset<T, DisciplinaFindManyArgs>
    ): Prisma.PrismaPromise<Array<DisciplinaGetPayload<T>>>

    /**
     * Create a Disciplina.
     * @param {DisciplinaCreateArgs} args - Arguments to create a Disciplina.
     * @example
     * // Create one Disciplina
     * const Disciplina = await prisma.disciplina.create({
     *   data: {
     *     // ... data to create a Disciplina
     *   }
     * })
     * 
    **/
    create<T extends DisciplinaCreateArgs>(
      args: SelectSubset<T, DisciplinaCreateArgs>
    ): Prisma__DisciplinaClient<DisciplinaGetPayload<T>>

    /**
     * Create many Disciplinas.
     *     @param {DisciplinaCreateManyArgs} args - Arguments to create many Disciplinas.
     *     @example
     *     // Create many Disciplinas
     *     const disciplina = await prisma.disciplina.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DisciplinaCreateManyArgs>(
      args?: SelectSubset<T, DisciplinaCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Disciplina.
     * @param {DisciplinaDeleteArgs} args - Arguments to delete one Disciplina.
     * @example
     * // Delete one Disciplina
     * const Disciplina = await prisma.disciplina.delete({
     *   where: {
     *     // ... filter to delete one Disciplina
     *   }
     * })
     * 
    **/
    delete<T extends DisciplinaDeleteArgs>(
      args: SelectSubset<T, DisciplinaDeleteArgs>
    ): Prisma__DisciplinaClient<DisciplinaGetPayload<T>>

    /**
     * Update one Disciplina.
     * @param {DisciplinaUpdateArgs} args - Arguments to update one Disciplina.
     * @example
     * // Update one Disciplina
     * const disciplina = await prisma.disciplina.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DisciplinaUpdateArgs>(
      args: SelectSubset<T, DisciplinaUpdateArgs>
    ): Prisma__DisciplinaClient<DisciplinaGetPayload<T>>

    /**
     * Delete zero or more Disciplinas.
     * @param {DisciplinaDeleteManyArgs} args - Arguments to filter Disciplinas to delete.
     * @example
     * // Delete a few Disciplinas
     * const { count } = await prisma.disciplina.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DisciplinaDeleteManyArgs>(
      args?: SelectSubset<T, DisciplinaDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Disciplinas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Disciplinas
     * const disciplina = await prisma.disciplina.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DisciplinaUpdateManyArgs>(
      args: SelectSubset<T, DisciplinaUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Disciplina.
     * @param {DisciplinaUpsertArgs} args - Arguments to update or create a Disciplina.
     * @example
     * // Update or create a Disciplina
     * const disciplina = await prisma.disciplina.upsert({
     *   create: {
     *     // ... data to create a Disciplina
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Disciplina we want to update
     *   }
     * })
    **/
    upsert<T extends DisciplinaUpsertArgs>(
      args: SelectSubset<T, DisciplinaUpsertArgs>
    ): Prisma__DisciplinaClient<DisciplinaGetPayload<T>>

    /**
     * Count the number of Disciplinas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinaCountArgs} args - Arguments to filter Disciplinas to count.
     * @example
     * // Count the number of Disciplinas
     * const count = await prisma.disciplina.count({
     *   where: {
     *     // ... the filter for the Disciplinas we want to count
     *   }
     * })
    **/
    count<T extends DisciplinaCountArgs>(
      args?: Subset<T, DisciplinaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DisciplinaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Disciplina.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DisciplinaAggregateArgs>(args: Subset<T, DisciplinaAggregateArgs>): Prisma.PrismaPromise<GetDisciplinaAggregateType<T>>

    /**
     * Group by Disciplina.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DisciplinaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DisciplinaGroupByArgs['orderBy'] }
        : { orderBy?: DisciplinaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DisciplinaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDisciplinaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Disciplina.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DisciplinaClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    professor<T extends ProfessorArgs= {}>(args?: Subset<T, ProfessorArgs>): Prisma__ProfessorClient<ProfessorGetPayload<T> | Null>;

    curso<T extends CursoArgs= {}>(args?: Subset<T, CursoArgs>): Prisma__CursoClient<CursoGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Disciplina base type for findUnique actions
   */
  export type DisciplinaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Disciplina
     */
    select?: DisciplinaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplinaInclude | null
    /**
     * Filter, which Disciplina to fetch.
     */
    where: DisciplinaWhereUniqueInput
  }

  /**
   * Disciplina findUnique
   */
  export interface DisciplinaFindUniqueArgs extends DisciplinaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Disciplina findUniqueOrThrow
   */
  export type DisciplinaFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Disciplina
     */
    select?: DisciplinaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplinaInclude | null
    /**
     * Filter, which Disciplina to fetch.
     */
    where: DisciplinaWhereUniqueInput
  }


  /**
   * Disciplina base type for findFirst actions
   */
  export type DisciplinaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Disciplina
     */
    select?: DisciplinaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplinaInclude | null
    /**
     * Filter, which Disciplina to fetch.
     */
    where?: DisciplinaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplinas to fetch.
     */
    orderBy?: Enumerable<DisciplinaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Disciplinas.
     */
    cursor?: DisciplinaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplinas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Disciplinas.
     */
    distinct?: Enumerable<DisciplinaScalarFieldEnum>
  }

  /**
   * Disciplina findFirst
   */
  export interface DisciplinaFindFirstArgs extends DisciplinaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Disciplina findFirstOrThrow
   */
  export type DisciplinaFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Disciplina
     */
    select?: DisciplinaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplinaInclude | null
    /**
     * Filter, which Disciplina to fetch.
     */
    where?: DisciplinaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplinas to fetch.
     */
    orderBy?: Enumerable<DisciplinaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Disciplinas.
     */
    cursor?: DisciplinaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplinas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Disciplinas.
     */
    distinct?: Enumerable<DisciplinaScalarFieldEnum>
  }


  /**
   * Disciplina findMany
   */
  export type DisciplinaFindManyArgs = {
    /**
     * Select specific fields to fetch from the Disciplina
     */
    select?: DisciplinaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplinaInclude | null
    /**
     * Filter, which Disciplinas to fetch.
     */
    where?: DisciplinaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplinas to fetch.
     */
    orderBy?: Enumerable<DisciplinaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Disciplinas.
     */
    cursor?: DisciplinaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplinas.
     */
    skip?: number
    distinct?: Enumerable<DisciplinaScalarFieldEnum>
  }


  /**
   * Disciplina create
   */
  export type DisciplinaCreateArgs = {
    /**
     * Select specific fields to fetch from the Disciplina
     */
    select?: DisciplinaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplinaInclude | null
    /**
     * The data needed to create a Disciplina.
     */
    data: XOR<DisciplinaCreateInput, DisciplinaUncheckedCreateInput>
  }


  /**
   * Disciplina createMany
   */
  export type DisciplinaCreateManyArgs = {
    /**
     * The data used to create many Disciplinas.
     */
    data: Enumerable<DisciplinaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Disciplina update
   */
  export type DisciplinaUpdateArgs = {
    /**
     * Select specific fields to fetch from the Disciplina
     */
    select?: DisciplinaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplinaInclude | null
    /**
     * The data needed to update a Disciplina.
     */
    data: XOR<DisciplinaUpdateInput, DisciplinaUncheckedUpdateInput>
    /**
     * Choose, which Disciplina to update.
     */
    where: DisciplinaWhereUniqueInput
  }


  /**
   * Disciplina updateMany
   */
  export type DisciplinaUpdateManyArgs = {
    /**
     * The data used to update Disciplinas.
     */
    data: XOR<DisciplinaUpdateManyMutationInput, DisciplinaUncheckedUpdateManyInput>
    /**
     * Filter which Disciplinas to update
     */
    where?: DisciplinaWhereInput
  }


  /**
   * Disciplina upsert
   */
  export type DisciplinaUpsertArgs = {
    /**
     * Select specific fields to fetch from the Disciplina
     */
    select?: DisciplinaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplinaInclude | null
    /**
     * The filter to search for the Disciplina to update in case it exists.
     */
    where: DisciplinaWhereUniqueInput
    /**
     * In case the Disciplina found by the `where` argument doesn't exist, create a new Disciplina with this data.
     */
    create: XOR<DisciplinaCreateInput, DisciplinaUncheckedCreateInput>
    /**
     * In case the Disciplina was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DisciplinaUpdateInput, DisciplinaUncheckedUpdateInput>
  }


  /**
   * Disciplina delete
   */
  export type DisciplinaDeleteArgs = {
    /**
     * Select specific fields to fetch from the Disciplina
     */
    select?: DisciplinaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplinaInclude | null
    /**
     * Filter which Disciplina to delete.
     */
    where: DisciplinaWhereUniqueInput
  }


  /**
   * Disciplina deleteMany
   */
  export type DisciplinaDeleteManyArgs = {
    /**
     * Filter which Disciplinas to delete
     */
    where?: DisciplinaWhereInput
  }


  /**
   * Disciplina without action
   */
  export type DisciplinaArgs = {
    /**
     * Select specific fields to fetch from the Disciplina
     */
    select?: DisciplinaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplinaInclude | null
  }



  /**
   * Model Professor
   */


  export type AggregateProfessor = {
    _count: ProfessorCountAggregateOutputType | null
    _min: ProfessorMinAggregateOutputType | null
    _max: ProfessorMaxAggregateOutputType | null
  }

  export type ProfessorMinAggregateOutputType = {
    id: string | null
    nome: string | null
    email: string | null
  }

  export type ProfessorMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    email: string | null
  }

  export type ProfessorCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    _all: number
  }


  export type ProfessorMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
  }

  export type ProfessorMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
  }

  export type ProfessorCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    _all?: true
  }

  export type ProfessorAggregateArgs = {
    /**
     * Filter which Professor to aggregate.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: Enumerable<ProfessorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Professors
    **/
    _count?: true | ProfessorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessorMaxAggregateInputType
  }

  export type GetProfessorAggregateType<T extends ProfessorAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessor[P]>
      : GetScalarType<T[P], AggregateProfessor[P]>
  }




  export type ProfessorGroupByArgs = {
    where?: ProfessorWhereInput
    orderBy?: Enumerable<ProfessorOrderByWithAggregationInput>
    by: ProfessorScalarFieldEnum[]
    having?: ProfessorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessorCountAggregateInputType | true
    _min?: ProfessorMinAggregateInputType
    _max?: ProfessorMaxAggregateInputType
  }


  export type ProfessorGroupByOutputType = {
    id: string
    nome: string
    email: string
    _count: ProfessorCountAggregateOutputType | null
    _min: ProfessorMinAggregateOutputType | null
    _max: ProfessorMaxAggregateOutputType | null
  }

  type GetProfessorGroupByPayload<T extends ProfessorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProfessorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessorGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessorGroupByOutputType[P]>
        }
      >
    >


  export type ProfessorSelect = {
    id?: boolean
    nome?: boolean
    email?: boolean
    restricao?: boolean | Professor$restricaoArgs
    disciplina?: boolean | Professor$disciplinaArgs
    _count?: boolean | ProfessorCountOutputTypeArgs
  }


  export type ProfessorInclude = {
    restricao?: boolean | Professor$restricaoArgs
    disciplina?: boolean | Professor$disciplinaArgs
    _count?: boolean | ProfessorCountOutputTypeArgs
  }

  export type ProfessorGetPayload<S extends boolean | null | undefined | ProfessorArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Professor :
    S extends undefined ? never :
    S extends { include: any } & (ProfessorArgs | ProfessorFindManyArgs)
    ? Professor  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'restricao' ? Array < RestricaoGetPayload<S['include'][P]>>  :
        P extends 'disciplina' ? Array < DisciplinaGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProfessorCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ProfessorArgs | ProfessorFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'restricao' ? Array < RestricaoGetPayload<S['select'][P]>>  :
        P extends 'disciplina' ? Array < DisciplinaGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProfessorCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Professor ? Professor[P] : never
  } 
      : Professor


  type ProfessorCountArgs = 
    Omit<ProfessorFindManyArgs, 'select' | 'include'> & {
      select?: ProfessorCountAggregateInputType | true
    }

  export interface ProfessorDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Professor that matches the filter.
     * @param {ProfessorFindUniqueArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfessorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProfessorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Professor'> extends True ? Prisma__ProfessorClient<ProfessorGetPayload<T>> : Prisma__ProfessorClient<ProfessorGetPayload<T> | null, null>

    /**
     * Find one Professor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProfessorFindUniqueOrThrowArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProfessorFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProfessorFindUniqueOrThrowArgs>
    ): Prisma__ProfessorClient<ProfessorGetPayload<T>>

    /**
     * Find the first Professor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorFindFirstArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfessorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProfessorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Professor'> extends True ? Prisma__ProfessorClient<ProfessorGetPayload<T>> : Prisma__ProfessorClient<ProfessorGetPayload<T> | null, null>

    /**
     * Find the first Professor that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorFindFirstOrThrowArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProfessorFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProfessorFindFirstOrThrowArgs>
    ): Prisma__ProfessorClient<ProfessorGetPayload<T>>

    /**
     * Find zero or more Professors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Professors
     * const professors = await prisma.professor.findMany()
     * 
     * // Get first 10 Professors
     * const professors = await prisma.professor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professorWithIdOnly = await prisma.professor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProfessorFindManyArgs>(
      args?: SelectSubset<T, ProfessorFindManyArgs>
    ): Prisma.PrismaPromise<Array<ProfessorGetPayload<T>>>

    /**
     * Create a Professor.
     * @param {ProfessorCreateArgs} args - Arguments to create a Professor.
     * @example
     * // Create one Professor
     * const Professor = await prisma.professor.create({
     *   data: {
     *     // ... data to create a Professor
     *   }
     * })
     * 
    **/
    create<T extends ProfessorCreateArgs>(
      args: SelectSubset<T, ProfessorCreateArgs>
    ): Prisma__ProfessorClient<ProfessorGetPayload<T>>

    /**
     * Create many Professors.
     *     @param {ProfessorCreateManyArgs} args - Arguments to create many Professors.
     *     @example
     *     // Create many Professors
     *     const professor = await prisma.professor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfessorCreateManyArgs>(
      args?: SelectSubset<T, ProfessorCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Professor.
     * @param {ProfessorDeleteArgs} args - Arguments to delete one Professor.
     * @example
     * // Delete one Professor
     * const Professor = await prisma.professor.delete({
     *   where: {
     *     // ... filter to delete one Professor
     *   }
     * })
     * 
    **/
    delete<T extends ProfessorDeleteArgs>(
      args: SelectSubset<T, ProfessorDeleteArgs>
    ): Prisma__ProfessorClient<ProfessorGetPayload<T>>

    /**
     * Update one Professor.
     * @param {ProfessorUpdateArgs} args - Arguments to update one Professor.
     * @example
     * // Update one Professor
     * const professor = await prisma.professor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfessorUpdateArgs>(
      args: SelectSubset<T, ProfessorUpdateArgs>
    ): Prisma__ProfessorClient<ProfessorGetPayload<T>>

    /**
     * Delete zero or more Professors.
     * @param {ProfessorDeleteManyArgs} args - Arguments to filter Professors to delete.
     * @example
     * // Delete a few Professors
     * const { count } = await prisma.professor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfessorDeleteManyArgs>(
      args?: SelectSubset<T, ProfessorDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Professors
     * const professor = await prisma.professor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfessorUpdateManyArgs>(
      args: SelectSubset<T, ProfessorUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Professor.
     * @param {ProfessorUpsertArgs} args - Arguments to update or create a Professor.
     * @example
     * // Update or create a Professor
     * const professor = await prisma.professor.upsert({
     *   create: {
     *     // ... data to create a Professor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Professor we want to update
     *   }
     * })
    **/
    upsert<T extends ProfessorUpsertArgs>(
      args: SelectSubset<T, ProfessorUpsertArgs>
    ): Prisma__ProfessorClient<ProfessorGetPayload<T>>

    /**
     * Count the number of Professors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorCountArgs} args - Arguments to filter Professors to count.
     * @example
     * // Count the number of Professors
     * const count = await prisma.professor.count({
     *   where: {
     *     // ... the filter for the Professors we want to count
     *   }
     * })
    **/
    count<T extends ProfessorCountArgs>(
      args?: Subset<T, ProfessorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Professor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessorAggregateArgs>(args: Subset<T, ProfessorAggregateArgs>): Prisma.PrismaPromise<GetProfessorAggregateType<T>>

    /**
     * Group by Professor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessorGroupByArgs['orderBy'] }
        : { orderBy?: ProfessorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Professor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProfessorClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    restricao<T extends Professor$restricaoArgs= {}>(args?: Subset<T, Professor$restricaoArgs>): Prisma.PrismaPromise<Array<RestricaoGetPayload<T>>| Null>;

    disciplina<T extends Professor$disciplinaArgs= {}>(args?: Subset<T, Professor$disciplinaArgs>): Prisma.PrismaPromise<Array<DisciplinaGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Professor base type for findUnique actions
   */
  export type ProfessorFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude | null
    /**
     * Filter, which Professor to fetch.
     */
    where: ProfessorWhereUniqueInput
  }

  /**
   * Professor findUnique
   */
  export interface ProfessorFindUniqueArgs extends ProfessorFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Professor findUniqueOrThrow
   */
  export type ProfessorFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude | null
    /**
     * Filter, which Professor to fetch.
     */
    where: ProfessorWhereUniqueInput
  }


  /**
   * Professor base type for findFirst actions
   */
  export type ProfessorFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude | null
    /**
     * Filter, which Professor to fetch.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: Enumerable<ProfessorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professors.
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professors.
     */
    distinct?: Enumerable<ProfessorScalarFieldEnum>
  }

  /**
   * Professor findFirst
   */
  export interface ProfessorFindFirstArgs extends ProfessorFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Professor findFirstOrThrow
   */
  export type ProfessorFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude | null
    /**
     * Filter, which Professor to fetch.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: Enumerable<ProfessorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professors.
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professors.
     */
    distinct?: Enumerable<ProfessorScalarFieldEnum>
  }


  /**
   * Professor findMany
   */
  export type ProfessorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude | null
    /**
     * Filter, which Professors to fetch.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: Enumerable<ProfessorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Professors.
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    distinct?: Enumerable<ProfessorScalarFieldEnum>
  }


  /**
   * Professor create
   */
  export type ProfessorCreateArgs = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude | null
    /**
     * The data needed to create a Professor.
     */
    data: XOR<ProfessorCreateInput, ProfessorUncheckedCreateInput>
  }


  /**
   * Professor createMany
   */
  export type ProfessorCreateManyArgs = {
    /**
     * The data used to create many Professors.
     */
    data: Enumerable<ProfessorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Professor update
   */
  export type ProfessorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude | null
    /**
     * The data needed to update a Professor.
     */
    data: XOR<ProfessorUpdateInput, ProfessorUncheckedUpdateInput>
    /**
     * Choose, which Professor to update.
     */
    where: ProfessorWhereUniqueInput
  }


  /**
   * Professor updateMany
   */
  export type ProfessorUpdateManyArgs = {
    /**
     * The data used to update Professors.
     */
    data: XOR<ProfessorUpdateManyMutationInput, ProfessorUncheckedUpdateManyInput>
    /**
     * Filter which Professors to update
     */
    where?: ProfessorWhereInput
  }


  /**
   * Professor upsert
   */
  export type ProfessorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude | null
    /**
     * The filter to search for the Professor to update in case it exists.
     */
    where: ProfessorWhereUniqueInput
    /**
     * In case the Professor found by the `where` argument doesn't exist, create a new Professor with this data.
     */
    create: XOR<ProfessorCreateInput, ProfessorUncheckedCreateInput>
    /**
     * In case the Professor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfessorUpdateInput, ProfessorUncheckedUpdateInput>
  }


  /**
   * Professor delete
   */
  export type ProfessorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude | null
    /**
     * Filter which Professor to delete.
     */
    where: ProfessorWhereUniqueInput
  }


  /**
   * Professor deleteMany
   */
  export type ProfessorDeleteManyArgs = {
    /**
     * Filter which Professors to delete
     */
    where?: ProfessorWhereInput
  }


  /**
   * Professor.restricao
   */
  export type Professor$restricaoArgs = {
    /**
     * Select specific fields to fetch from the Restricao
     */
    select?: RestricaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestricaoInclude | null
    where?: RestricaoWhereInput
    orderBy?: Enumerable<RestricaoOrderByWithRelationInput>
    cursor?: RestricaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RestricaoScalarFieldEnum>
  }


  /**
   * Professor.disciplina
   */
  export type Professor$disciplinaArgs = {
    /**
     * Select specific fields to fetch from the Disciplina
     */
    select?: DisciplinaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplinaInclude | null
    where?: DisciplinaWhereInput
    orderBy?: Enumerable<DisciplinaOrderByWithRelationInput>
    cursor?: DisciplinaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DisciplinaScalarFieldEnum>
  }


  /**
   * Professor without action
   */
  export type ProfessorArgs = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude | null
  }



  /**
   * Model Restricao
   */


  export type AggregateRestricao = {
    _count: RestricaoCountAggregateOutputType | null
    _avg: RestricaoAvgAggregateOutputType | null
    _sum: RestricaoSumAggregateOutputType | null
    _min: RestricaoMinAggregateOutputType | null
    _max: RestricaoMaxAggregateOutputType | null
  }

  export type RestricaoAvgAggregateOutputType = {
    dia: number | null
  }

  export type RestricaoSumAggregateOutputType = {
    dia: number | null
  }

  export type RestricaoMinAggregateOutputType = {
    id: string | null
    professor_id: string | null
    dia: number | null
    periodo: string | null
  }

  export type RestricaoMaxAggregateOutputType = {
    id: string | null
    professor_id: string | null
    dia: number | null
    periodo: string | null
  }

  export type RestricaoCountAggregateOutputType = {
    id: number
    professor_id: number
    dia: number
    periodo: number
    _all: number
  }


  export type RestricaoAvgAggregateInputType = {
    dia?: true
  }

  export type RestricaoSumAggregateInputType = {
    dia?: true
  }

  export type RestricaoMinAggregateInputType = {
    id?: true
    professor_id?: true
    dia?: true
    periodo?: true
  }

  export type RestricaoMaxAggregateInputType = {
    id?: true
    professor_id?: true
    dia?: true
    periodo?: true
  }

  export type RestricaoCountAggregateInputType = {
    id?: true
    professor_id?: true
    dia?: true
    periodo?: true
    _all?: true
  }

  export type RestricaoAggregateArgs = {
    /**
     * Filter which Restricao to aggregate.
     */
    where?: RestricaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restricaos to fetch.
     */
    orderBy?: Enumerable<RestricaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RestricaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restricaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restricaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Restricaos
    **/
    _count?: true | RestricaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RestricaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RestricaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RestricaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RestricaoMaxAggregateInputType
  }

  export type GetRestricaoAggregateType<T extends RestricaoAggregateArgs> = {
        [P in keyof T & keyof AggregateRestricao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRestricao[P]>
      : GetScalarType<T[P], AggregateRestricao[P]>
  }




  export type RestricaoGroupByArgs = {
    where?: RestricaoWhereInput
    orderBy?: Enumerable<RestricaoOrderByWithAggregationInput>
    by: RestricaoScalarFieldEnum[]
    having?: RestricaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RestricaoCountAggregateInputType | true
    _avg?: RestricaoAvgAggregateInputType
    _sum?: RestricaoSumAggregateInputType
    _min?: RestricaoMinAggregateInputType
    _max?: RestricaoMaxAggregateInputType
  }


  export type RestricaoGroupByOutputType = {
    id: string
    professor_id: string
    dia: number
    periodo: string
    _count: RestricaoCountAggregateOutputType | null
    _avg: RestricaoAvgAggregateOutputType | null
    _sum: RestricaoSumAggregateOutputType | null
    _min: RestricaoMinAggregateOutputType | null
    _max: RestricaoMaxAggregateOutputType | null
  }

  type GetRestricaoGroupByPayload<T extends RestricaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RestricaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RestricaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RestricaoGroupByOutputType[P]>
            : GetScalarType<T[P], RestricaoGroupByOutputType[P]>
        }
      >
    >


  export type RestricaoSelect = {
    id?: boolean
    professor_id?: boolean
    dia?: boolean
    periodo?: boolean
    professor?: boolean | ProfessorArgs
  }


  export type RestricaoInclude = {
    professor?: boolean | ProfessorArgs
  }

  export type RestricaoGetPayload<S extends boolean | null | undefined | RestricaoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Restricao :
    S extends undefined ? never :
    S extends { include: any } & (RestricaoArgs | RestricaoFindManyArgs)
    ? Restricao  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'professor' ? ProfessorGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (RestricaoArgs | RestricaoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'professor' ? ProfessorGetPayload<S['select'][P]> :  P extends keyof Restricao ? Restricao[P] : never
  } 
      : Restricao


  type RestricaoCountArgs = 
    Omit<RestricaoFindManyArgs, 'select' | 'include'> & {
      select?: RestricaoCountAggregateInputType | true
    }

  export interface RestricaoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Restricao that matches the filter.
     * @param {RestricaoFindUniqueArgs} args - Arguments to find a Restricao
     * @example
     * // Get one Restricao
     * const restricao = await prisma.restricao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RestricaoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RestricaoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Restricao'> extends True ? Prisma__RestricaoClient<RestricaoGetPayload<T>> : Prisma__RestricaoClient<RestricaoGetPayload<T> | null, null>

    /**
     * Find one Restricao that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RestricaoFindUniqueOrThrowArgs} args - Arguments to find a Restricao
     * @example
     * // Get one Restricao
     * const restricao = await prisma.restricao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RestricaoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RestricaoFindUniqueOrThrowArgs>
    ): Prisma__RestricaoClient<RestricaoGetPayload<T>>

    /**
     * Find the first Restricao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestricaoFindFirstArgs} args - Arguments to find a Restricao
     * @example
     * // Get one Restricao
     * const restricao = await prisma.restricao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RestricaoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RestricaoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Restricao'> extends True ? Prisma__RestricaoClient<RestricaoGetPayload<T>> : Prisma__RestricaoClient<RestricaoGetPayload<T> | null, null>

    /**
     * Find the first Restricao that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestricaoFindFirstOrThrowArgs} args - Arguments to find a Restricao
     * @example
     * // Get one Restricao
     * const restricao = await prisma.restricao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RestricaoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RestricaoFindFirstOrThrowArgs>
    ): Prisma__RestricaoClient<RestricaoGetPayload<T>>

    /**
     * Find zero or more Restricaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestricaoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Restricaos
     * const restricaos = await prisma.restricao.findMany()
     * 
     * // Get first 10 Restricaos
     * const restricaos = await prisma.restricao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const restricaoWithIdOnly = await prisma.restricao.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RestricaoFindManyArgs>(
      args?: SelectSubset<T, RestricaoFindManyArgs>
    ): Prisma.PrismaPromise<Array<RestricaoGetPayload<T>>>

    /**
     * Create a Restricao.
     * @param {RestricaoCreateArgs} args - Arguments to create a Restricao.
     * @example
     * // Create one Restricao
     * const Restricao = await prisma.restricao.create({
     *   data: {
     *     // ... data to create a Restricao
     *   }
     * })
     * 
    **/
    create<T extends RestricaoCreateArgs>(
      args: SelectSubset<T, RestricaoCreateArgs>
    ): Prisma__RestricaoClient<RestricaoGetPayload<T>>

    /**
     * Create many Restricaos.
     *     @param {RestricaoCreateManyArgs} args - Arguments to create many Restricaos.
     *     @example
     *     // Create many Restricaos
     *     const restricao = await prisma.restricao.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RestricaoCreateManyArgs>(
      args?: SelectSubset<T, RestricaoCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Restricao.
     * @param {RestricaoDeleteArgs} args - Arguments to delete one Restricao.
     * @example
     * // Delete one Restricao
     * const Restricao = await prisma.restricao.delete({
     *   where: {
     *     // ... filter to delete one Restricao
     *   }
     * })
     * 
    **/
    delete<T extends RestricaoDeleteArgs>(
      args: SelectSubset<T, RestricaoDeleteArgs>
    ): Prisma__RestricaoClient<RestricaoGetPayload<T>>

    /**
     * Update one Restricao.
     * @param {RestricaoUpdateArgs} args - Arguments to update one Restricao.
     * @example
     * // Update one Restricao
     * const restricao = await prisma.restricao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RestricaoUpdateArgs>(
      args: SelectSubset<T, RestricaoUpdateArgs>
    ): Prisma__RestricaoClient<RestricaoGetPayload<T>>

    /**
     * Delete zero or more Restricaos.
     * @param {RestricaoDeleteManyArgs} args - Arguments to filter Restricaos to delete.
     * @example
     * // Delete a few Restricaos
     * const { count } = await prisma.restricao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RestricaoDeleteManyArgs>(
      args?: SelectSubset<T, RestricaoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Restricaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestricaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Restricaos
     * const restricao = await prisma.restricao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RestricaoUpdateManyArgs>(
      args: SelectSubset<T, RestricaoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Restricao.
     * @param {RestricaoUpsertArgs} args - Arguments to update or create a Restricao.
     * @example
     * // Update or create a Restricao
     * const restricao = await prisma.restricao.upsert({
     *   create: {
     *     // ... data to create a Restricao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Restricao we want to update
     *   }
     * })
    **/
    upsert<T extends RestricaoUpsertArgs>(
      args: SelectSubset<T, RestricaoUpsertArgs>
    ): Prisma__RestricaoClient<RestricaoGetPayload<T>>

    /**
     * Count the number of Restricaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestricaoCountArgs} args - Arguments to filter Restricaos to count.
     * @example
     * // Count the number of Restricaos
     * const count = await prisma.restricao.count({
     *   where: {
     *     // ... the filter for the Restricaos we want to count
     *   }
     * })
    **/
    count<T extends RestricaoCountArgs>(
      args?: Subset<T, RestricaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RestricaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Restricao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestricaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RestricaoAggregateArgs>(args: Subset<T, RestricaoAggregateArgs>): Prisma.PrismaPromise<GetRestricaoAggregateType<T>>

    /**
     * Group by Restricao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestricaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RestricaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RestricaoGroupByArgs['orderBy'] }
        : { orderBy?: RestricaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RestricaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRestricaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Restricao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RestricaoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    professor<T extends ProfessorArgs= {}>(args?: Subset<T, ProfessorArgs>): Prisma__ProfessorClient<ProfessorGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Restricao base type for findUnique actions
   */
  export type RestricaoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Restricao
     */
    select?: RestricaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestricaoInclude | null
    /**
     * Filter, which Restricao to fetch.
     */
    where: RestricaoWhereUniqueInput
  }

  /**
   * Restricao findUnique
   */
  export interface RestricaoFindUniqueArgs extends RestricaoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Restricao findUniqueOrThrow
   */
  export type RestricaoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Restricao
     */
    select?: RestricaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestricaoInclude | null
    /**
     * Filter, which Restricao to fetch.
     */
    where: RestricaoWhereUniqueInput
  }


  /**
   * Restricao base type for findFirst actions
   */
  export type RestricaoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Restricao
     */
    select?: RestricaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestricaoInclude | null
    /**
     * Filter, which Restricao to fetch.
     */
    where?: RestricaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restricaos to fetch.
     */
    orderBy?: Enumerable<RestricaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Restricaos.
     */
    cursor?: RestricaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restricaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restricaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Restricaos.
     */
    distinct?: Enumerable<RestricaoScalarFieldEnum>
  }

  /**
   * Restricao findFirst
   */
  export interface RestricaoFindFirstArgs extends RestricaoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Restricao findFirstOrThrow
   */
  export type RestricaoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Restricao
     */
    select?: RestricaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestricaoInclude | null
    /**
     * Filter, which Restricao to fetch.
     */
    where?: RestricaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restricaos to fetch.
     */
    orderBy?: Enumerable<RestricaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Restricaos.
     */
    cursor?: RestricaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restricaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restricaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Restricaos.
     */
    distinct?: Enumerable<RestricaoScalarFieldEnum>
  }


  /**
   * Restricao findMany
   */
  export type RestricaoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Restricao
     */
    select?: RestricaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestricaoInclude | null
    /**
     * Filter, which Restricaos to fetch.
     */
    where?: RestricaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restricaos to fetch.
     */
    orderBy?: Enumerable<RestricaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Restricaos.
     */
    cursor?: RestricaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restricaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restricaos.
     */
    skip?: number
    distinct?: Enumerable<RestricaoScalarFieldEnum>
  }


  /**
   * Restricao create
   */
  export type RestricaoCreateArgs = {
    /**
     * Select specific fields to fetch from the Restricao
     */
    select?: RestricaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestricaoInclude | null
    /**
     * The data needed to create a Restricao.
     */
    data: XOR<RestricaoCreateInput, RestricaoUncheckedCreateInput>
  }


  /**
   * Restricao createMany
   */
  export type RestricaoCreateManyArgs = {
    /**
     * The data used to create many Restricaos.
     */
    data: Enumerable<RestricaoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Restricao update
   */
  export type RestricaoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Restricao
     */
    select?: RestricaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestricaoInclude | null
    /**
     * The data needed to update a Restricao.
     */
    data: XOR<RestricaoUpdateInput, RestricaoUncheckedUpdateInput>
    /**
     * Choose, which Restricao to update.
     */
    where: RestricaoWhereUniqueInput
  }


  /**
   * Restricao updateMany
   */
  export type RestricaoUpdateManyArgs = {
    /**
     * The data used to update Restricaos.
     */
    data: XOR<RestricaoUpdateManyMutationInput, RestricaoUncheckedUpdateManyInput>
    /**
     * Filter which Restricaos to update
     */
    where?: RestricaoWhereInput
  }


  /**
   * Restricao upsert
   */
  export type RestricaoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Restricao
     */
    select?: RestricaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestricaoInclude | null
    /**
     * The filter to search for the Restricao to update in case it exists.
     */
    where: RestricaoWhereUniqueInput
    /**
     * In case the Restricao found by the `where` argument doesn't exist, create a new Restricao with this data.
     */
    create: XOR<RestricaoCreateInput, RestricaoUncheckedCreateInput>
    /**
     * In case the Restricao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RestricaoUpdateInput, RestricaoUncheckedUpdateInput>
  }


  /**
   * Restricao delete
   */
  export type RestricaoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Restricao
     */
    select?: RestricaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestricaoInclude | null
    /**
     * Filter which Restricao to delete.
     */
    where: RestricaoWhereUniqueInput
  }


  /**
   * Restricao deleteMany
   */
  export type RestricaoDeleteManyArgs = {
    /**
     * Filter which Restricaos to delete
     */
    where?: RestricaoWhereInput
  }


  /**
   * Restricao without action
   */
  export type RestricaoArgs = {
    /**
     * Select specific fields to fetch from the Restricao
     */
    select?: RestricaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestricaoInclude | null
  }



  /**
   * Model Turma
   */


  export type AggregateTurma = {
    _count: TurmaCountAggregateOutputType | null
    _avg: TurmaAvgAggregateOutputType | null
    _sum: TurmaSumAggregateOutputType | null
    _min: TurmaMinAggregateOutputType | null
    _max: TurmaMaxAggregateOutputType | null
  }

  export type TurmaAvgAggregateOutputType = {
    periodo: number | null
    qtalunos: number | null
  }

  export type TurmaSumAggregateOutputType = {
    periodo: number | null
    qtalunos: number | null
  }

  export type TurmaMinAggregateOutputType = {
    id: string | null
    periodo: number | null
    qtalunos: number | null
    curso_id: string | null
  }

  export type TurmaMaxAggregateOutputType = {
    id: string | null
    periodo: number | null
    qtalunos: number | null
    curso_id: string | null
  }

  export type TurmaCountAggregateOutputType = {
    id: number
    periodo: number
    qtalunos: number
    curso_id: number
    _all: number
  }


  export type TurmaAvgAggregateInputType = {
    periodo?: true
    qtalunos?: true
  }

  export type TurmaSumAggregateInputType = {
    periodo?: true
    qtalunos?: true
  }

  export type TurmaMinAggregateInputType = {
    id?: true
    periodo?: true
    qtalunos?: true
    curso_id?: true
  }

  export type TurmaMaxAggregateInputType = {
    id?: true
    periodo?: true
    qtalunos?: true
    curso_id?: true
  }

  export type TurmaCountAggregateInputType = {
    id?: true
    periodo?: true
    qtalunos?: true
    curso_id?: true
    _all?: true
  }

  export type TurmaAggregateArgs = {
    /**
     * Filter which Turma to aggregate.
     */
    where?: TurmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turmas to fetch.
     */
    orderBy?: Enumerable<TurmaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TurmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Turmas
    **/
    _count?: true | TurmaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TurmaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TurmaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TurmaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TurmaMaxAggregateInputType
  }

  export type GetTurmaAggregateType<T extends TurmaAggregateArgs> = {
        [P in keyof T & keyof AggregateTurma]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTurma[P]>
      : GetScalarType<T[P], AggregateTurma[P]>
  }




  export type TurmaGroupByArgs = {
    where?: TurmaWhereInput
    orderBy?: Enumerable<TurmaOrderByWithAggregationInput>
    by: TurmaScalarFieldEnum[]
    having?: TurmaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TurmaCountAggregateInputType | true
    _avg?: TurmaAvgAggregateInputType
    _sum?: TurmaSumAggregateInputType
    _min?: TurmaMinAggregateInputType
    _max?: TurmaMaxAggregateInputType
  }


  export type TurmaGroupByOutputType = {
    id: string
    periodo: number
    qtalunos: number
    curso_id: string
    _count: TurmaCountAggregateOutputType | null
    _avg: TurmaAvgAggregateOutputType | null
    _sum: TurmaSumAggregateOutputType | null
    _min: TurmaMinAggregateOutputType | null
    _max: TurmaMaxAggregateOutputType | null
  }

  type GetTurmaGroupByPayload<T extends TurmaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TurmaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TurmaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TurmaGroupByOutputType[P]>
            : GetScalarType<T[P], TurmaGroupByOutputType[P]>
        }
      >
    >


  export type TurmaSelect = {
    id?: boolean
    periodo?: boolean
    qtalunos?: boolean
    curso_id?: boolean
    curso?: boolean | CursoArgs
  }


  export type TurmaInclude = {
    curso?: boolean | CursoArgs
  }

  export type TurmaGetPayload<S extends boolean | null | undefined | TurmaArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Turma :
    S extends undefined ? never :
    S extends { include: any } & (TurmaArgs | TurmaFindManyArgs)
    ? Turma  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'curso' ? CursoGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TurmaArgs | TurmaFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'curso' ? CursoGetPayload<S['select'][P]> :  P extends keyof Turma ? Turma[P] : never
  } 
      : Turma


  type TurmaCountArgs = 
    Omit<TurmaFindManyArgs, 'select' | 'include'> & {
      select?: TurmaCountAggregateInputType | true
    }

  export interface TurmaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Turma that matches the filter.
     * @param {TurmaFindUniqueArgs} args - Arguments to find a Turma
     * @example
     * // Get one Turma
     * const turma = await prisma.turma.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TurmaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TurmaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Turma'> extends True ? Prisma__TurmaClient<TurmaGetPayload<T>> : Prisma__TurmaClient<TurmaGetPayload<T> | null, null>

    /**
     * Find one Turma that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TurmaFindUniqueOrThrowArgs} args - Arguments to find a Turma
     * @example
     * // Get one Turma
     * const turma = await prisma.turma.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TurmaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TurmaFindUniqueOrThrowArgs>
    ): Prisma__TurmaClient<TurmaGetPayload<T>>

    /**
     * Find the first Turma that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaFindFirstArgs} args - Arguments to find a Turma
     * @example
     * // Get one Turma
     * const turma = await prisma.turma.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TurmaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TurmaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Turma'> extends True ? Prisma__TurmaClient<TurmaGetPayload<T>> : Prisma__TurmaClient<TurmaGetPayload<T> | null, null>

    /**
     * Find the first Turma that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaFindFirstOrThrowArgs} args - Arguments to find a Turma
     * @example
     * // Get one Turma
     * const turma = await prisma.turma.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TurmaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TurmaFindFirstOrThrowArgs>
    ): Prisma__TurmaClient<TurmaGetPayload<T>>

    /**
     * Find zero or more Turmas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Turmas
     * const turmas = await prisma.turma.findMany()
     * 
     * // Get first 10 Turmas
     * const turmas = await prisma.turma.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const turmaWithIdOnly = await prisma.turma.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TurmaFindManyArgs>(
      args?: SelectSubset<T, TurmaFindManyArgs>
    ): Prisma.PrismaPromise<Array<TurmaGetPayload<T>>>

    /**
     * Create a Turma.
     * @param {TurmaCreateArgs} args - Arguments to create a Turma.
     * @example
     * // Create one Turma
     * const Turma = await prisma.turma.create({
     *   data: {
     *     // ... data to create a Turma
     *   }
     * })
     * 
    **/
    create<T extends TurmaCreateArgs>(
      args: SelectSubset<T, TurmaCreateArgs>
    ): Prisma__TurmaClient<TurmaGetPayload<T>>

    /**
     * Create many Turmas.
     *     @param {TurmaCreateManyArgs} args - Arguments to create many Turmas.
     *     @example
     *     // Create many Turmas
     *     const turma = await prisma.turma.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TurmaCreateManyArgs>(
      args?: SelectSubset<T, TurmaCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Turma.
     * @param {TurmaDeleteArgs} args - Arguments to delete one Turma.
     * @example
     * // Delete one Turma
     * const Turma = await prisma.turma.delete({
     *   where: {
     *     // ... filter to delete one Turma
     *   }
     * })
     * 
    **/
    delete<T extends TurmaDeleteArgs>(
      args: SelectSubset<T, TurmaDeleteArgs>
    ): Prisma__TurmaClient<TurmaGetPayload<T>>

    /**
     * Update one Turma.
     * @param {TurmaUpdateArgs} args - Arguments to update one Turma.
     * @example
     * // Update one Turma
     * const turma = await prisma.turma.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TurmaUpdateArgs>(
      args: SelectSubset<T, TurmaUpdateArgs>
    ): Prisma__TurmaClient<TurmaGetPayload<T>>

    /**
     * Delete zero or more Turmas.
     * @param {TurmaDeleteManyArgs} args - Arguments to filter Turmas to delete.
     * @example
     * // Delete a few Turmas
     * const { count } = await prisma.turma.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TurmaDeleteManyArgs>(
      args?: SelectSubset<T, TurmaDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Turmas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Turmas
     * const turma = await prisma.turma.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TurmaUpdateManyArgs>(
      args: SelectSubset<T, TurmaUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Turma.
     * @param {TurmaUpsertArgs} args - Arguments to update or create a Turma.
     * @example
     * // Update or create a Turma
     * const turma = await prisma.turma.upsert({
     *   create: {
     *     // ... data to create a Turma
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Turma we want to update
     *   }
     * })
    **/
    upsert<T extends TurmaUpsertArgs>(
      args: SelectSubset<T, TurmaUpsertArgs>
    ): Prisma__TurmaClient<TurmaGetPayload<T>>

    /**
     * Count the number of Turmas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaCountArgs} args - Arguments to filter Turmas to count.
     * @example
     * // Count the number of Turmas
     * const count = await prisma.turma.count({
     *   where: {
     *     // ... the filter for the Turmas we want to count
     *   }
     * })
    **/
    count<T extends TurmaCountArgs>(
      args?: Subset<T, TurmaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TurmaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Turma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TurmaAggregateArgs>(args: Subset<T, TurmaAggregateArgs>): Prisma.PrismaPromise<GetTurmaAggregateType<T>>

    /**
     * Group by Turma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TurmaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TurmaGroupByArgs['orderBy'] }
        : { orderBy?: TurmaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TurmaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTurmaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Turma.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TurmaClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    curso<T extends CursoArgs= {}>(args?: Subset<T, CursoArgs>): Prisma__CursoClient<CursoGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Turma base type for findUnique actions
   */
  export type TurmaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude | null
    /**
     * Filter, which Turma to fetch.
     */
    where: TurmaWhereUniqueInput
  }

  /**
   * Turma findUnique
   */
  export interface TurmaFindUniqueArgs extends TurmaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Turma findUniqueOrThrow
   */
  export type TurmaFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude | null
    /**
     * Filter, which Turma to fetch.
     */
    where: TurmaWhereUniqueInput
  }


  /**
   * Turma base type for findFirst actions
   */
  export type TurmaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude | null
    /**
     * Filter, which Turma to fetch.
     */
    where?: TurmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turmas to fetch.
     */
    orderBy?: Enumerable<TurmaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Turmas.
     */
    cursor?: TurmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Turmas.
     */
    distinct?: Enumerable<TurmaScalarFieldEnum>
  }

  /**
   * Turma findFirst
   */
  export interface TurmaFindFirstArgs extends TurmaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Turma findFirstOrThrow
   */
  export type TurmaFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude | null
    /**
     * Filter, which Turma to fetch.
     */
    where?: TurmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turmas to fetch.
     */
    orderBy?: Enumerable<TurmaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Turmas.
     */
    cursor?: TurmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Turmas.
     */
    distinct?: Enumerable<TurmaScalarFieldEnum>
  }


  /**
   * Turma findMany
   */
  export type TurmaFindManyArgs = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude | null
    /**
     * Filter, which Turmas to fetch.
     */
    where?: TurmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turmas to fetch.
     */
    orderBy?: Enumerable<TurmaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Turmas.
     */
    cursor?: TurmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turmas.
     */
    skip?: number
    distinct?: Enumerable<TurmaScalarFieldEnum>
  }


  /**
   * Turma create
   */
  export type TurmaCreateArgs = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude | null
    /**
     * The data needed to create a Turma.
     */
    data: XOR<TurmaCreateInput, TurmaUncheckedCreateInput>
  }


  /**
   * Turma createMany
   */
  export type TurmaCreateManyArgs = {
    /**
     * The data used to create many Turmas.
     */
    data: Enumerable<TurmaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Turma update
   */
  export type TurmaUpdateArgs = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude | null
    /**
     * The data needed to update a Turma.
     */
    data: XOR<TurmaUpdateInput, TurmaUncheckedUpdateInput>
    /**
     * Choose, which Turma to update.
     */
    where: TurmaWhereUniqueInput
  }


  /**
   * Turma updateMany
   */
  export type TurmaUpdateManyArgs = {
    /**
     * The data used to update Turmas.
     */
    data: XOR<TurmaUpdateManyMutationInput, TurmaUncheckedUpdateManyInput>
    /**
     * Filter which Turmas to update
     */
    where?: TurmaWhereInput
  }


  /**
   * Turma upsert
   */
  export type TurmaUpsertArgs = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude | null
    /**
     * The filter to search for the Turma to update in case it exists.
     */
    where: TurmaWhereUniqueInput
    /**
     * In case the Turma found by the `where` argument doesn't exist, create a new Turma with this data.
     */
    create: XOR<TurmaCreateInput, TurmaUncheckedCreateInput>
    /**
     * In case the Turma was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TurmaUpdateInput, TurmaUncheckedUpdateInput>
  }


  /**
   * Turma delete
   */
  export type TurmaDeleteArgs = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude | null
    /**
     * Filter which Turma to delete.
     */
    where: TurmaWhereUniqueInput
  }


  /**
   * Turma deleteMany
   */
  export type TurmaDeleteManyArgs = {
    /**
     * Filter which Turmas to delete
     */
    where?: TurmaWhereInput
  }


  /**
   * Turma without action
   */
  export type TurmaArgs = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude | null
  }



  /**
   * Model Sala
   */


  export type AggregateSala = {
    _count: SalaCountAggregateOutputType | null
    _avg: SalaAvgAggregateOutputType | null
    _sum: SalaSumAggregateOutputType | null
    _min: SalaMinAggregateOutputType | null
    _max: SalaMaxAggregateOutputType | null
  }

  export type SalaAvgAggregateOutputType = {
    capacidade: number | null
    qtdpcs: number | null
  }

  export type SalaSumAggregateOutputType = {
    capacidade: number | null
    qtdpcs: number | null
  }

  export type SalaMinAggregateOutputType = {
    id: string | null
    nome: string | null
    capacidade: number | null
    qtdpcs: number | null
  }

  export type SalaMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    capacidade: number | null
    qtdpcs: number | null
  }

  export type SalaCountAggregateOutputType = {
    id: number
    nome: number
    capacidade: number
    qtdpcs: number
    _all: number
  }


  export type SalaAvgAggregateInputType = {
    capacidade?: true
    qtdpcs?: true
  }

  export type SalaSumAggregateInputType = {
    capacidade?: true
    qtdpcs?: true
  }

  export type SalaMinAggregateInputType = {
    id?: true
    nome?: true
    capacidade?: true
    qtdpcs?: true
  }

  export type SalaMaxAggregateInputType = {
    id?: true
    nome?: true
    capacidade?: true
    qtdpcs?: true
  }

  export type SalaCountAggregateInputType = {
    id?: true
    nome?: true
    capacidade?: true
    qtdpcs?: true
    _all?: true
  }

  export type SalaAggregateArgs = {
    /**
     * Filter which Sala to aggregate.
     */
    where?: SalaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Salas to fetch.
     */
    orderBy?: Enumerable<SalaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SalaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Salas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Salas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Salas
    **/
    _count?: true | SalaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SalaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SalaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SalaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SalaMaxAggregateInputType
  }

  export type GetSalaAggregateType<T extends SalaAggregateArgs> = {
        [P in keyof T & keyof AggregateSala]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSala[P]>
      : GetScalarType<T[P], AggregateSala[P]>
  }




  export type SalaGroupByArgs = {
    where?: SalaWhereInput
    orderBy?: Enumerable<SalaOrderByWithAggregationInput>
    by: SalaScalarFieldEnum[]
    having?: SalaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SalaCountAggregateInputType | true
    _avg?: SalaAvgAggregateInputType
    _sum?: SalaSumAggregateInputType
    _min?: SalaMinAggregateInputType
    _max?: SalaMaxAggregateInputType
  }


  export type SalaGroupByOutputType = {
    id: string
    nome: string
    capacidade: number
    qtdpcs: number
    _count: SalaCountAggregateOutputType | null
    _avg: SalaAvgAggregateOutputType | null
    _sum: SalaSumAggregateOutputType | null
    _min: SalaMinAggregateOutputType | null
    _max: SalaMaxAggregateOutputType | null
  }

  type GetSalaGroupByPayload<T extends SalaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SalaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SalaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SalaGroupByOutputType[P]>
            : GetScalarType<T[P], SalaGroupByOutputType[P]>
        }
      >
    >


  export type SalaSelect = {
    id?: boolean
    nome?: boolean
    capacidade?: boolean
    qtdpcs?: boolean
  }


  export type SalaGetPayload<S extends boolean | null | undefined | SalaArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Sala :
    S extends undefined ? never :
    S extends { include: any } & (SalaArgs | SalaFindManyArgs)
    ? Sala 
    : S extends { select: any } & (SalaArgs | SalaFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Sala ? Sala[P] : never
  } 
      : Sala


  type SalaCountArgs = 
    Omit<SalaFindManyArgs, 'select' | 'include'> & {
      select?: SalaCountAggregateInputType | true
    }

  export interface SalaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Sala that matches the filter.
     * @param {SalaFindUniqueArgs} args - Arguments to find a Sala
     * @example
     * // Get one Sala
     * const sala = await prisma.sala.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SalaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SalaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Sala'> extends True ? Prisma__SalaClient<SalaGetPayload<T>> : Prisma__SalaClient<SalaGetPayload<T> | null, null>

    /**
     * Find one Sala that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SalaFindUniqueOrThrowArgs} args - Arguments to find a Sala
     * @example
     * // Get one Sala
     * const sala = await prisma.sala.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SalaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SalaFindUniqueOrThrowArgs>
    ): Prisma__SalaClient<SalaGetPayload<T>>

    /**
     * Find the first Sala that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaFindFirstArgs} args - Arguments to find a Sala
     * @example
     * // Get one Sala
     * const sala = await prisma.sala.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SalaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SalaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Sala'> extends True ? Prisma__SalaClient<SalaGetPayload<T>> : Prisma__SalaClient<SalaGetPayload<T> | null, null>

    /**
     * Find the first Sala that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaFindFirstOrThrowArgs} args - Arguments to find a Sala
     * @example
     * // Get one Sala
     * const sala = await prisma.sala.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SalaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SalaFindFirstOrThrowArgs>
    ): Prisma__SalaClient<SalaGetPayload<T>>

    /**
     * Find zero or more Salas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Salas
     * const salas = await prisma.sala.findMany()
     * 
     * // Get first 10 Salas
     * const salas = await prisma.sala.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const salaWithIdOnly = await prisma.sala.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SalaFindManyArgs>(
      args?: SelectSubset<T, SalaFindManyArgs>
    ): Prisma.PrismaPromise<Array<SalaGetPayload<T>>>

    /**
     * Create a Sala.
     * @param {SalaCreateArgs} args - Arguments to create a Sala.
     * @example
     * // Create one Sala
     * const Sala = await prisma.sala.create({
     *   data: {
     *     // ... data to create a Sala
     *   }
     * })
     * 
    **/
    create<T extends SalaCreateArgs>(
      args: SelectSubset<T, SalaCreateArgs>
    ): Prisma__SalaClient<SalaGetPayload<T>>

    /**
     * Create many Salas.
     *     @param {SalaCreateManyArgs} args - Arguments to create many Salas.
     *     @example
     *     // Create many Salas
     *     const sala = await prisma.sala.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SalaCreateManyArgs>(
      args?: SelectSubset<T, SalaCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sala.
     * @param {SalaDeleteArgs} args - Arguments to delete one Sala.
     * @example
     * // Delete one Sala
     * const Sala = await prisma.sala.delete({
     *   where: {
     *     // ... filter to delete one Sala
     *   }
     * })
     * 
    **/
    delete<T extends SalaDeleteArgs>(
      args: SelectSubset<T, SalaDeleteArgs>
    ): Prisma__SalaClient<SalaGetPayload<T>>

    /**
     * Update one Sala.
     * @param {SalaUpdateArgs} args - Arguments to update one Sala.
     * @example
     * // Update one Sala
     * const sala = await prisma.sala.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SalaUpdateArgs>(
      args: SelectSubset<T, SalaUpdateArgs>
    ): Prisma__SalaClient<SalaGetPayload<T>>

    /**
     * Delete zero or more Salas.
     * @param {SalaDeleteManyArgs} args - Arguments to filter Salas to delete.
     * @example
     * // Delete a few Salas
     * const { count } = await prisma.sala.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SalaDeleteManyArgs>(
      args?: SelectSubset<T, SalaDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Salas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Salas
     * const sala = await prisma.sala.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SalaUpdateManyArgs>(
      args: SelectSubset<T, SalaUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sala.
     * @param {SalaUpsertArgs} args - Arguments to update or create a Sala.
     * @example
     * // Update or create a Sala
     * const sala = await prisma.sala.upsert({
     *   create: {
     *     // ... data to create a Sala
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sala we want to update
     *   }
     * })
    **/
    upsert<T extends SalaUpsertArgs>(
      args: SelectSubset<T, SalaUpsertArgs>
    ): Prisma__SalaClient<SalaGetPayload<T>>

    /**
     * Count the number of Salas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaCountArgs} args - Arguments to filter Salas to count.
     * @example
     * // Count the number of Salas
     * const count = await prisma.sala.count({
     *   where: {
     *     // ... the filter for the Salas we want to count
     *   }
     * })
    **/
    count<T extends SalaCountArgs>(
      args?: Subset<T, SalaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SalaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sala.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SalaAggregateArgs>(args: Subset<T, SalaAggregateArgs>): Prisma.PrismaPromise<GetSalaAggregateType<T>>

    /**
     * Group by Sala.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SalaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SalaGroupByArgs['orderBy'] }
        : { orderBy?: SalaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SalaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSalaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Sala.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SalaClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Sala base type for findUnique actions
   */
  export type SalaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Sala
     */
    select?: SalaSelect | null
    /**
     * Filter, which Sala to fetch.
     */
    where: SalaWhereUniqueInput
  }

  /**
   * Sala findUnique
   */
  export interface SalaFindUniqueArgs extends SalaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Sala findUniqueOrThrow
   */
  export type SalaFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Sala
     */
    select?: SalaSelect | null
    /**
     * Filter, which Sala to fetch.
     */
    where: SalaWhereUniqueInput
  }


  /**
   * Sala base type for findFirst actions
   */
  export type SalaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Sala
     */
    select?: SalaSelect | null
    /**
     * Filter, which Sala to fetch.
     */
    where?: SalaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Salas to fetch.
     */
    orderBy?: Enumerable<SalaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Salas.
     */
    cursor?: SalaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Salas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Salas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Salas.
     */
    distinct?: Enumerable<SalaScalarFieldEnum>
  }

  /**
   * Sala findFirst
   */
  export interface SalaFindFirstArgs extends SalaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Sala findFirstOrThrow
   */
  export type SalaFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Sala
     */
    select?: SalaSelect | null
    /**
     * Filter, which Sala to fetch.
     */
    where?: SalaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Salas to fetch.
     */
    orderBy?: Enumerable<SalaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Salas.
     */
    cursor?: SalaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Salas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Salas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Salas.
     */
    distinct?: Enumerable<SalaScalarFieldEnum>
  }


  /**
   * Sala findMany
   */
  export type SalaFindManyArgs = {
    /**
     * Select specific fields to fetch from the Sala
     */
    select?: SalaSelect | null
    /**
     * Filter, which Salas to fetch.
     */
    where?: SalaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Salas to fetch.
     */
    orderBy?: Enumerable<SalaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Salas.
     */
    cursor?: SalaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Salas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Salas.
     */
    skip?: number
    distinct?: Enumerable<SalaScalarFieldEnum>
  }


  /**
   * Sala create
   */
  export type SalaCreateArgs = {
    /**
     * Select specific fields to fetch from the Sala
     */
    select?: SalaSelect | null
    /**
     * The data needed to create a Sala.
     */
    data: XOR<SalaCreateInput, SalaUncheckedCreateInput>
  }


  /**
   * Sala createMany
   */
  export type SalaCreateManyArgs = {
    /**
     * The data used to create many Salas.
     */
    data: Enumerable<SalaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Sala update
   */
  export type SalaUpdateArgs = {
    /**
     * Select specific fields to fetch from the Sala
     */
    select?: SalaSelect | null
    /**
     * The data needed to update a Sala.
     */
    data: XOR<SalaUpdateInput, SalaUncheckedUpdateInput>
    /**
     * Choose, which Sala to update.
     */
    where: SalaWhereUniqueInput
  }


  /**
   * Sala updateMany
   */
  export type SalaUpdateManyArgs = {
    /**
     * The data used to update Salas.
     */
    data: XOR<SalaUpdateManyMutationInput, SalaUncheckedUpdateManyInput>
    /**
     * Filter which Salas to update
     */
    where?: SalaWhereInput
  }


  /**
   * Sala upsert
   */
  export type SalaUpsertArgs = {
    /**
     * Select specific fields to fetch from the Sala
     */
    select?: SalaSelect | null
    /**
     * The filter to search for the Sala to update in case it exists.
     */
    where: SalaWhereUniqueInput
    /**
     * In case the Sala found by the `where` argument doesn't exist, create a new Sala with this data.
     */
    create: XOR<SalaCreateInput, SalaUncheckedCreateInput>
    /**
     * In case the Sala was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SalaUpdateInput, SalaUncheckedUpdateInput>
  }


  /**
   * Sala delete
   */
  export type SalaDeleteArgs = {
    /**
     * Select specific fields to fetch from the Sala
     */
    select?: SalaSelect | null
    /**
     * Filter which Sala to delete.
     */
    where: SalaWhereUniqueInput
  }


  /**
   * Sala deleteMany
   */
  export type SalaDeleteManyArgs = {
    /**
     * Filter which Salas to delete
     */
    where?: SalaWhereInput
  }


  /**
   * Sala without action
   */
  export type SalaArgs = {
    /**
     * Select specific fields to fetch from the Sala
     */
    select?: SalaSelect | null
  }



  /**
   * Enums
   */

  export const CursoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    turno: 'turno',
    agrupamento: 'agrupamento'
  };

  export type CursoScalarFieldEnum = (typeof CursoScalarFieldEnum)[keyof typeof CursoScalarFieldEnum]


  export const DisciplinaScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    periodo: 'periodo',
    qtaulas: 'qtaulas',
    professor_id: 'professor_id',
    curso_id: 'curso_id'
  };

  export type DisciplinaScalarFieldEnum = (typeof DisciplinaScalarFieldEnum)[keyof typeof DisciplinaScalarFieldEnum]


  export const ProfessorScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email'
  };

  export type ProfessorScalarFieldEnum = (typeof ProfessorScalarFieldEnum)[keyof typeof ProfessorScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const RestricaoScalarFieldEnum: {
    id: 'id',
    professor_id: 'professor_id',
    dia: 'dia',
    periodo: 'periodo'
  };

  export type RestricaoScalarFieldEnum = (typeof RestricaoScalarFieldEnum)[keyof typeof RestricaoScalarFieldEnum]


  export const SalaScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    capacidade: 'capacidade',
    qtdpcs: 'qtdpcs'
  };

  export type SalaScalarFieldEnum = (typeof SalaScalarFieldEnum)[keyof typeof SalaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TurmaScalarFieldEnum: {
    id: 'id',
    periodo: 'periodo',
    qtalunos: 'qtalunos',
    curso_id: 'curso_id'
  };

  export type TurmaScalarFieldEnum = (typeof TurmaScalarFieldEnum)[keyof typeof TurmaScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type CursoWhereInput = {
    AND?: Enumerable<CursoWhereInput>
    OR?: Enumerable<CursoWhereInput>
    NOT?: Enumerable<CursoWhereInput>
    id?: StringFilter | string
    nome?: StringFilter | string
    turno?: StringFilter | string
    agrupamento?: IntFilter | number
    disciplina?: DisciplinaListRelationFilter
    turma?: TurmaListRelationFilter
  }

  export type CursoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    turno?: SortOrder
    agrupamento?: SortOrder
    disciplina?: DisciplinaOrderByRelationAggregateInput
    turma?: TurmaOrderByRelationAggregateInput
  }

  export type CursoWhereUniqueInput = {
    id?: string
  }

  export type CursoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    turno?: SortOrder
    agrupamento?: SortOrder
    _count?: CursoCountOrderByAggregateInput
    _avg?: CursoAvgOrderByAggregateInput
    _max?: CursoMaxOrderByAggregateInput
    _min?: CursoMinOrderByAggregateInput
    _sum?: CursoSumOrderByAggregateInput
  }

  export type CursoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CursoScalarWhereWithAggregatesInput>
    OR?: Enumerable<CursoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CursoScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nome?: StringWithAggregatesFilter | string
    turno?: StringWithAggregatesFilter | string
    agrupamento?: IntWithAggregatesFilter | number
  }

  export type DisciplinaWhereInput = {
    AND?: Enumerable<DisciplinaWhereInput>
    OR?: Enumerable<DisciplinaWhereInput>
    NOT?: Enumerable<DisciplinaWhereInput>
    id?: StringFilter | string
    nome?: StringFilter | string
    periodo?: IntFilter | number
    qtaulas?: IntFilter | number
    professor_id?: StringFilter | string
    curso_id?: StringFilter | string
    professor?: XOR<ProfessorRelationFilter, ProfessorWhereInput>
    curso?: XOR<CursoRelationFilter, CursoWhereInput>
  }

  export type DisciplinaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    periodo?: SortOrder
    qtaulas?: SortOrder
    professor_id?: SortOrder
    curso_id?: SortOrder
    professor?: ProfessorOrderByWithRelationInput
    curso?: CursoOrderByWithRelationInput
  }

  export type DisciplinaWhereUniqueInput = {
    id?: string
  }

  export type DisciplinaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    periodo?: SortOrder
    qtaulas?: SortOrder
    professor_id?: SortOrder
    curso_id?: SortOrder
    _count?: DisciplinaCountOrderByAggregateInput
    _avg?: DisciplinaAvgOrderByAggregateInput
    _max?: DisciplinaMaxOrderByAggregateInput
    _min?: DisciplinaMinOrderByAggregateInput
    _sum?: DisciplinaSumOrderByAggregateInput
  }

  export type DisciplinaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DisciplinaScalarWhereWithAggregatesInput>
    OR?: Enumerable<DisciplinaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DisciplinaScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nome?: StringWithAggregatesFilter | string
    periodo?: IntWithAggregatesFilter | number
    qtaulas?: IntWithAggregatesFilter | number
    professor_id?: StringWithAggregatesFilter | string
    curso_id?: StringWithAggregatesFilter | string
  }

  export type ProfessorWhereInput = {
    AND?: Enumerable<ProfessorWhereInput>
    OR?: Enumerable<ProfessorWhereInput>
    NOT?: Enumerable<ProfessorWhereInput>
    id?: StringFilter | string
    nome?: StringFilter | string
    email?: StringFilter | string
    restricao?: RestricaoListRelationFilter
    disciplina?: DisciplinaListRelationFilter
  }

  export type ProfessorOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    restricao?: RestricaoOrderByRelationAggregateInput
    disciplina?: DisciplinaOrderByRelationAggregateInput
  }

  export type ProfessorWhereUniqueInput = {
    id?: string
  }

  export type ProfessorOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    _count?: ProfessorCountOrderByAggregateInput
    _max?: ProfessorMaxOrderByAggregateInput
    _min?: ProfessorMinOrderByAggregateInput
  }

  export type ProfessorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProfessorScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProfessorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProfessorScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nome?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
  }

  export type RestricaoWhereInput = {
    AND?: Enumerable<RestricaoWhereInput>
    OR?: Enumerable<RestricaoWhereInput>
    NOT?: Enumerable<RestricaoWhereInput>
    id?: StringFilter | string
    professor_id?: StringFilter | string
    dia?: IntFilter | number
    periodo?: StringFilter | string
    professor?: XOR<ProfessorRelationFilter, ProfessorWhereInput>
  }

  export type RestricaoOrderByWithRelationInput = {
    id?: SortOrder
    professor_id?: SortOrder
    dia?: SortOrder
    periodo?: SortOrder
    professor?: ProfessorOrderByWithRelationInput
  }

  export type RestricaoWhereUniqueInput = {
    id?: string
  }

  export type RestricaoOrderByWithAggregationInput = {
    id?: SortOrder
    professor_id?: SortOrder
    dia?: SortOrder
    periodo?: SortOrder
    _count?: RestricaoCountOrderByAggregateInput
    _avg?: RestricaoAvgOrderByAggregateInput
    _max?: RestricaoMaxOrderByAggregateInput
    _min?: RestricaoMinOrderByAggregateInput
    _sum?: RestricaoSumOrderByAggregateInput
  }

  export type RestricaoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RestricaoScalarWhereWithAggregatesInput>
    OR?: Enumerable<RestricaoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RestricaoScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    professor_id?: StringWithAggregatesFilter | string
    dia?: IntWithAggregatesFilter | number
    periodo?: StringWithAggregatesFilter | string
  }

  export type TurmaWhereInput = {
    AND?: Enumerable<TurmaWhereInput>
    OR?: Enumerable<TurmaWhereInput>
    NOT?: Enumerable<TurmaWhereInput>
    id?: StringFilter | string
    periodo?: IntFilter | number
    qtalunos?: IntFilter | number
    curso_id?: StringFilter | string
    curso?: XOR<CursoRelationFilter, CursoWhereInput>
  }

  export type TurmaOrderByWithRelationInput = {
    id?: SortOrder
    periodo?: SortOrder
    qtalunos?: SortOrder
    curso_id?: SortOrder
    curso?: CursoOrderByWithRelationInput
  }

  export type TurmaWhereUniqueInput = {
    id?: string
  }

  export type TurmaOrderByWithAggregationInput = {
    id?: SortOrder
    periodo?: SortOrder
    qtalunos?: SortOrder
    curso_id?: SortOrder
    _count?: TurmaCountOrderByAggregateInput
    _avg?: TurmaAvgOrderByAggregateInput
    _max?: TurmaMaxOrderByAggregateInput
    _min?: TurmaMinOrderByAggregateInput
    _sum?: TurmaSumOrderByAggregateInput
  }

  export type TurmaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TurmaScalarWhereWithAggregatesInput>
    OR?: Enumerable<TurmaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TurmaScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    periodo?: IntWithAggregatesFilter | number
    qtalunos?: IntWithAggregatesFilter | number
    curso_id?: StringWithAggregatesFilter | string
  }

  export type SalaWhereInput = {
    AND?: Enumerable<SalaWhereInput>
    OR?: Enumerable<SalaWhereInput>
    NOT?: Enumerable<SalaWhereInput>
    id?: StringFilter | string
    nome?: StringFilter | string
    capacidade?: IntFilter | number
    qtdpcs?: IntFilter | number
  }

  export type SalaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    capacidade?: SortOrder
    qtdpcs?: SortOrder
  }

  export type SalaWhereUniqueInput = {
    id?: string
  }

  export type SalaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    capacidade?: SortOrder
    qtdpcs?: SortOrder
    _count?: SalaCountOrderByAggregateInput
    _avg?: SalaAvgOrderByAggregateInput
    _max?: SalaMaxOrderByAggregateInput
    _min?: SalaMinOrderByAggregateInput
    _sum?: SalaSumOrderByAggregateInput
  }

  export type SalaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SalaScalarWhereWithAggregatesInput>
    OR?: Enumerable<SalaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SalaScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nome?: StringWithAggregatesFilter | string
    capacidade?: IntWithAggregatesFilter | number
    qtdpcs?: IntWithAggregatesFilter | number
  }

  export type CursoCreateInput = {
    id?: string
    nome: string
    turno: string
    agrupamento: number
    disciplina?: DisciplinaCreateNestedManyWithoutCursoInput
    turma?: TurmaCreateNestedManyWithoutCursoInput
  }

  export type CursoUncheckedCreateInput = {
    id?: string
    nome: string
    turno: string
    agrupamento: number
    disciplina?: DisciplinaUncheckedCreateNestedManyWithoutCursoInput
    turma?: TurmaUncheckedCreateNestedManyWithoutCursoInput
  }

  export type CursoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    agrupamento?: IntFieldUpdateOperationsInput | number
    disciplina?: DisciplinaUpdateManyWithoutCursoNestedInput
    turma?: TurmaUpdateManyWithoutCursoNestedInput
  }

  export type CursoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    agrupamento?: IntFieldUpdateOperationsInput | number
    disciplina?: DisciplinaUncheckedUpdateManyWithoutCursoNestedInput
    turma?: TurmaUncheckedUpdateManyWithoutCursoNestedInput
  }

  export type CursoCreateManyInput = {
    id?: string
    nome: string
    turno: string
    agrupamento: number
  }

  export type CursoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    agrupamento?: IntFieldUpdateOperationsInput | number
  }

  export type CursoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    agrupamento?: IntFieldUpdateOperationsInput | number
  }

  export type DisciplinaCreateInput = {
    id?: string
    nome: string
    periodo: number
    qtaulas: number
    professor: ProfessorCreateNestedOneWithoutDisciplinaInput
    curso: CursoCreateNestedOneWithoutDisciplinaInput
  }

  export type DisciplinaUncheckedCreateInput = {
    id?: string
    nome: string
    periodo: number
    qtaulas: number
    professor_id: string
    curso_id: string
  }

  export type DisciplinaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    periodo?: IntFieldUpdateOperationsInput | number
    qtaulas?: IntFieldUpdateOperationsInput | number
    professor?: ProfessorUpdateOneRequiredWithoutDisciplinaNestedInput
    curso?: CursoUpdateOneRequiredWithoutDisciplinaNestedInput
  }

  export type DisciplinaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    periodo?: IntFieldUpdateOperationsInput | number
    qtaulas?: IntFieldUpdateOperationsInput | number
    professor_id?: StringFieldUpdateOperationsInput | string
    curso_id?: StringFieldUpdateOperationsInput | string
  }

  export type DisciplinaCreateManyInput = {
    id?: string
    nome: string
    periodo: number
    qtaulas: number
    professor_id: string
    curso_id: string
  }

  export type DisciplinaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    periodo?: IntFieldUpdateOperationsInput | number
    qtaulas?: IntFieldUpdateOperationsInput | number
  }

  export type DisciplinaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    periodo?: IntFieldUpdateOperationsInput | number
    qtaulas?: IntFieldUpdateOperationsInput | number
    professor_id?: StringFieldUpdateOperationsInput | string
    curso_id?: StringFieldUpdateOperationsInput | string
  }

  export type ProfessorCreateInput = {
    id?: string
    nome: string
    email: string
    restricao?: RestricaoCreateNestedManyWithoutProfessorInput
    disciplina?: DisciplinaCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUncheckedCreateInput = {
    id?: string
    nome: string
    email: string
    restricao?: RestricaoUncheckedCreateNestedManyWithoutProfessorInput
    disciplina?: DisciplinaUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    restricao?: RestricaoUpdateManyWithoutProfessorNestedInput
    disciplina?: DisciplinaUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    restricao?: RestricaoUncheckedUpdateManyWithoutProfessorNestedInput
    disciplina?: DisciplinaUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorCreateManyInput = {
    id?: string
    nome: string
    email: string
  }

  export type ProfessorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ProfessorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type RestricaoCreateInput = {
    id?: string
    dia: number
    periodo: string
    professor: ProfessorCreateNestedOneWithoutRestricaoInput
  }

  export type RestricaoUncheckedCreateInput = {
    id?: string
    professor_id: string
    dia: number
    periodo: string
  }

  export type RestricaoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dia?: IntFieldUpdateOperationsInput | number
    periodo?: StringFieldUpdateOperationsInput | string
    professor?: ProfessorUpdateOneRequiredWithoutRestricaoNestedInput
  }

  export type RestricaoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    professor_id?: StringFieldUpdateOperationsInput | string
    dia?: IntFieldUpdateOperationsInput | number
    periodo?: StringFieldUpdateOperationsInput | string
  }

  export type RestricaoCreateManyInput = {
    id?: string
    professor_id: string
    dia: number
    periodo: string
  }

  export type RestricaoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dia?: IntFieldUpdateOperationsInput | number
    periodo?: StringFieldUpdateOperationsInput | string
  }

  export type RestricaoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    professor_id?: StringFieldUpdateOperationsInput | string
    dia?: IntFieldUpdateOperationsInput | number
    periodo?: StringFieldUpdateOperationsInput | string
  }

  export type TurmaCreateInput = {
    id?: string
    periodo: number
    qtalunos: number
    curso: CursoCreateNestedOneWithoutTurmaInput
  }

  export type TurmaUncheckedCreateInput = {
    id?: string
    periodo: number
    qtalunos: number
    curso_id: string
  }

  export type TurmaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodo?: IntFieldUpdateOperationsInput | number
    qtalunos?: IntFieldUpdateOperationsInput | number
    curso?: CursoUpdateOneRequiredWithoutTurmaNestedInput
  }

  export type TurmaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodo?: IntFieldUpdateOperationsInput | number
    qtalunos?: IntFieldUpdateOperationsInput | number
    curso_id?: StringFieldUpdateOperationsInput | string
  }

  export type TurmaCreateManyInput = {
    id?: string
    periodo: number
    qtalunos: number
    curso_id: string
  }

  export type TurmaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodo?: IntFieldUpdateOperationsInput | number
    qtalunos?: IntFieldUpdateOperationsInput | number
  }

  export type TurmaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodo?: IntFieldUpdateOperationsInput | number
    qtalunos?: IntFieldUpdateOperationsInput | number
    curso_id?: StringFieldUpdateOperationsInput | string
  }

  export type SalaCreateInput = {
    id?: string
    nome: string
    capacidade: number
    qtdpcs: number
  }

  export type SalaUncheckedCreateInput = {
    id?: string
    nome: string
    capacidade: number
    qtdpcs: number
  }

  export type SalaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    capacidade?: IntFieldUpdateOperationsInput | number
    qtdpcs?: IntFieldUpdateOperationsInput | number
  }

  export type SalaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    capacidade?: IntFieldUpdateOperationsInput | number
    qtdpcs?: IntFieldUpdateOperationsInput | number
  }

  export type SalaCreateManyInput = {
    id?: string
    nome: string
    capacidade: number
    qtdpcs: number
  }

  export type SalaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    capacidade?: IntFieldUpdateOperationsInput | number
    qtdpcs?: IntFieldUpdateOperationsInput | number
  }

  export type SalaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    capacidade?: IntFieldUpdateOperationsInput | number
    qtdpcs?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DisciplinaListRelationFilter = {
    every?: DisciplinaWhereInput
    some?: DisciplinaWhereInput
    none?: DisciplinaWhereInput
  }

  export type TurmaListRelationFilter = {
    every?: TurmaWhereInput
    some?: TurmaWhereInput
    none?: TurmaWhereInput
  }

  export type DisciplinaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TurmaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CursoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    turno?: SortOrder
    agrupamento?: SortOrder
  }

  export type CursoAvgOrderByAggregateInput = {
    agrupamento?: SortOrder
  }

  export type CursoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    turno?: SortOrder
    agrupamento?: SortOrder
  }

  export type CursoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    turno?: SortOrder
    agrupamento?: SortOrder
  }

  export type CursoSumOrderByAggregateInput = {
    agrupamento?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type ProfessorRelationFilter = {
    is?: ProfessorWhereInput
    isNot?: ProfessorWhereInput
  }

  export type CursoRelationFilter = {
    is?: CursoWhereInput
    isNot?: CursoWhereInput
  }

  export type DisciplinaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    periodo?: SortOrder
    qtaulas?: SortOrder
    professor_id?: SortOrder
    curso_id?: SortOrder
  }

  export type DisciplinaAvgOrderByAggregateInput = {
    periodo?: SortOrder
    qtaulas?: SortOrder
  }

  export type DisciplinaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    periodo?: SortOrder
    qtaulas?: SortOrder
    professor_id?: SortOrder
    curso_id?: SortOrder
  }

  export type DisciplinaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    periodo?: SortOrder
    qtaulas?: SortOrder
    professor_id?: SortOrder
    curso_id?: SortOrder
  }

  export type DisciplinaSumOrderByAggregateInput = {
    periodo?: SortOrder
    qtaulas?: SortOrder
  }

  export type RestricaoListRelationFilter = {
    every?: RestricaoWhereInput
    some?: RestricaoWhereInput
    none?: RestricaoWhereInput
  }

  export type RestricaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfessorCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
  }

  export type ProfessorMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
  }

  export type ProfessorMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
  }

  export type RestricaoCountOrderByAggregateInput = {
    id?: SortOrder
    professor_id?: SortOrder
    dia?: SortOrder
    periodo?: SortOrder
  }

  export type RestricaoAvgOrderByAggregateInput = {
    dia?: SortOrder
  }

  export type RestricaoMaxOrderByAggregateInput = {
    id?: SortOrder
    professor_id?: SortOrder
    dia?: SortOrder
    periodo?: SortOrder
  }

  export type RestricaoMinOrderByAggregateInput = {
    id?: SortOrder
    professor_id?: SortOrder
    dia?: SortOrder
    periodo?: SortOrder
  }

  export type RestricaoSumOrderByAggregateInput = {
    dia?: SortOrder
  }

  export type TurmaCountOrderByAggregateInput = {
    id?: SortOrder
    periodo?: SortOrder
    qtalunos?: SortOrder
    curso_id?: SortOrder
  }

  export type TurmaAvgOrderByAggregateInput = {
    periodo?: SortOrder
    qtalunos?: SortOrder
  }

  export type TurmaMaxOrderByAggregateInput = {
    id?: SortOrder
    periodo?: SortOrder
    qtalunos?: SortOrder
    curso_id?: SortOrder
  }

  export type TurmaMinOrderByAggregateInput = {
    id?: SortOrder
    periodo?: SortOrder
    qtalunos?: SortOrder
    curso_id?: SortOrder
  }

  export type TurmaSumOrderByAggregateInput = {
    periodo?: SortOrder
    qtalunos?: SortOrder
  }

  export type SalaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    capacidade?: SortOrder
    qtdpcs?: SortOrder
  }

  export type SalaAvgOrderByAggregateInput = {
    capacidade?: SortOrder
    qtdpcs?: SortOrder
  }

  export type SalaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    capacidade?: SortOrder
    qtdpcs?: SortOrder
  }

  export type SalaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    capacidade?: SortOrder
    qtdpcs?: SortOrder
  }

  export type SalaSumOrderByAggregateInput = {
    capacidade?: SortOrder
    qtdpcs?: SortOrder
  }

  export type DisciplinaCreateNestedManyWithoutCursoInput = {
    create?: XOR<Enumerable<DisciplinaCreateWithoutCursoInput>, Enumerable<DisciplinaUncheckedCreateWithoutCursoInput>>
    connectOrCreate?: Enumerable<DisciplinaCreateOrConnectWithoutCursoInput>
    createMany?: DisciplinaCreateManyCursoInputEnvelope
    connect?: Enumerable<DisciplinaWhereUniqueInput>
  }

  export type TurmaCreateNestedManyWithoutCursoInput = {
    create?: XOR<Enumerable<TurmaCreateWithoutCursoInput>, Enumerable<TurmaUncheckedCreateWithoutCursoInput>>
    connectOrCreate?: Enumerable<TurmaCreateOrConnectWithoutCursoInput>
    createMany?: TurmaCreateManyCursoInputEnvelope
    connect?: Enumerable<TurmaWhereUniqueInput>
  }

  export type DisciplinaUncheckedCreateNestedManyWithoutCursoInput = {
    create?: XOR<Enumerable<DisciplinaCreateWithoutCursoInput>, Enumerable<DisciplinaUncheckedCreateWithoutCursoInput>>
    connectOrCreate?: Enumerable<DisciplinaCreateOrConnectWithoutCursoInput>
    createMany?: DisciplinaCreateManyCursoInputEnvelope
    connect?: Enumerable<DisciplinaWhereUniqueInput>
  }

  export type TurmaUncheckedCreateNestedManyWithoutCursoInput = {
    create?: XOR<Enumerable<TurmaCreateWithoutCursoInput>, Enumerable<TurmaUncheckedCreateWithoutCursoInput>>
    connectOrCreate?: Enumerable<TurmaCreateOrConnectWithoutCursoInput>
    createMany?: TurmaCreateManyCursoInputEnvelope
    connect?: Enumerable<TurmaWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DisciplinaUpdateManyWithoutCursoNestedInput = {
    create?: XOR<Enumerable<DisciplinaCreateWithoutCursoInput>, Enumerable<DisciplinaUncheckedCreateWithoutCursoInput>>
    connectOrCreate?: Enumerable<DisciplinaCreateOrConnectWithoutCursoInput>
    upsert?: Enumerable<DisciplinaUpsertWithWhereUniqueWithoutCursoInput>
    createMany?: DisciplinaCreateManyCursoInputEnvelope
    set?: Enumerable<DisciplinaWhereUniqueInput>
    disconnect?: Enumerable<DisciplinaWhereUniqueInput>
    delete?: Enumerable<DisciplinaWhereUniqueInput>
    connect?: Enumerable<DisciplinaWhereUniqueInput>
    update?: Enumerable<DisciplinaUpdateWithWhereUniqueWithoutCursoInput>
    updateMany?: Enumerable<DisciplinaUpdateManyWithWhereWithoutCursoInput>
    deleteMany?: Enumerable<DisciplinaScalarWhereInput>
  }

  export type TurmaUpdateManyWithoutCursoNestedInput = {
    create?: XOR<Enumerable<TurmaCreateWithoutCursoInput>, Enumerable<TurmaUncheckedCreateWithoutCursoInput>>
    connectOrCreate?: Enumerable<TurmaCreateOrConnectWithoutCursoInput>
    upsert?: Enumerable<TurmaUpsertWithWhereUniqueWithoutCursoInput>
    createMany?: TurmaCreateManyCursoInputEnvelope
    set?: Enumerable<TurmaWhereUniqueInput>
    disconnect?: Enumerable<TurmaWhereUniqueInput>
    delete?: Enumerable<TurmaWhereUniqueInput>
    connect?: Enumerable<TurmaWhereUniqueInput>
    update?: Enumerable<TurmaUpdateWithWhereUniqueWithoutCursoInput>
    updateMany?: Enumerable<TurmaUpdateManyWithWhereWithoutCursoInput>
    deleteMany?: Enumerable<TurmaScalarWhereInput>
  }

  export type DisciplinaUncheckedUpdateManyWithoutCursoNestedInput = {
    create?: XOR<Enumerable<DisciplinaCreateWithoutCursoInput>, Enumerable<DisciplinaUncheckedCreateWithoutCursoInput>>
    connectOrCreate?: Enumerable<DisciplinaCreateOrConnectWithoutCursoInput>
    upsert?: Enumerable<DisciplinaUpsertWithWhereUniqueWithoutCursoInput>
    createMany?: DisciplinaCreateManyCursoInputEnvelope
    set?: Enumerable<DisciplinaWhereUniqueInput>
    disconnect?: Enumerable<DisciplinaWhereUniqueInput>
    delete?: Enumerable<DisciplinaWhereUniqueInput>
    connect?: Enumerable<DisciplinaWhereUniqueInput>
    update?: Enumerable<DisciplinaUpdateWithWhereUniqueWithoutCursoInput>
    updateMany?: Enumerable<DisciplinaUpdateManyWithWhereWithoutCursoInput>
    deleteMany?: Enumerable<DisciplinaScalarWhereInput>
  }

  export type TurmaUncheckedUpdateManyWithoutCursoNestedInput = {
    create?: XOR<Enumerable<TurmaCreateWithoutCursoInput>, Enumerable<TurmaUncheckedCreateWithoutCursoInput>>
    connectOrCreate?: Enumerable<TurmaCreateOrConnectWithoutCursoInput>
    upsert?: Enumerable<TurmaUpsertWithWhereUniqueWithoutCursoInput>
    createMany?: TurmaCreateManyCursoInputEnvelope
    set?: Enumerable<TurmaWhereUniqueInput>
    disconnect?: Enumerable<TurmaWhereUniqueInput>
    delete?: Enumerable<TurmaWhereUniqueInput>
    connect?: Enumerable<TurmaWhereUniqueInput>
    update?: Enumerable<TurmaUpdateWithWhereUniqueWithoutCursoInput>
    updateMany?: Enumerable<TurmaUpdateManyWithWhereWithoutCursoInput>
    deleteMany?: Enumerable<TurmaScalarWhereInput>
  }

  export type ProfessorCreateNestedOneWithoutDisciplinaInput = {
    create?: XOR<ProfessorCreateWithoutDisciplinaInput, ProfessorUncheckedCreateWithoutDisciplinaInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutDisciplinaInput
    connect?: ProfessorWhereUniqueInput
  }

  export type CursoCreateNestedOneWithoutDisciplinaInput = {
    create?: XOR<CursoCreateWithoutDisciplinaInput, CursoUncheckedCreateWithoutDisciplinaInput>
    connectOrCreate?: CursoCreateOrConnectWithoutDisciplinaInput
    connect?: CursoWhereUniqueInput
  }

  export type ProfessorUpdateOneRequiredWithoutDisciplinaNestedInput = {
    create?: XOR<ProfessorCreateWithoutDisciplinaInput, ProfessorUncheckedCreateWithoutDisciplinaInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutDisciplinaInput
    upsert?: ProfessorUpsertWithoutDisciplinaInput
    connect?: ProfessorWhereUniqueInput
    update?: XOR<ProfessorUpdateWithoutDisciplinaInput, ProfessorUncheckedUpdateWithoutDisciplinaInput>
  }

  export type CursoUpdateOneRequiredWithoutDisciplinaNestedInput = {
    create?: XOR<CursoCreateWithoutDisciplinaInput, CursoUncheckedCreateWithoutDisciplinaInput>
    connectOrCreate?: CursoCreateOrConnectWithoutDisciplinaInput
    upsert?: CursoUpsertWithoutDisciplinaInput
    connect?: CursoWhereUniqueInput
    update?: XOR<CursoUpdateWithoutDisciplinaInput, CursoUncheckedUpdateWithoutDisciplinaInput>
  }

  export type RestricaoCreateNestedManyWithoutProfessorInput = {
    create?: XOR<Enumerable<RestricaoCreateWithoutProfessorInput>, Enumerable<RestricaoUncheckedCreateWithoutProfessorInput>>
    connectOrCreate?: Enumerable<RestricaoCreateOrConnectWithoutProfessorInput>
    createMany?: RestricaoCreateManyProfessorInputEnvelope
    connect?: Enumerable<RestricaoWhereUniqueInput>
  }

  export type DisciplinaCreateNestedManyWithoutProfessorInput = {
    create?: XOR<Enumerable<DisciplinaCreateWithoutProfessorInput>, Enumerable<DisciplinaUncheckedCreateWithoutProfessorInput>>
    connectOrCreate?: Enumerable<DisciplinaCreateOrConnectWithoutProfessorInput>
    createMany?: DisciplinaCreateManyProfessorInputEnvelope
    connect?: Enumerable<DisciplinaWhereUniqueInput>
  }

  export type RestricaoUncheckedCreateNestedManyWithoutProfessorInput = {
    create?: XOR<Enumerable<RestricaoCreateWithoutProfessorInput>, Enumerable<RestricaoUncheckedCreateWithoutProfessorInput>>
    connectOrCreate?: Enumerable<RestricaoCreateOrConnectWithoutProfessorInput>
    createMany?: RestricaoCreateManyProfessorInputEnvelope
    connect?: Enumerable<RestricaoWhereUniqueInput>
  }

  export type DisciplinaUncheckedCreateNestedManyWithoutProfessorInput = {
    create?: XOR<Enumerable<DisciplinaCreateWithoutProfessorInput>, Enumerable<DisciplinaUncheckedCreateWithoutProfessorInput>>
    connectOrCreate?: Enumerable<DisciplinaCreateOrConnectWithoutProfessorInput>
    createMany?: DisciplinaCreateManyProfessorInputEnvelope
    connect?: Enumerable<DisciplinaWhereUniqueInput>
  }

  export type RestricaoUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<Enumerable<RestricaoCreateWithoutProfessorInput>, Enumerable<RestricaoUncheckedCreateWithoutProfessorInput>>
    connectOrCreate?: Enumerable<RestricaoCreateOrConnectWithoutProfessorInput>
    upsert?: Enumerable<RestricaoUpsertWithWhereUniqueWithoutProfessorInput>
    createMany?: RestricaoCreateManyProfessorInputEnvelope
    set?: Enumerable<RestricaoWhereUniqueInput>
    disconnect?: Enumerable<RestricaoWhereUniqueInput>
    delete?: Enumerable<RestricaoWhereUniqueInput>
    connect?: Enumerable<RestricaoWhereUniqueInput>
    update?: Enumerable<RestricaoUpdateWithWhereUniqueWithoutProfessorInput>
    updateMany?: Enumerable<RestricaoUpdateManyWithWhereWithoutProfessorInput>
    deleteMany?: Enumerable<RestricaoScalarWhereInput>
  }

  export type DisciplinaUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<Enumerable<DisciplinaCreateWithoutProfessorInput>, Enumerable<DisciplinaUncheckedCreateWithoutProfessorInput>>
    connectOrCreate?: Enumerable<DisciplinaCreateOrConnectWithoutProfessorInput>
    upsert?: Enumerable<DisciplinaUpsertWithWhereUniqueWithoutProfessorInput>
    createMany?: DisciplinaCreateManyProfessorInputEnvelope
    set?: Enumerable<DisciplinaWhereUniqueInput>
    disconnect?: Enumerable<DisciplinaWhereUniqueInput>
    delete?: Enumerable<DisciplinaWhereUniqueInput>
    connect?: Enumerable<DisciplinaWhereUniqueInput>
    update?: Enumerable<DisciplinaUpdateWithWhereUniqueWithoutProfessorInput>
    updateMany?: Enumerable<DisciplinaUpdateManyWithWhereWithoutProfessorInput>
    deleteMany?: Enumerable<DisciplinaScalarWhereInput>
  }

  export type RestricaoUncheckedUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<Enumerable<RestricaoCreateWithoutProfessorInput>, Enumerable<RestricaoUncheckedCreateWithoutProfessorInput>>
    connectOrCreate?: Enumerable<RestricaoCreateOrConnectWithoutProfessorInput>
    upsert?: Enumerable<RestricaoUpsertWithWhereUniqueWithoutProfessorInput>
    createMany?: RestricaoCreateManyProfessorInputEnvelope
    set?: Enumerable<RestricaoWhereUniqueInput>
    disconnect?: Enumerable<RestricaoWhereUniqueInput>
    delete?: Enumerable<RestricaoWhereUniqueInput>
    connect?: Enumerable<RestricaoWhereUniqueInput>
    update?: Enumerable<RestricaoUpdateWithWhereUniqueWithoutProfessorInput>
    updateMany?: Enumerable<RestricaoUpdateManyWithWhereWithoutProfessorInput>
    deleteMany?: Enumerable<RestricaoScalarWhereInput>
  }

  export type DisciplinaUncheckedUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<Enumerable<DisciplinaCreateWithoutProfessorInput>, Enumerable<DisciplinaUncheckedCreateWithoutProfessorInput>>
    connectOrCreate?: Enumerable<DisciplinaCreateOrConnectWithoutProfessorInput>
    upsert?: Enumerable<DisciplinaUpsertWithWhereUniqueWithoutProfessorInput>
    createMany?: DisciplinaCreateManyProfessorInputEnvelope
    set?: Enumerable<DisciplinaWhereUniqueInput>
    disconnect?: Enumerable<DisciplinaWhereUniqueInput>
    delete?: Enumerable<DisciplinaWhereUniqueInput>
    connect?: Enumerable<DisciplinaWhereUniqueInput>
    update?: Enumerable<DisciplinaUpdateWithWhereUniqueWithoutProfessorInput>
    updateMany?: Enumerable<DisciplinaUpdateManyWithWhereWithoutProfessorInput>
    deleteMany?: Enumerable<DisciplinaScalarWhereInput>
  }

  export type ProfessorCreateNestedOneWithoutRestricaoInput = {
    create?: XOR<ProfessorCreateWithoutRestricaoInput, ProfessorUncheckedCreateWithoutRestricaoInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutRestricaoInput
    connect?: ProfessorWhereUniqueInput
  }

  export type ProfessorUpdateOneRequiredWithoutRestricaoNestedInput = {
    create?: XOR<ProfessorCreateWithoutRestricaoInput, ProfessorUncheckedCreateWithoutRestricaoInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutRestricaoInput
    upsert?: ProfessorUpsertWithoutRestricaoInput
    connect?: ProfessorWhereUniqueInput
    update?: XOR<ProfessorUpdateWithoutRestricaoInput, ProfessorUncheckedUpdateWithoutRestricaoInput>
  }

  export type CursoCreateNestedOneWithoutTurmaInput = {
    create?: XOR<CursoCreateWithoutTurmaInput, CursoUncheckedCreateWithoutTurmaInput>
    connectOrCreate?: CursoCreateOrConnectWithoutTurmaInput
    connect?: CursoWhereUniqueInput
  }

  export type CursoUpdateOneRequiredWithoutTurmaNestedInput = {
    create?: XOR<CursoCreateWithoutTurmaInput, CursoUncheckedCreateWithoutTurmaInput>
    connectOrCreate?: CursoCreateOrConnectWithoutTurmaInput
    upsert?: CursoUpsertWithoutTurmaInput
    connect?: CursoWhereUniqueInput
    update?: XOR<CursoUpdateWithoutTurmaInput, CursoUncheckedUpdateWithoutTurmaInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type DisciplinaCreateWithoutCursoInput = {
    id?: string
    nome: string
    periodo: number
    qtaulas: number
    professor: ProfessorCreateNestedOneWithoutDisciplinaInput
  }

  export type DisciplinaUncheckedCreateWithoutCursoInput = {
    id?: string
    nome: string
    periodo: number
    qtaulas: number
    professor_id: string
  }

  export type DisciplinaCreateOrConnectWithoutCursoInput = {
    where: DisciplinaWhereUniqueInput
    create: XOR<DisciplinaCreateWithoutCursoInput, DisciplinaUncheckedCreateWithoutCursoInput>
  }

  export type DisciplinaCreateManyCursoInputEnvelope = {
    data: Enumerable<DisciplinaCreateManyCursoInput>
    skipDuplicates?: boolean
  }

  export type TurmaCreateWithoutCursoInput = {
    id?: string
    periodo: number
    qtalunos: number
  }

  export type TurmaUncheckedCreateWithoutCursoInput = {
    id?: string
    periodo: number
    qtalunos: number
  }

  export type TurmaCreateOrConnectWithoutCursoInput = {
    where: TurmaWhereUniqueInput
    create: XOR<TurmaCreateWithoutCursoInput, TurmaUncheckedCreateWithoutCursoInput>
  }

  export type TurmaCreateManyCursoInputEnvelope = {
    data: Enumerable<TurmaCreateManyCursoInput>
    skipDuplicates?: boolean
  }

  export type DisciplinaUpsertWithWhereUniqueWithoutCursoInput = {
    where: DisciplinaWhereUniqueInput
    update: XOR<DisciplinaUpdateWithoutCursoInput, DisciplinaUncheckedUpdateWithoutCursoInput>
    create: XOR<DisciplinaCreateWithoutCursoInput, DisciplinaUncheckedCreateWithoutCursoInput>
  }

  export type DisciplinaUpdateWithWhereUniqueWithoutCursoInput = {
    where: DisciplinaWhereUniqueInput
    data: XOR<DisciplinaUpdateWithoutCursoInput, DisciplinaUncheckedUpdateWithoutCursoInput>
  }

  export type DisciplinaUpdateManyWithWhereWithoutCursoInput = {
    where: DisciplinaScalarWhereInput
    data: XOR<DisciplinaUpdateManyMutationInput, DisciplinaUncheckedUpdateManyWithoutDisciplinaInput>
  }

  export type DisciplinaScalarWhereInput = {
    AND?: Enumerable<DisciplinaScalarWhereInput>
    OR?: Enumerable<DisciplinaScalarWhereInput>
    NOT?: Enumerable<DisciplinaScalarWhereInput>
    id?: StringFilter | string
    nome?: StringFilter | string
    periodo?: IntFilter | number
    qtaulas?: IntFilter | number
    professor_id?: StringFilter | string
    curso_id?: StringFilter | string
  }

  export type TurmaUpsertWithWhereUniqueWithoutCursoInput = {
    where: TurmaWhereUniqueInput
    update: XOR<TurmaUpdateWithoutCursoInput, TurmaUncheckedUpdateWithoutCursoInput>
    create: XOR<TurmaCreateWithoutCursoInput, TurmaUncheckedCreateWithoutCursoInput>
  }

  export type TurmaUpdateWithWhereUniqueWithoutCursoInput = {
    where: TurmaWhereUniqueInput
    data: XOR<TurmaUpdateWithoutCursoInput, TurmaUncheckedUpdateWithoutCursoInput>
  }

  export type TurmaUpdateManyWithWhereWithoutCursoInput = {
    where: TurmaScalarWhereInput
    data: XOR<TurmaUpdateManyMutationInput, TurmaUncheckedUpdateManyWithoutTurmaInput>
  }

  export type TurmaScalarWhereInput = {
    AND?: Enumerable<TurmaScalarWhereInput>
    OR?: Enumerable<TurmaScalarWhereInput>
    NOT?: Enumerable<TurmaScalarWhereInput>
    id?: StringFilter | string
    periodo?: IntFilter | number
    qtalunos?: IntFilter | number
    curso_id?: StringFilter | string
  }

  export type ProfessorCreateWithoutDisciplinaInput = {
    id?: string
    nome: string
    email: string
    restricao?: RestricaoCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUncheckedCreateWithoutDisciplinaInput = {
    id?: string
    nome: string
    email: string
    restricao?: RestricaoUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorCreateOrConnectWithoutDisciplinaInput = {
    where: ProfessorWhereUniqueInput
    create: XOR<ProfessorCreateWithoutDisciplinaInput, ProfessorUncheckedCreateWithoutDisciplinaInput>
  }

  export type CursoCreateWithoutDisciplinaInput = {
    id?: string
    nome: string
    turno: string
    agrupamento: number
    turma?: TurmaCreateNestedManyWithoutCursoInput
  }

  export type CursoUncheckedCreateWithoutDisciplinaInput = {
    id?: string
    nome: string
    turno: string
    agrupamento: number
    turma?: TurmaUncheckedCreateNestedManyWithoutCursoInput
  }

  export type CursoCreateOrConnectWithoutDisciplinaInput = {
    where: CursoWhereUniqueInput
    create: XOR<CursoCreateWithoutDisciplinaInput, CursoUncheckedCreateWithoutDisciplinaInput>
  }

  export type ProfessorUpsertWithoutDisciplinaInput = {
    update: XOR<ProfessorUpdateWithoutDisciplinaInput, ProfessorUncheckedUpdateWithoutDisciplinaInput>
    create: XOR<ProfessorCreateWithoutDisciplinaInput, ProfessorUncheckedCreateWithoutDisciplinaInput>
  }

  export type ProfessorUpdateWithoutDisciplinaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    restricao?: RestricaoUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorUncheckedUpdateWithoutDisciplinaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    restricao?: RestricaoUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type CursoUpsertWithoutDisciplinaInput = {
    update: XOR<CursoUpdateWithoutDisciplinaInput, CursoUncheckedUpdateWithoutDisciplinaInput>
    create: XOR<CursoCreateWithoutDisciplinaInput, CursoUncheckedCreateWithoutDisciplinaInput>
  }

  export type CursoUpdateWithoutDisciplinaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    agrupamento?: IntFieldUpdateOperationsInput | number
    turma?: TurmaUpdateManyWithoutCursoNestedInput
  }

  export type CursoUncheckedUpdateWithoutDisciplinaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    agrupamento?: IntFieldUpdateOperationsInput | number
    turma?: TurmaUncheckedUpdateManyWithoutCursoNestedInput
  }

  export type RestricaoCreateWithoutProfessorInput = {
    id?: string
    dia: number
    periodo: string
  }

  export type RestricaoUncheckedCreateWithoutProfessorInput = {
    id?: string
    dia: number
    periodo: string
  }

  export type RestricaoCreateOrConnectWithoutProfessorInput = {
    where: RestricaoWhereUniqueInput
    create: XOR<RestricaoCreateWithoutProfessorInput, RestricaoUncheckedCreateWithoutProfessorInput>
  }

  export type RestricaoCreateManyProfessorInputEnvelope = {
    data: Enumerable<RestricaoCreateManyProfessorInput>
    skipDuplicates?: boolean
  }

  export type DisciplinaCreateWithoutProfessorInput = {
    id?: string
    nome: string
    periodo: number
    qtaulas: number
    curso: CursoCreateNestedOneWithoutDisciplinaInput
  }

  export type DisciplinaUncheckedCreateWithoutProfessorInput = {
    id?: string
    nome: string
    periodo: number
    qtaulas: number
    curso_id: string
  }

  export type DisciplinaCreateOrConnectWithoutProfessorInput = {
    where: DisciplinaWhereUniqueInput
    create: XOR<DisciplinaCreateWithoutProfessorInput, DisciplinaUncheckedCreateWithoutProfessorInput>
  }

  export type DisciplinaCreateManyProfessorInputEnvelope = {
    data: Enumerable<DisciplinaCreateManyProfessorInput>
    skipDuplicates?: boolean
  }

  export type RestricaoUpsertWithWhereUniqueWithoutProfessorInput = {
    where: RestricaoWhereUniqueInput
    update: XOR<RestricaoUpdateWithoutProfessorInput, RestricaoUncheckedUpdateWithoutProfessorInput>
    create: XOR<RestricaoCreateWithoutProfessorInput, RestricaoUncheckedCreateWithoutProfessorInput>
  }

  export type RestricaoUpdateWithWhereUniqueWithoutProfessorInput = {
    where: RestricaoWhereUniqueInput
    data: XOR<RestricaoUpdateWithoutProfessorInput, RestricaoUncheckedUpdateWithoutProfessorInput>
  }

  export type RestricaoUpdateManyWithWhereWithoutProfessorInput = {
    where: RestricaoScalarWhereInput
    data: XOR<RestricaoUpdateManyMutationInput, RestricaoUncheckedUpdateManyWithoutRestricaoInput>
  }

  export type RestricaoScalarWhereInput = {
    AND?: Enumerable<RestricaoScalarWhereInput>
    OR?: Enumerable<RestricaoScalarWhereInput>
    NOT?: Enumerable<RestricaoScalarWhereInput>
    id?: StringFilter | string
    professor_id?: StringFilter | string
    dia?: IntFilter | number
    periodo?: StringFilter | string
  }

  export type DisciplinaUpsertWithWhereUniqueWithoutProfessorInput = {
    where: DisciplinaWhereUniqueInput
    update: XOR<DisciplinaUpdateWithoutProfessorInput, DisciplinaUncheckedUpdateWithoutProfessorInput>
    create: XOR<DisciplinaCreateWithoutProfessorInput, DisciplinaUncheckedCreateWithoutProfessorInput>
  }

  export type DisciplinaUpdateWithWhereUniqueWithoutProfessorInput = {
    where: DisciplinaWhereUniqueInput
    data: XOR<DisciplinaUpdateWithoutProfessorInput, DisciplinaUncheckedUpdateWithoutProfessorInput>
  }

  export type DisciplinaUpdateManyWithWhereWithoutProfessorInput = {
    where: DisciplinaScalarWhereInput
    data: XOR<DisciplinaUpdateManyMutationInput, DisciplinaUncheckedUpdateManyWithoutDisciplinaInput>
  }

  export type ProfessorCreateWithoutRestricaoInput = {
    id?: string
    nome: string
    email: string
    disciplina?: DisciplinaCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUncheckedCreateWithoutRestricaoInput = {
    id?: string
    nome: string
    email: string
    disciplina?: DisciplinaUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorCreateOrConnectWithoutRestricaoInput = {
    where: ProfessorWhereUniqueInput
    create: XOR<ProfessorCreateWithoutRestricaoInput, ProfessorUncheckedCreateWithoutRestricaoInput>
  }

  export type ProfessorUpsertWithoutRestricaoInput = {
    update: XOR<ProfessorUpdateWithoutRestricaoInput, ProfessorUncheckedUpdateWithoutRestricaoInput>
    create: XOR<ProfessorCreateWithoutRestricaoInput, ProfessorUncheckedCreateWithoutRestricaoInput>
  }

  export type ProfessorUpdateWithoutRestricaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    disciplina?: DisciplinaUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorUncheckedUpdateWithoutRestricaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    disciplina?: DisciplinaUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type CursoCreateWithoutTurmaInput = {
    id?: string
    nome: string
    turno: string
    agrupamento: number
    disciplina?: DisciplinaCreateNestedManyWithoutCursoInput
  }

  export type CursoUncheckedCreateWithoutTurmaInput = {
    id?: string
    nome: string
    turno: string
    agrupamento: number
    disciplina?: DisciplinaUncheckedCreateNestedManyWithoutCursoInput
  }

  export type CursoCreateOrConnectWithoutTurmaInput = {
    where: CursoWhereUniqueInput
    create: XOR<CursoCreateWithoutTurmaInput, CursoUncheckedCreateWithoutTurmaInput>
  }

  export type CursoUpsertWithoutTurmaInput = {
    update: XOR<CursoUpdateWithoutTurmaInput, CursoUncheckedUpdateWithoutTurmaInput>
    create: XOR<CursoCreateWithoutTurmaInput, CursoUncheckedCreateWithoutTurmaInput>
  }

  export type CursoUpdateWithoutTurmaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    agrupamento?: IntFieldUpdateOperationsInput | number
    disciplina?: DisciplinaUpdateManyWithoutCursoNestedInput
  }

  export type CursoUncheckedUpdateWithoutTurmaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    agrupamento?: IntFieldUpdateOperationsInput | number
    disciplina?: DisciplinaUncheckedUpdateManyWithoutCursoNestedInput
  }

  export type DisciplinaCreateManyCursoInput = {
    id?: string
    nome: string
    periodo: number
    qtaulas: number
    professor_id: string
  }

  export type TurmaCreateManyCursoInput = {
    id?: string
    periodo: number
    qtalunos: number
  }

  export type DisciplinaUpdateWithoutCursoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    periodo?: IntFieldUpdateOperationsInput | number
    qtaulas?: IntFieldUpdateOperationsInput | number
    professor?: ProfessorUpdateOneRequiredWithoutDisciplinaNestedInput
  }

  export type DisciplinaUncheckedUpdateWithoutCursoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    periodo?: IntFieldUpdateOperationsInput | number
    qtaulas?: IntFieldUpdateOperationsInput | number
    professor_id?: StringFieldUpdateOperationsInput | string
  }

  export type DisciplinaUncheckedUpdateManyWithoutDisciplinaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    periodo?: IntFieldUpdateOperationsInput | number
    qtaulas?: IntFieldUpdateOperationsInput | number
    professor_id?: StringFieldUpdateOperationsInput | string
  }

  export type TurmaUpdateWithoutCursoInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodo?: IntFieldUpdateOperationsInput | number
    qtalunos?: IntFieldUpdateOperationsInput | number
  }

  export type TurmaUncheckedUpdateWithoutCursoInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodo?: IntFieldUpdateOperationsInput | number
    qtalunos?: IntFieldUpdateOperationsInput | number
  }

  export type TurmaUncheckedUpdateManyWithoutTurmaInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodo?: IntFieldUpdateOperationsInput | number
    qtalunos?: IntFieldUpdateOperationsInput | number
  }

  export type RestricaoCreateManyProfessorInput = {
    id?: string
    dia: number
    periodo: string
  }

  export type DisciplinaCreateManyProfessorInput = {
    id?: string
    nome: string
    periodo: number
    qtaulas: number
    curso_id: string
  }

  export type RestricaoUpdateWithoutProfessorInput = {
    id?: StringFieldUpdateOperationsInput | string
    dia?: IntFieldUpdateOperationsInput | number
    periodo?: StringFieldUpdateOperationsInput | string
  }

  export type RestricaoUncheckedUpdateWithoutProfessorInput = {
    id?: StringFieldUpdateOperationsInput | string
    dia?: IntFieldUpdateOperationsInput | number
    periodo?: StringFieldUpdateOperationsInput | string
  }

  export type RestricaoUncheckedUpdateManyWithoutRestricaoInput = {
    id?: StringFieldUpdateOperationsInput | string
    dia?: IntFieldUpdateOperationsInput | number
    periodo?: StringFieldUpdateOperationsInput | string
  }

  export type DisciplinaUpdateWithoutProfessorInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    periodo?: IntFieldUpdateOperationsInput | number
    qtaulas?: IntFieldUpdateOperationsInput | number
    curso?: CursoUpdateOneRequiredWithoutDisciplinaNestedInput
  }

  export type DisciplinaUncheckedUpdateWithoutProfessorInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    periodo?: IntFieldUpdateOperationsInput | number
    qtaulas?: IntFieldUpdateOperationsInput | number
    curso_id?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}