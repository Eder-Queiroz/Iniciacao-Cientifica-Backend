
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Teacher
 * 
 */
export type Teacher = {
  id: string
  name: string
  email: string
}

/**
 * Model Restriction
 * 
 */
export type Restriction = {
  id: string
  Period: string
  Day: number
  teacher_id: string
}

/**
 * Model Discipline
 * 
 */
export type Discipline = {
  id: string
  name: string
  period: number
}

/**
 * Model Course
 * 
 */
export type Course = {
  id: string
  name: string
  shift: string
  grouping: number
}

/**
 * Model Class
 * 
 */
export type Class = {
  id: string
  name: string
  pariod: number
  num_students: number
  course_id: string
}

/**
 * Model Groups
 * 
 */
export type Groups = {
  id: string
  group1: string
  group2: string
  group3: string
  group4: string
  class_id: string
}

/**
 * Model Room
 * 
 */
export type Room = {
  id: string
  name: string
  fixed: boolean
  building: string
  capacity: number
  class_id: string | null
}

/**
 * Model Classroom
 * 
 */
export type Classroom = {
  id: string
  amount: number
  duration: number
  teacher_id: string
  discipline_id: string
  room_id: string
  course_id: string
  class_id: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Teachers
 * const teachers = await prisma.teacher.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Teachers
   * const teachers = await prisma.teacher.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.teacher`: Exposes CRUD operations for the **Teacher** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teachers
    * const teachers = await prisma.teacher.findMany()
    * ```
    */
  get teacher(): Prisma.TeacherDelegate<GlobalReject>;

  /**
   * `prisma.restriction`: Exposes CRUD operations for the **Restriction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Restrictions
    * const restrictions = await prisma.restriction.findMany()
    * ```
    */
  get restriction(): Prisma.RestrictionDelegate<GlobalReject>;

  /**
   * `prisma.discipline`: Exposes CRUD operations for the **Discipline** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Disciplines
    * const disciplines = await prisma.discipline.findMany()
    * ```
    */
  get discipline(): Prisma.DisciplineDelegate<GlobalReject>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<GlobalReject>;

  /**
   * `prisma.class`: Exposes CRUD operations for the **Class** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classes
    * const classes = await prisma.class.findMany()
    * ```
    */
  get class(): Prisma.ClassDelegate<GlobalReject>;

  /**
   * `prisma.groups`: Exposes CRUD operations for the **Groups** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups
    * const groups = await prisma.groups.findMany()
    * ```
    */
  get groups(): Prisma.GroupsDelegate<GlobalReject>;

  /**
   * `prisma.room`: Exposes CRUD operations for the **Room** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rooms
    * const rooms = await prisma.room.findMany()
    * ```
    */
  get room(): Prisma.RoomDelegate<GlobalReject>;

  /**
   * `prisma.classroom`: Exposes CRUD operations for the **Classroom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classrooms
    * const classrooms = await prisma.classroom.findMany()
    * ```
    */
  get classroom(): Prisma.ClassroomDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.15.0
   * Query Engine version: 8fbc245156db7124f997f4cecdd8d1219e360944
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Teacher: 'Teacher',
    Restriction: 'Restriction',
    Discipline: 'Discipline',
    Course: 'Course',
    Class: 'Class',
    Groups: 'Groups',
    Room: 'Room',
    Classroom: 'Classroom'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TeacherCountOutputType
   */


  export type TeacherCountOutputType = {
    restrictions: number
    classrooms: number
  }

  export type TeacherCountOutputTypeSelect = {
    restrictions?: boolean
    classrooms?: boolean
  }

  export type TeacherCountOutputTypeGetPayload<S extends boolean | null | undefined | TeacherCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TeacherCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TeacherCountOutputTypeArgs)
    ? TeacherCountOutputType 
    : S extends { select: any } & (TeacherCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TeacherCountOutputType ? TeacherCountOutputType[P] : never
  } 
      : TeacherCountOutputType




  // Custom InputTypes

  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TeacherCountOutputType
     */
    select?: TeacherCountOutputTypeSelect | null
  }



  /**
   * Count Type DisciplineCountOutputType
   */


  export type DisciplineCountOutputType = {
    classrooms: number
  }

  export type DisciplineCountOutputTypeSelect = {
    classrooms?: boolean
  }

  export type DisciplineCountOutputTypeGetPayload<S extends boolean | null | undefined | DisciplineCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? DisciplineCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (DisciplineCountOutputTypeArgs)
    ? DisciplineCountOutputType 
    : S extends { select: any } & (DisciplineCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof DisciplineCountOutputType ? DisciplineCountOutputType[P] : never
  } 
      : DisciplineCountOutputType




  // Custom InputTypes

  /**
   * DisciplineCountOutputType without action
   */
  export type DisciplineCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DisciplineCountOutputType
     */
    select?: DisciplineCountOutputTypeSelect | null
  }



  /**
   * Count Type CourseCountOutputType
   */


  export type CourseCountOutputType = {
    classes: number
    classrooms: number
  }

  export type CourseCountOutputTypeSelect = {
    classes?: boolean
    classrooms?: boolean
  }

  export type CourseCountOutputTypeGetPayload<S extends boolean | null | undefined | CourseCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CourseCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CourseCountOutputTypeArgs)
    ? CourseCountOutputType 
    : S extends { select: any } & (CourseCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CourseCountOutputType ? CourseCountOutputType[P] : never
  } 
      : CourseCountOutputType




  // Custom InputTypes

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CourseCountOutputType
     */
    select?: CourseCountOutputTypeSelect | null
  }



  /**
   * Count Type ClassCountOutputType
   */


  export type ClassCountOutputType = {
    groups: number
    rooms: number
    classrooms: number
  }

  export type ClassCountOutputTypeSelect = {
    groups?: boolean
    rooms?: boolean
    classrooms?: boolean
  }

  export type ClassCountOutputTypeGetPayload<S extends boolean | null | undefined | ClassCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ClassCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ClassCountOutputTypeArgs)
    ? ClassCountOutputType 
    : S extends { select: any } & (ClassCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ClassCountOutputType ? ClassCountOutputType[P] : never
  } 
      : ClassCountOutputType




  // Custom InputTypes

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ClassCountOutputType
     */
    select?: ClassCountOutputTypeSelect | null
  }



  /**
   * Count Type RoomCountOutputType
   */


  export type RoomCountOutputType = {
    classrooms: number
  }

  export type RoomCountOutputTypeSelect = {
    classrooms?: boolean
  }

  export type RoomCountOutputTypeGetPayload<S extends boolean | null | undefined | RoomCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? RoomCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (RoomCountOutputTypeArgs)
    ? RoomCountOutputType 
    : S extends { select: any } & (RoomCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof RoomCountOutputType ? RoomCountOutputType[P] : never
  } 
      : RoomCountOutputType




  // Custom InputTypes

  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RoomCountOutputType
     */
    select?: RoomCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Teacher
   */


  export type AggregateTeacher = {
    _count: TeacherCountAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  export type TeacherMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
  }

  export type TeacherMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
  }

  export type TeacherCountAggregateOutputType = {
    id: number
    name: number
    email: number
    _all: number
  }


  export type TeacherMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
  }

  export type TeacherMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
  }

  export type TeacherCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    _all?: true
  }

  export type TeacherAggregateArgs = {
    /**
     * Filter which Teacher to aggregate.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: Enumerable<TeacherOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teachers
    **/
    _count?: true | TeacherCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeacherMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeacherMaxAggregateInputType
  }

  export type GetTeacherAggregateType<T extends TeacherAggregateArgs> = {
        [P in keyof T & keyof AggregateTeacher]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeacher[P]>
      : GetScalarType<T[P], AggregateTeacher[P]>
  }




  export type TeacherGroupByArgs = {
    where?: TeacherWhereInput
    orderBy?: Enumerable<TeacherOrderByWithAggregationInput>
    by: TeacherScalarFieldEnum[]
    having?: TeacherScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeacherCountAggregateInputType | true
    _min?: TeacherMinAggregateInputType
    _max?: TeacherMaxAggregateInputType
  }


  export type TeacherGroupByOutputType = {
    id: string
    name: string
    email: string
    _count: TeacherCountAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  type GetTeacherGroupByPayload<T extends TeacherGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TeacherGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeacherGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeacherGroupByOutputType[P]>
            : GetScalarType<T[P], TeacherGroupByOutputType[P]>
        }
      >
    >


  export type TeacherSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    restrictions?: boolean | Teacher$restrictionsArgs
    classrooms?: boolean | Teacher$classroomsArgs
    _count?: boolean | TeacherCountOutputTypeArgs
  }


  export type TeacherInclude = {
    restrictions?: boolean | Teacher$restrictionsArgs
    classrooms?: boolean | Teacher$classroomsArgs
    _count?: boolean | TeacherCountOutputTypeArgs
  }

  export type TeacherGetPayload<S extends boolean | null | undefined | TeacherArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Teacher :
    S extends undefined ? never :
    S extends { include: any } & (TeacherArgs | TeacherFindManyArgs)
    ? Teacher  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'restrictions' ? Array < RestrictionGetPayload<S['include'][P]>>  :
        P extends 'classrooms' ? Array < ClassroomGetPayload<S['include'][P]>>  :
        P extends '_count' ? TeacherCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TeacherArgs | TeacherFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'restrictions' ? Array < RestrictionGetPayload<S['select'][P]>>  :
        P extends 'classrooms' ? Array < ClassroomGetPayload<S['select'][P]>>  :
        P extends '_count' ? TeacherCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Teacher ? Teacher[P] : never
  } 
      : Teacher


  type TeacherCountArgs = 
    Omit<TeacherFindManyArgs, 'select' | 'include'> & {
      select?: TeacherCountAggregateInputType | true
    }

  export interface TeacherDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Teacher that matches the filter.
     * @param {TeacherFindUniqueArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TeacherFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TeacherFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Teacher'> extends True ? Prisma__TeacherClient<TeacherGetPayload<T>> : Prisma__TeacherClient<TeacherGetPayload<T> | null, null>

    /**
     * Find one Teacher that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TeacherFindUniqueOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TeacherFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TeacherFindUniqueOrThrowArgs>
    ): Prisma__TeacherClient<TeacherGetPayload<T>>

    /**
     * Find the first Teacher that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TeacherFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TeacherFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Teacher'> extends True ? Prisma__TeacherClient<TeacherGetPayload<T>> : Prisma__TeacherClient<TeacherGetPayload<T> | null, null>

    /**
     * Find the first Teacher that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TeacherFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TeacherFindFirstOrThrowArgs>
    ): Prisma__TeacherClient<TeacherGetPayload<T>>

    /**
     * Find zero or more Teachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teachers
     * const teachers = await prisma.teacher.findMany()
     * 
     * // Get first 10 Teachers
     * const teachers = await prisma.teacher.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teacherWithIdOnly = await prisma.teacher.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TeacherFindManyArgs>(
      args?: SelectSubset<T, TeacherFindManyArgs>
    ): Prisma.PrismaPromise<Array<TeacherGetPayload<T>>>

    /**
     * Create a Teacher.
     * @param {TeacherCreateArgs} args - Arguments to create a Teacher.
     * @example
     * // Create one Teacher
     * const Teacher = await prisma.teacher.create({
     *   data: {
     *     // ... data to create a Teacher
     *   }
     * })
     * 
    **/
    create<T extends TeacherCreateArgs>(
      args: SelectSubset<T, TeacherCreateArgs>
    ): Prisma__TeacherClient<TeacherGetPayload<T>>

    /**
     * Create many Teachers.
     *     @param {TeacherCreateManyArgs} args - Arguments to create many Teachers.
     *     @example
     *     // Create many Teachers
     *     const teacher = await prisma.teacher.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TeacherCreateManyArgs>(
      args?: SelectSubset<T, TeacherCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Teacher.
     * @param {TeacherDeleteArgs} args - Arguments to delete one Teacher.
     * @example
     * // Delete one Teacher
     * const Teacher = await prisma.teacher.delete({
     *   where: {
     *     // ... filter to delete one Teacher
     *   }
     * })
     * 
    **/
    delete<T extends TeacherDeleteArgs>(
      args: SelectSubset<T, TeacherDeleteArgs>
    ): Prisma__TeacherClient<TeacherGetPayload<T>>

    /**
     * Update one Teacher.
     * @param {TeacherUpdateArgs} args - Arguments to update one Teacher.
     * @example
     * // Update one Teacher
     * const teacher = await prisma.teacher.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TeacherUpdateArgs>(
      args: SelectSubset<T, TeacherUpdateArgs>
    ): Prisma__TeacherClient<TeacherGetPayload<T>>

    /**
     * Delete zero or more Teachers.
     * @param {TeacherDeleteManyArgs} args - Arguments to filter Teachers to delete.
     * @example
     * // Delete a few Teachers
     * const { count } = await prisma.teacher.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TeacherDeleteManyArgs>(
      args?: SelectSubset<T, TeacherDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teachers
     * const teacher = await prisma.teacher.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TeacherUpdateManyArgs>(
      args: SelectSubset<T, TeacherUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Teacher.
     * @param {TeacherUpsertArgs} args - Arguments to update or create a Teacher.
     * @example
     * // Update or create a Teacher
     * const teacher = await prisma.teacher.upsert({
     *   create: {
     *     // ... data to create a Teacher
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teacher we want to update
     *   }
     * })
    **/
    upsert<T extends TeacherUpsertArgs>(
      args: SelectSubset<T, TeacherUpsertArgs>
    ): Prisma__TeacherClient<TeacherGetPayload<T>>

    /**
     * Count the number of Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCountArgs} args - Arguments to filter Teachers to count.
     * @example
     * // Count the number of Teachers
     * const count = await prisma.teacher.count({
     *   where: {
     *     // ... the filter for the Teachers we want to count
     *   }
     * })
    **/
    count<T extends TeacherCountArgs>(
      args?: Subset<T, TeacherCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeacherCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeacherAggregateArgs>(args: Subset<T, TeacherAggregateArgs>): Prisma.PrismaPromise<GetTeacherAggregateType<T>>

    /**
     * Group by Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeacherGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeacherGroupByArgs['orderBy'] }
        : { orderBy?: TeacherGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeacherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Teacher.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TeacherClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    restrictions<T extends Teacher$restrictionsArgs= {}>(args?: Subset<T, Teacher$restrictionsArgs>): Prisma.PrismaPromise<Array<RestrictionGetPayload<T>>| Null>;

    classrooms<T extends Teacher$classroomsArgs= {}>(args?: Subset<T, Teacher$classroomsArgs>): Prisma.PrismaPromise<Array<ClassroomGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Teacher base type for findUnique actions
   */
  export type TeacherFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeacherInclude | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findUnique
   */
  export interface TeacherFindUniqueArgs extends TeacherFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Teacher findUniqueOrThrow
   */
  export type TeacherFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeacherInclude | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }


  /**
   * Teacher base type for findFirst actions
   */
  export type TeacherFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeacherInclude | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: Enumerable<TeacherOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: Enumerable<TeacherScalarFieldEnum>
  }

  /**
   * Teacher findFirst
   */
  export interface TeacherFindFirstArgs extends TeacherFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Teacher findFirstOrThrow
   */
  export type TeacherFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeacherInclude | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: Enumerable<TeacherOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: Enumerable<TeacherScalarFieldEnum>
  }


  /**
   * Teacher findMany
   */
  export type TeacherFindManyArgs = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeacherInclude | null
    /**
     * Filter, which Teachers to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: Enumerable<TeacherOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    distinct?: Enumerable<TeacherScalarFieldEnum>
  }


  /**
   * Teacher create
   */
  export type TeacherCreateArgs = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeacherInclude | null
    /**
     * The data needed to create a Teacher.
     */
    data: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
  }


  /**
   * Teacher createMany
   */
  export type TeacherCreateManyArgs = {
    /**
     * The data used to create many Teachers.
     */
    data: Enumerable<TeacherCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Teacher update
   */
  export type TeacherUpdateArgs = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeacherInclude | null
    /**
     * The data needed to update a Teacher.
     */
    data: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
    /**
     * Choose, which Teacher to update.
     */
    where: TeacherWhereUniqueInput
  }


  /**
   * Teacher updateMany
   */
  export type TeacherUpdateManyArgs = {
    /**
     * The data used to update Teachers.
     */
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyInput>
    /**
     * Filter which Teachers to update
     */
    where?: TeacherWhereInput
  }


  /**
   * Teacher upsert
   */
  export type TeacherUpsertArgs = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeacherInclude | null
    /**
     * The filter to search for the Teacher to update in case it exists.
     */
    where: TeacherWhereUniqueInput
    /**
     * In case the Teacher found by the `where` argument doesn't exist, create a new Teacher with this data.
     */
    create: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
    /**
     * In case the Teacher was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
  }


  /**
   * Teacher delete
   */
  export type TeacherDeleteArgs = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeacherInclude | null
    /**
     * Filter which Teacher to delete.
     */
    where: TeacherWhereUniqueInput
  }


  /**
   * Teacher deleteMany
   */
  export type TeacherDeleteManyArgs = {
    /**
     * Filter which Teachers to delete
     */
    where?: TeacherWhereInput
  }


  /**
   * Teacher.restrictions
   */
  export type Teacher$restrictionsArgs = {
    /**
     * Select specific fields to fetch from the Restriction
     */
    select?: RestrictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestrictionInclude | null
    where?: RestrictionWhereInput
    orderBy?: Enumerable<RestrictionOrderByWithRelationInput>
    cursor?: RestrictionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RestrictionScalarFieldEnum>
  }


  /**
   * Teacher.classrooms
   */
  export type Teacher$classroomsArgs = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassroomInclude | null
    where?: ClassroomWhereInput
    orderBy?: Enumerable<ClassroomOrderByWithRelationInput>
    cursor?: ClassroomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ClassroomScalarFieldEnum>
  }


  /**
   * Teacher without action
   */
  export type TeacherArgs = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeacherInclude | null
  }



  /**
   * Model Restriction
   */


  export type AggregateRestriction = {
    _count: RestrictionCountAggregateOutputType | null
    _avg: RestrictionAvgAggregateOutputType | null
    _sum: RestrictionSumAggregateOutputType | null
    _min: RestrictionMinAggregateOutputType | null
    _max: RestrictionMaxAggregateOutputType | null
  }

  export type RestrictionAvgAggregateOutputType = {
    Day: number | null
  }

  export type RestrictionSumAggregateOutputType = {
    Day: number | null
  }

  export type RestrictionMinAggregateOutputType = {
    id: string | null
    Period: string | null
    Day: number | null
    teacher_id: string | null
  }

  export type RestrictionMaxAggregateOutputType = {
    id: string | null
    Period: string | null
    Day: number | null
    teacher_id: string | null
  }

  export type RestrictionCountAggregateOutputType = {
    id: number
    Period: number
    Day: number
    teacher_id: number
    _all: number
  }


  export type RestrictionAvgAggregateInputType = {
    Day?: true
  }

  export type RestrictionSumAggregateInputType = {
    Day?: true
  }

  export type RestrictionMinAggregateInputType = {
    id?: true
    Period?: true
    Day?: true
    teacher_id?: true
  }

  export type RestrictionMaxAggregateInputType = {
    id?: true
    Period?: true
    Day?: true
    teacher_id?: true
  }

  export type RestrictionCountAggregateInputType = {
    id?: true
    Period?: true
    Day?: true
    teacher_id?: true
    _all?: true
  }

  export type RestrictionAggregateArgs = {
    /**
     * Filter which Restriction to aggregate.
     */
    where?: RestrictionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restrictions to fetch.
     */
    orderBy?: Enumerable<RestrictionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RestrictionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restrictions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restrictions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Restrictions
    **/
    _count?: true | RestrictionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RestrictionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RestrictionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RestrictionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RestrictionMaxAggregateInputType
  }

  export type GetRestrictionAggregateType<T extends RestrictionAggregateArgs> = {
        [P in keyof T & keyof AggregateRestriction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRestriction[P]>
      : GetScalarType<T[P], AggregateRestriction[P]>
  }




  export type RestrictionGroupByArgs = {
    where?: RestrictionWhereInput
    orderBy?: Enumerable<RestrictionOrderByWithAggregationInput>
    by: RestrictionScalarFieldEnum[]
    having?: RestrictionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RestrictionCountAggregateInputType | true
    _avg?: RestrictionAvgAggregateInputType
    _sum?: RestrictionSumAggregateInputType
    _min?: RestrictionMinAggregateInputType
    _max?: RestrictionMaxAggregateInputType
  }


  export type RestrictionGroupByOutputType = {
    id: string
    Period: string
    Day: number
    teacher_id: string
    _count: RestrictionCountAggregateOutputType | null
    _avg: RestrictionAvgAggregateOutputType | null
    _sum: RestrictionSumAggregateOutputType | null
    _min: RestrictionMinAggregateOutputType | null
    _max: RestrictionMaxAggregateOutputType | null
  }

  type GetRestrictionGroupByPayload<T extends RestrictionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RestrictionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RestrictionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RestrictionGroupByOutputType[P]>
            : GetScalarType<T[P], RestrictionGroupByOutputType[P]>
        }
      >
    >


  export type RestrictionSelect = {
    id?: boolean
    Period?: boolean
    Day?: boolean
    teacher_id?: boolean
    teacher?: boolean | TeacherArgs
  }


  export type RestrictionInclude = {
    teacher?: boolean | TeacherArgs
  }

  export type RestrictionGetPayload<S extends boolean | null | undefined | RestrictionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Restriction :
    S extends undefined ? never :
    S extends { include: any } & (RestrictionArgs | RestrictionFindManyArgs)
    ? Restriction  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'teacher' ? TeacherGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (RestrictionArgs | RestrictionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'teacher' ? TeacherGetPayload<S['select'][P]> :  P extends keyof Restriction ? Restriction[P] : never
  } 
      : Restriction


  type RestrictionCountArgs = 
    Omit<RestrictionFindManyArgs, 'select' | 'include'> & {
      select?: RestrictionCountAggregateInputType | true
    }

  export interface RestrictionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Restriction that matches the filter.
     * @param {RestrictionFindUniqueArgs} args - Arguments to find a Restriction
     * @example
     * // Get one Restriction
     * const restriction = await prisma.restriction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RestrictionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RestrictionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Restriction'> extends True ? Prisma__RestrictionClient<RestrictionGetPayload<T>> : Prisma__RestrictionClient<RestrictionGetPayload<T> | null, null>

    /**
     * Find one Restriction that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RestrictionFindUniqueOrThrowArgs} args - Arguments to find a Restriction
     * @example
     * // Get one Restriction
     * const restriction = await prisma.restriction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RestrictionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RestrictionFindUniqueOrThrowArgs>
    ): Prisma__RestrictionClient<RestrictionGetPayload<T>>

    /**
     * Find the first Restriction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestrictionFindFirstArgs} args - Arguments to find a Restriction
     * @example
     * // Get one Restriction
     * const restriction = await prisma.restriction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RestrictionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RestrictionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Restriction'> extends True ? Prisma__RestrictionClient<RestrictionGetPayload<T>> : Prisma__RestrictionClient<RestrictionGetPayload<T> | null, null>

    /**
     * Find the first Restriction that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestrictionFindFirstOrThrowArgs} args - Arguments to find a Restriction
     * @example
     * // Get one Restriction
     * const restriction = await prisma.restriction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RestrictionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RestrictionFindFirstOrThrowArgs>
    ): Prisma__RestrictionClient<RestrictionGetPayload<T>>

    /**
     * Find zero or more Restrictions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestrictionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Restrictions
     * const restrictions = await prisma.restriction.findMany()
     * 
     * // Get first 10 Restrictions
     * const restrictions = await prisma.restriction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const restrictionWithIdOnly = await prisma.restriction.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RestrictionFindManyArgs>(
      args?: SelectSubset<T, RestrictionFindManyArgs>
    ): Prisma.PrismaPromise<Array<RestrictionGetPayload<T>>>

    /**
     * Create a Restriction.
     * @param {RestrictionCreateArgs} args - Arguments to create a Restriction.
     * @example
     * // Create one Restriction
     * const Restriction = await prisma.restriction.create({
     *   data: {
     *     // ... data to create a Restriction
     *   }
     * })
     * 
    **/
    create<T extends RestrictionCreateArgs>(
      args: SelectSubset<T, RestrictionCreateArgs>
    ): Prisma__RestrictionClient<RestrictionGetPayload<T>>

    /**
     * Create many Restrictions.
     *     @param {RestrictionCreateManyArgs} args - Arguments to create many Restrictions.
     *     @example
     *     // Create many Restrictions
     *     const restriction = await prisma.restriction.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RestrictionCreateManyArgs>(
      args?: SelectSubset<T, RestrictionCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Restriction.
     * @param {RestrictionDeleteArgs} args - Arguments to delete one Restriction.
     * @example
     * // Delete one Restriction
     * const Restriction = await prisma.restriction.delete({
     *   where: {
     *     // ... filter to delete one Restriction
     *   }
     * })
     * 
    **/
    delete<T extends RestrictionDeleteArgs>(
      args: SelectSubset<T, RestrictionDeleteArgs>
    ): Prisma__RestrictionClient<RestrictionGetPayload<T>>

    /**
     * Update one Restriction.
     * @param {RestrictionUpdateArgs} args - Arguments to update one Restriction.
     * @example
     * // Update one Restriction
     * const restriction = await prisma.restriction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RestrictionUpdateArgs>(
      args: SelectSubset<T, RestrictionUpdateArgs>
    ): Prisma__RestrictionClient<RestrictionGetPayload<T>>

    /**
     * Delete zero or more Restrictions.
     * @param {RestrictionDeleteManyArgs} args - Arguments to filter Restrictions to delete.
     * @example
     * // Delete a few Restrictions
     * const { count } = await prisma.restriction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RestrictionDeleteManyArgs>(
      args?: SelectSubset<T, RestrictionDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Restrictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestrictionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Restrictions
     * const restriction = await prisma.restriction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RestrictionUpdateManyArgs>(
      args: SelectSubset<T, RestrictionUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Restriction.
     * @param {RestrictionUpsertArgs} args - Arguments to update or create a Restriction.
     * @example
     * // Update or create a Restriction
     * const restriction = await prisma.restriction.upsert({
     *   create: {
     *     // ... data to create a Restriction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Restriction we want to update
     *   }
     * })
    **/
    upsert<T extends RestrictionUpsertArgs>(
      args: SelectSubset<T, RestrictionUpsertArgs>
    ): Prisma__RestrictionClient<RestrictionGetPayload<T>>

    /**
     * Count the number of Restrictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestrictionCountArgs} args - Arguments to filter Restrictions to count.
     * @example
     * // Count the number of Restrictions
     * const count = await prisma.restriction.count({
     *   where: {
     *     // ... the filter for the Restrictions we want to count
     *   }
     * })
    **/
    count<T extends RestrictionCountArgs>(
      args?: Subset<T, RestrictionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RestrictionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Restriction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestrictionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RestrictionAggregateArgs>(args: Subset<T, RestrictionAggregateArgs>): Prisma.PrismaPromise<GetRestrictionAggregateType<T>>

    /**
     * Group by Restriction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestrictionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RestrictionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RestrictionGroupByArgs['orderBy'] }
        : { orderBy?: RestrictionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RestrictionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRestrictionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Restriction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RestrictionClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    teacher<T extends TeacherArgs= {}>(args?: Subset<T, TeacherArgs>): Prisma__TeacherClient<TeacherGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Restriction base type for findUnique actions
   */
  export type RestrictionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Restriction
     */
    select?: RestrictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestrictionInclude | null
    /**
     * Filter, which Restriction to fetch.
     */
    where: RestrictionWhereUniqueInput
  }

  /**
   * Restriction findUnique
   */
  export interface RestrictionFindUniqueArgs extends RestrictionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Restriction findUniqueOrThrow
   */
  export type RestrictionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Restriction
     */
    select?: RestrictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestrictionInclude | null
    /**
     * Filter, which Restriction to fetch.
     */
    where: RestrictionWhereUniqueInput
  }


  /**
   * Restriction base type for findFirst actions
   */
  export type RestrictionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Restriction
     */
    select?: RestrictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestrictionInclude | null
    /**
     * Filter, which Restriction to fetch.
     */
    where?: RestrictionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restrictions to fetch.
     */
    orderBy?: Enumerable<RestrictionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Restrictions.
     */
    cursor?: RestrictionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restrictions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restrictions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Restrictions.
     */
    distinct?: Enumerable<RestrictionScalarFieldEnum>
  }

  /**
   * Restriction findFirst
   */
  export interface RestrictionFindFirstArgs extends RestrictionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Restriction findFirstOrThrow
   */
  export type RestrictionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Restriction
     */
    select?: RestrictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestrictionInclude | null
    /**
     * Filter, which Restriction to fetch.
     */
    where?: RestrictionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restrictions to fetch.
     */
    orderBy?: Enumerable<RestrictionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Restrictions.
     */
    cursor?: RestrictionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restrictions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restrictions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Restrictions.
     */
    distinct?: Enumerable<RestrictionScalarFieldEnum>
  }


  /**
   * Restriction findMany
   */
  export type RestrictionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Restriction
     */
    select?: RestrictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestrictionInclude | null
    /**
     * Filter, which Restrictions to fetch.
     */
    where?: RestrictionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Restrictions to fetch.
     */
    orderBy?: Enumerable<RestrictionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Restrictions.
     */
    cursor?: RestrictionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Restrictions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Restrictions.
     */
    skip?: number
    distinct?: Enumerable<RestrictionScalarFieldEnum>
  }


  /**
   * Restriction create
   */
  export type RestrictionCreateArgs = {
    /**
     * Select specific fields to fetch from the Restriction
     */
    select?: RestrictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestrictionInclude | null
    /**
     * The data needed to create a Restriction.
     */
    data: XOR<RestrictionCreateInput, RestrictionUncheckedCreateInput>
  }


  /**
   * Restriction createMany
   */
  export type RestrictionCreateManyArgs = {
    /**
     * The data used to create many Restrictions.
     */
    data: Enumerable<RestrictionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Restriction update
   */
  export type RestrictionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Restriction
     */
    select?: RestrictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestrictionInclude | null
    /**
     * The data needed to update a Restriction.
     */
    data: XOR<RestrictionUpdateInput, RestrictionUncheckedUpdateInput>
    /**
     * Choose, which Restriction to update.
     */
    where: RestrictionWhereUniqueInput
  }


  /**
   * Restriction updateMany
   */
  export type RestrictionUpdateManyArgs = {
    /**
     * The data used to update Restrictions.
     */
    data: XOR<RestrictionUpdateManyMutationInput, RestrictionUncheckedUpdateManyInput>
    /**
     * Filter which Restrictions to update
     */
    where?: RestrictionWhereInput
  }


  /**
   * Restriction upsert
   */
  export type RestrictionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Restriction
     */
    select?: RestrictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestrictionInclude | null
    /**
     * The filter to search for the Restriction to update in case it exists.
     */
    where: RestrictionWhereUniqueInput
    /**
     * In case the Restriction found by the `where` argument doesn't exist, create a new Restriction with this data.
     */
    create: XOR<RestrictionCreateInput, RestrictionUncheckedCreateInput>
    /**
     * In case the Restriction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RestrictionUpdateInput, RestrictionUncheckedUpdateInput>
  }


  /**
   * Restriction delete
   */
  export type RestrictionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Restriction
     */
    select?: RestrictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestrictionInclude | null
    /**
     * Filter which Restriction to delete.
     */
    where: RestrictionWhereUniqueInput
  }


  /**
   * Restriction deleteMany
   */
  export type RestrictionDeleteManyArgs = {
    /**
     * Filter which Restrictions to delete
     */
    where?: RestrictionWhereInput
  }


  /**
   * Restriction without action
   */
  export type RestrictionArgs = {
    /**
     * Select specific fields to fetch from the Restriction
     */
    select?: RestrictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RestrictionInclude | null
  }



  /**
   * Model Discipline
   */


  export type AggregateDiscipline = {
    _count: DisciplineCountAggregateOutputType | null
    _avg: DisciplineAvgAggregateOutputType | null
    _sum: DisciplineSumAggregateOutputType | null
    _min: DisciplineMinAggregateOutputType | null
    _max: DisciplineMaxAggregateOutputType | null
  }

  export type DisciplineAvgAggregateOutputType = {
    period: number | null
  }

  export type DisciplineSumAggregateOutputType = {
    period: number | null
  }

  export type DisciplineMinAggregateOutputType = {
    id: string | null
    name: string | null
    period: number | null
  }

  export type DisciplineMaxAggregateOutputType = {
    id: string | null
    name: string | null
    period: number | null
  }

  export type DisciplineCountAggregateOutputType = {
    id: number
    name: number
    period: number
    _all: number
  }


  export type DisciplineAvgAggregateInputType = {
    period?: true
  }

  export type DisciplineSumAggregateInputType = {
    period?: true
  }

  export type DisciplineMinAggregateInputType = {
    id?: true
    name?: true
    period?: true
  }

  export type DisciplineMaxAggregateInputType = {
    id?: true
    name?: true
    period?: true
  }

  export type DisciplineCountAggregateInputType = {
    id?: true
    name?: true
    period?: true
    _all?: true
  }

  export type DisciplineAggregateArgs = {
    /**
     * Filter which Discipline to aggregate.
     */
    where?: DisciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplines to fetch.
     */
    orderBy?: Enumerable<DisciplineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DisciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Disciplines
    **/
    _count?: true | DisciplineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DisciplineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DisciplineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DisciplineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DisciplineMaxAggregateInputType
  }

  export type GetDisciplineAggregateType<T extends DisciplineAggregateArgs> = {
        [P in keyof T & keyof AggregateDiscipline]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscipline[P]>
      : GetScalarType<T[P], AggregateDiscipline[P]>
  }




  export type DisciplineGroupByArgs = {
    where?: DisciplineWhereInput
    orderBy?: Enumerable<DisciplineOrderByWithAggregationInput>
    by: DisciplineScalarFieldEnum[]
    having?: DisciplineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DisciplineCountAggregateInputType | true
    _avg?: DisciplineAvgAggregateInputType
    _sum?: DisciplineSumAggregateInputType
    _min?: DisciplineMinAggregateInputType
    _max?: DisciplineMaxAggregateInputType
  }


  export type DisciplineGroupByOutputType = {
    id: string
    name: string
    period: number
    _count: DisciplineCountAggregateOutputType | null
    _avg: DisciplineAvgAggregateOutputType | null
    _sum: DisciplineSumAggregateOutputType | null
    _min: DisciplineMinAggregateOutputType | null
    _max: DisciplineMaxAggregateOutputType | null
  }

  type GetDisciplineGroupByPayload<T extends DisciplineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DisciplineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DisciplineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DisciplineGroupByOutputType[P]>
            : GetScalarType<T[P], DisciplineGroupByOutputType[P]>
        }
      >
    >


  export type DisciplineSelect = {
    id?: boolean
    name?: boolean
    period?: boolean
    classrooms?: boolean | Discipline$classroomsArgs
    _count?: boolean | DisciplineCountOutputTypeArgs
  }


  export type DisciplineInclude = {
    classrooms?: boolean | Discipline$classroomsArgs
    _count?: boolean | DisciplineCountOutputTypeArgs
  }

  export type DisciplineGetPayload<S extends boolean | null | undefined | DisciplineArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Discipline :
    S extends undefined ? never :
    S extends { include: any } & (DisciplineArgs | DisciplineFindManyArgs)
    ? Discipline  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'classrooms' ? Array < ClassroomGetPayload<S['include'][P]>>  :
        P extends '_count' ? DisciplineCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (DisciplineArgs | DisciplineFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'classrooms' ? Array < ClassroomGetPayload<S['select'][P]>>  :
        P extends '_count' ? DisciplineCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Discipline ? Discipline[P] : never
  } 
      : Discipline


  type DisciplineCountArgs = 
    Omit<DisciplineFindManyArgs, 'select' | 'include'> & {
      select?: DisciplineCountAggregateInputType | true
    }

  export interface DisciplineDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Discipline that matches the filter.
     * @param {DisciplineFindUniqueArgs} args - Arguments to find a Discipline
     * @example
     * // Get one Discipline
     * const discipline = await prisma.discipline.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DisciplineFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DisciplineFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Discipline'> extends True ? Prisma__DisciplineClient<DisciplineGetPayload<T>> : Prisma__DisciplineClient<DisciplineGetPayload<T> | null, null>

    /**
     * Find one Discipline that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DisciplineFindUniqueOrThrowArgs} args - Arguments to find a Discipline
     * @example
     * // Get one Discipline
     * const discipline = await prisma.discipline.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DisciplineFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DisciplineFindUniqueOrThrowArgs>
    ): Prisma__DisciplineClient<DisciplineGetPayload<T>>

    /**
     * Find the first Discipline that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineFindFirstArgs} args - Arguments to find a Discipline
     * @example
     * // Get one Discipline
     * const discipline = await prisma.discipline.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DisciplineFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DisciplineFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Discipline'> extends True ? Prisma__DisciplineClient<DisciplineGetPayload<T>> : Prisma__DisciplineClient<DisciplineGetPayload<T> | null, null>

    /**
     * Find the first Discipline that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineFindFirstOrThrowArgs} args - Arguments to find a Discipline
     * @example
     * // Get one Discipline
     * const discipline = await prisma.discipline.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DisciplineFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DisciplineFindFirstOrThrowArgs>
    ): Prisma__DisciplineClient<DisciplineGetPayload<T>>

    /**
     * Find zero or more Disciplines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Disciplines
     * const disciplines = await prisma.discipline.findMany()
     * 
     * // Get first 10 Disciplines
     * const disciplines = await prisma.discipline.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const disciplineWithIdOnly = await prisma.discipline.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DisciplineFindManyArgs>(
      args?: SelectSubset<T, DisciplineFindManyArgs>
    ): Prisma.PrismaPromise<Array<DisciplineGetPayload<T>>>

    /**
     * Create a Discipline.
     * @param {DisciplineCreateArgs} args - Arguments to create a Discipline.
     * @example
     * // Create one Discipline
     * const Discipline = await prisma.discipline.create({
     *   data: {
     *     // ... data to create a Discipline
     *   }
     * })
     * 
    **/
    create<T extends DisciplineCreateArgs>(
      args: SelectSubset<T, DisciplineCreateArgs>
    ): Prisma__DisciplineClient<DisciplineGetPayload<T>>

    /**
     * Create many Disciplines.
     *     @param {DisciplineCreateManyArgs} args - Arguments to create many Disciplines.
     *     @example
     *     // Create many Disciplines
     *     const discipline = await prisma.discipline.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DisciplineCreateManyArgs>(
      args?: SelectSubset<T, DisciplineCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Discipline.
     * @param {DisciplineDeleteArgs} args - Arguments to delete one Discipline.
     * @example
     * // Delete one Discipline
     * const Discipline = await prisma.discipline.delete({
     *   where: {
     *     // ... filter to delete one Discipline
     *   }
     * })
     * 
    **/
    delete<T extends DisciplineDeleteArgs>(
      args: SelectSubset<T, DisciplineDeleteArgs>
    ): Prisma__DisciplineClient<DisciplineGetPayload<T>>

    /**
     * Update one Discipline.
     * @param {DisciplineUpdateArgs} args - Arguments to update one Discipline.
     * @example
     * // Update one Discipline
     * const discipline = await prisma.discipline.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DisciplineUpdateArgs>(
      args: SelectSubset<T, DisciplineUpdateArgs>
    ): Prisma__DisciplineClient<DisciplineGetPayload<T>>

    /**
     * Delete zero or more Disciplines.
     * @param {DisciplineDeleteManyArgs} args - Arguments to filter Disciplines to delete.
     * @example
     * // Delete a few Disciplines
     * const { count } = await prisma.discipline.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DisciplineDeleteManyArgs>(
      args?: SelectSubset<T, DisciplineDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Disciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Disciplines
     * const discipline = await prisma.discipline.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DisciplineUpdateManyArgs>(
      args: SelectSubset<T, DisciplineUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Discipline.
     * @param {DisciplineUpsertArgs} args - Arguments to update or create a Discipline.
     * @example
     * // Update or create a Discipline
     * const discipline = await prisma.discipline.upsert({
     *   create: {
     *     // ... data to create a Discipline
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Discipline we want to update
     *   }
     * })
    **/
    upsert<T extends DisciplineUpsertArgs>(
      args: SelectSubset<T, DisciplineUpsertArgs>
    ): Prisma__DisciplineClient<DisciplineGetPayload<T>>

    /**
     * Count the number of Disciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineCountArgs} args - Arguments to filter Disciplines to count.
     * @example
     * // Count the number of Disciplines
     * const count = await prisma.discipline.count({
     *   where: {
     *     // ... the filter for the Disciplines we want to count
     *   }
     * })
    **/
    count<T extends DisciplineCountArgs>(
      args?: Subset<T, DisciplineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DisciplineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Discipline.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DisciplineAggregateArgs>(args: Subset<T, DisciplineAggregateArgs>): Prisma.PrismaPromise<GetDisciplineAggregateType<T>>

    /**
     * Group by Discipline.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DisciplineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DisciplineGroupByArgs['orderBy'] }
        : { orderBy?: DisciplineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DisciplineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDisciplineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Discipline.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DisciplineClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    classrooms<T extends Discipline$classroomsArgs= {}>(args?: Subset<T, Discipline$classroomsArgs>): Prisma.PrismaPromise<Array<ClassroomGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Discipline base type for findUnique actions
   */
  export type DisciplineFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplineInclude | null
    /**
     * Filter, which Discipline to fetch.
     */
    where: DisciplineWhereUniqueInput
  }

  /**
   * Discipline findUnique
   */
  export interface DisciplineFindUniqueArgs extends DisciplineFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Discipline findUniqueOrThrow
   */
  export type DisciplineFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplineInclude | null
    /**
     * Filter, which Discipline to fetch.
     */
    where: DisciplineWhereUniqueInput
  }


  /**
   * Discipline base type for findFirst actions
   */
  export type DisciplineFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplineInclude | null
    /**
     * Filter, which Discipline to fetch.
     */
    where?: DisciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplines to fetch.
     */
    orderBy?: Enumerable<DisciplineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Disciplines.
     */
    cursor?: DisciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Disciplines.
     */
    distinct?: Enumerable<DisciplineScalarFieldEnum>
  }

  /**
   * Discipline findFirst
   */
  export interface DisciplineFindFirstArgs extends DisciplineFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Discipline findFirstOrThrow
   */
  export type DisciplineFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplineInclude | null
    /**
     * Filter, which Discipline to fetch.
     */
    where?: DisciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplines to fetch.
     */
    orderBy?: Enumerable<DisciplineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Disciplines.
     */
    cursor?: DisciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Disciplines.
     */
    distinct?: Enumerable<DisciplineScalarFieldEnum>
  }


  /**
   * Discipline findMany
   */
  export type DisciplineFindManyArgs = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplineInclude | null
    /**
     * Filter, which Disciplines to fetch.
     */
    where?: DisciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplines to fetch.
     */
    orderBy?: Enumerable<DisciplineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Disciplines.
     */
    cursor?: DisciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplines.
     */
    skip?: number
    distinct?: Enumerable<DisciplineScalarFieldEnum>
  }


  /**
   * Discipline create
   */
  export type DisciplineCreateArgs = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplineInclude | null
    /**
     * The data needed to create a Discipline.
     */
    data: XOR<DisciplineCreateInput, DisciplineUncheckedCreateInput>
  }


  /**
   * Discipline createMany
   */
  export type DisciplineCreateManyArgs = {
    /**
     * The data used to create many Disciplines.
     */
    data: Enumerable<DisciplineCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Discipline update
   */
  export type DisciplineUpdateArgs = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplineInclude | null
    /**
     * The data needed to update a Discipline.
     */
    data: XOR<DisciplineUpdateInput, DisciplineUncheckedUpdateInput>
    /**
     * Choose, which Discipline to update.
     */
    where: DisciplineWhereUniqueInput
  }


  /**
   * Discipline updateMany
   */
  export type DisciplineUpdateManyArgs = {
    /**
     * The data used to update Disciplines.
     */
    data: XOR<DisciplineUpdateManyMutationInput, DisciplineUncheckedUpdateManyInput>
    /**
     * Filter which Disciplines to update
     */
    where?: DisciplineWhereInput
  }


  /**
   * Discipline upsert
   */
  export type DisciplineUpsertArgs = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplineInclude | null
    /**
     * The filter to search for the Discipline to update in case it exists.
     */
    where: DisciplineWhereUniqueInput
    /**
     * In case the Discipline found by the `where` argument doesn't exist, create a new Discipline with this data.
     */
    create: XOR<DisciplineCreateInput, DisciplineUncheckedCreateInput>
    /**
     * In case the Discipline was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DisciplineUpdateInput, DisciplineUncheckedUpdateInput>
  }


  /**
   * Discipline delete
   */
  export type DisciplineDeleteArgs = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplineInclude | null
    /**
     * Filter which Discipline to delete.
     */
    where: DisciplineWhereUniqueInput
  }


  /**
   * Discipline deleteMany
   */
  export type DisciplineDeleteManyArgs = {
    /**
     * Filter which Disciplines to delete
     */
    where?: DisciplineWhereInput
  }


  /**
   * Discipline.classrooms
   */
  export type Discipline$classroomsArgs = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassroomInclude | null
    where?: ClassroomWhereInput
    orderBy?: Enumerable<ClassroomOrderByWithRelationInput>
    cursor?: ClassroomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ClassroomScalarFieldEnum>
  }


  /**
   * Discipline without action
   */
  export type DisciplineArgs = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DisciplineInclude | null
  }



  /**
   * Model Course
   */


  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseAvgAggregateOutputType = {
    grouping: number | null
  }

  export type CourseSumAggregateOutputType = {
    grouping: number | null
  }

  export type CourseMinAggregateOutputType = {
    id: string | null
    name: string | null
    shift: string | null
    grouping: number | null
  }

  export type CourseMaxAggregateOutputType = {
    id: string | null
    name: string | null
    shift: string | null
    grouping: number | null
  }

  export type CourseCountAggregateOutputType = {
    id: number
    name: number
    shift: number
    grouping: number
    _all: number
  }


  export type CourseAvgAggregateInputType = {
    grouping?: true
  }

  export type CourseSumAggregateInputType = {
    grouping?: true
  }

  export type CourseMinAggregateInputType = {
    id?: true
    name?: true
    shift?: true
    grouping?: true
  }

  export type CourseMaxAggregateInputType = {
    id?: true
    name?: true
    shift?: true
    grouping?: true
  }

  export type CourseCountAggregateInputType = {
    id?: true
    name?: true
    shift?: true
    grouping?: true
    _all?: true
  }

  export type CourseAggregateArgs = {
    /**
     * Filter which Course to aggregate.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: Enumerable<CourseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs = {
    where?: CourseWhereInput
    orderBy?: Enumerable<CourseOrderByWithAggregationInput>
    by: CourseScalarFieldEnum[]
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _avg?: CourseAvgAggregateInputType
    _sum?: CourseSumAggregateInputType
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }


  export type CourseGroupByOutputType = {
    id: string
    name: string
    shift: string
    grouping: number
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect = {
    id?: boolean
    name?: boolean
    shift?: boolean
    grouping?: boolean
    classes?: boolean | Course$classesArgs
    classrooms?: boolean | Course$classroomsArgs
    _count?: boolean | CourseCountOutputTypeArgs
  }


  export type CourseInclude = {
    classes?: boolean | Course$classesArgs
    classrooms?: boolean | Course$classroomsArgs
    _count?: boolean | CourseCountOutputTypeArgs
  }

  export type CourseGetPayload<S extends boolean | null | undefined | CourseArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Course :
    S extends undefined ? never :
    S extends { include: any } & (CourseArgs | CourseFindManyArgs)
    ? Course  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'classes' ? Array < ClassGetPayload<S['include'][P]>>  :
        P extends 'classrooms' ? Array < ClassroomGetPayload<S['include'][P]>>  :
        P extends '_count' ? CourseCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CourseArgs | CourseFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'classes' ? Array < ClassGetPayload<S['select'][P]>>  :
        P extends 'classrooms' ? Array < ClassroomGetPayload<S['select'][P]>>  :
        P extends '_count' ? CourseCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Course ? Course[P] : never
  } 
      : Course


  type CourseCountArgs = 
    Omit<CourseFindManyArgs, 'select' | 'include'> & {
      select?: CourseCountAggregateInputType | true
    }

  export interface CourseDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CourseFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CourseFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Course'> extends True ? Prisma__CourseClient<CourseGetPayload<T>> : Prisma__CourseClient<CourseGetPayload<T> | null, null>

    /**
     * Find one Course that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CourseFindUniqueOrThrowArgs>
    ): Prisma__CourseClient<CourseGetPayload<T>>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CourseFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CourseFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Course'> extends True ? Prisma__CourseClient<CourseGetPayload<T>> : Prisma__CourseClient<CourseGetPayload<T> | null, null>

    /**
     * Find the first Course that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CourseFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CourseFindFirstOrThrowArgs>
    ): Prisma__CourseClient<CourseGetPayload<T>>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CourseFindManyArgs>(
      args?: SelectSubset<T, CourseFindManyArgs>
    ): Prisma.PrismaPromise<Array<CourseGetPayload<T>>>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
    **/
    create<T extends CourseCreateArgs>(
      args: SelectSubset<T, CourseCreateArgs>
    ): Prisma__CourseClient<CourseGetPayload<T>>

    /**
     * Create many Courses.
     *     @param {CourseCreateManyArgs} args - Arguments to create many Courses.
     *     @example
     *     // Create many Courses
     *     const course = await prisma.course.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CourseCreateManyArgs>(
      args?: SelectSubset<T, CourseCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
    **/
    delete<T extends CourseDeleteArgs>(
      args: SelectSubset<T, CourseDeleteArgs>
    ): Prisma__CourseClient<CourseGetPayload<T>>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CourseUpdateArgs>(
      args: SelectSubset<T, CourseUpdateArgs>
    ): Prisma__CourseClient<CourseGetPayload<T>>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CourseDeleteManyArgs>(
      args?: SelectSubset<T, CourseDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CourseUpdateManyArgs>(
      args: SelectSubset<T, CourseUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
    **/
    upsert<T extends CourseUpsertArgs>(
      args: SelectSubset<T, CourseUpsertArgs>
    ): Prisma__CourseClient<CourseGetPayload<T>>

    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CourseClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    classes<T extends Course$classesArgs= {}>(args?: Subset<T, Course$classesArgs>): Prisma.PrismaPromise<Array<ClassGetPayload<T>>| Null>;

    classrooms<T extends Course$classroomsArgs= {}>(args?: Subset<T, Course$classroomsArgs>): Prisma.PrismaPromise<Array<ClassroomGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Course base type for findUnique actions
   */
  export type CourseFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findUnique
   */
  export interface CourseFindUniqueArgs extends CourseFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Course findUniqueOrThrow
   */
  export type CourseFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }


  /**
   * Course base type for findFirst actions
   */
  export type CourseFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: Enumerable<CourseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: Enumerable<CourseScalarFieldEnum>
  }

  /**
   * Course findFirst
   */
  export interface CourseFindFirstArgs extends CourseFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Course findFirstOrThrow
   */
  export type CourseFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: Enumerable<CourseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: Enumerable<CourseScalarFieldEnum>
  }


  /**
   * Course findMany
   */
  export type CourseFindManyArgs = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: Enumerable<CourseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: Enumerable<CourseScalarFieldEnum>
  }


  /**
   * Course create
   */
  export type CourseCreateArgs = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude | null
    /**
     * The data needed to create a Course.
     */
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }


  /**
   * Course createMany
   */
  export type CourseCreateManyArgs = {
    /**
     * The data used to create many Courses.
     */
    data: Enumerable<CourseCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Course update
   */
  export type CourseUpdateArgs = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude | null
    /**
     * The data needed to update a Course.
     */
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     */
    where: CourseWhereUniqueInput
  }


  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
  }


  /**
   * Course upsert
   */
  export type CourseUpsertArgs = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude | null
    /**
     * The filter to search for the Course to update in case it exists.
     */
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     */
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }


  /**
   * Course delete
   */
  export type CourseDeleteArgs = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude | null
    /**
     * Filter which Course to delete.
     */
    where: CourseWhereUniqueInput
  }


  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs = {
    /**
     * Filter which Courses to delete
     */
    where?: CourseWhereInput
  }


  /**
   * Course.classes
   */
  export type Course$classesArgs = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassInclude | null
    where?: ClassWhereInput
    orderBy?: Enumerable<ClassOrderByWithRelationInput>
    cursor?: ClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ClassScalarFieldEnum>
  }


  /**
   * Course.classrooms
   */
  export type Course$classroomsArgs = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassroomInclude | null
    where?: ClassroomWhereInput
    orderBy?: Enumerable<ClassroomOrderByWithRelationInput>
    cursor?: ClassroomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ClassroomScalarFieldEnum>
  }


  /**
   * Course without action
   */
  export type CourseArgs = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude | null
  }



  /**
   * Model Class
   */


  export type AggregateClass = {
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  export type ClassAvgAggregateOutputType = {
    pariod: number | null
    num_students: number | null
  }

  export type ClassSumAggregateOutputType = {
    pariod: number | null
    num_students: number | null
  }

  export type ClassMinAggregateOutputType = {
    id: string | null
    name: string | null
    pariod: number | null
    num_students: number | null
    course_id: string | null
  }

  export type ClassMaxAggregateOutputType = {
    id: string | null
    name: string | null
    pariod: number | null
    num_students: number | null
    course_id: string | null
  }

  export type ClassCountAggregateOutputType = {
    id: number
    name: number
    pariod: number
    num_students: number
    course_id: number
    _all: number
  }


  export type ClassAvgAggregateInputType = {
    pariod?: true
    num_students?: true
  }

  export type ClassSumAggregateInputType = {
    pariod?: true
    num_students?: true
  }

  export type ClassMinAggregateInputType = {
    id?: true
    name?: true
    pariod?: true
    num_students?: true
    course_id?: true
  }

  export type ClassMaxAggregateInputType = {
    id?: true
    name?: true
    pariod?: true
    num_students?: true
    course_id?: true
  }

  export type ClassCountAggregateInputType = {
    id?: true
    name?: true
    pariod?: true
    num_students?: true
    course_id?: true
    _all?: true
  }

  export type ClassAggregateArgs = {
    /**
     * Filter which Class to aggregate.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: Enumerable<ClassOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Classes
    **/
    _count?: true | ClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassMaxAggregateInputType
  }

  export type GetClassAggregateType<T extends ClassAggregateArgs> = {
        [P in keyof T & keyof AggregateClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClass[P]>
      : GetScalarType<T[P], AggregateClass[P]>
  }




  export type ClassGroupByArgs = {
    where?: ClassWhereInput
    orderBy?: Enumerable<ClassOrderByWithAggregationInput>
    by: ClassScalarFieldEnum[]
    having?: ClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassCountAggregateInputType | true
    _avg?: ClassAvgAggregateInputType
    _sum?: ClassSumAggregateInputType
    _min?: ClassMinAggregateInputType
    _max?: ClassMaxAggregateInputType
  }


  export type ClassGroupByOutputType = {
    id: string
    name: string
    pariod: number
    num_students: number
    course_id: string
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  type GetClassGroupByPayload<T extends ClassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassGroupByOutputType[P]>
            : GetScalarType<T[P], ClassGroupByOutputType[P]>
        }
      >
    >


  export type ClassSelect = {
    id?: boolean
    name?: boolean
    pariod?: boolean
    num_students?: boolean
    course_id?: boolean
    course?: boolean | CourseArgs
    groups?: boolean | Class$groupsArgs
    rooms?: boolean | Class$roomsArgs
    classrooms?: boolean | Class$classroomsArgs
    _count?: boolean | ClassCountOutputTypeArgs
  }


  export type ClassInclude = {
    course?: boolean | CourseArgs
    groups?: boolean | Class$groupsArgs
    rooms?: boolean | Class$roomsArgs
    classrooms?: boolean | Class$classroomsArgs
    _count?: boolean | ClassCountOutputTypeArgs
  }

  export type ClassGetPayload<S extends boolean | null | undefined | ClassArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Class :
    S extends undefined ? never :
    S extends { include: any } & (ClassArgs | ClassFindManyArgs)
    ? Class  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'course' ? CourseGetPayload<S['include'][P]> :
        P extends 'groups' ? Array < GroupsGetPayload<S['include'][P]>>  :
        P extends 'rooms' ? Array < RoomGetPayload<S['include'][P]>>  :
        P extends 'classrooms' ? Array < ClassroomGetPayload<S['include'][P]>>  :
        P extends '_count' ? ClassCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ClassArgs | ClassFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'course' ? CourseGetPayload<S['select'][P]> :
        P extends 'groups' ? Array < GroupsGetPayload<S['select'][P]>>  :
        P extends 'rooms' ? Array < RoomGetPayload<S['select'][P]>>  :
        P extends 'classrooms' ? Array < ClassroomGetPayload<S['select'][P]>>  :
        P extends '_count' ? ClassCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Class ? Class[P] : never
  } 
      : Class


  type ClassCountArgs = 
    Omit<ClassFindManyArgs, 'select' | 'include'> & {
      select?: ClassCountAggregateInputType | true
    }

  export interface ClassDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Class that matches the filter.
     * @param {ClassFindUniqueArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClassFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ClassFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Class'> extends True ? Prisma__ClassClient<ClassGetPayload<T>> : Prisma__ClassClient<ClassGetPayload<T> | null, null>

    /**
     * Find one Class that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClassFindUniqueOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClassFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ClassFindUniqueOrThrowArgs>
    ): Prisma__ClassClient<ClassGetPayload<T>>

    /**
     * Find the first Class that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClassFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ClassFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Class'> extends True ? Prisma__ClassClient<ClassGetPayload<T>> : Prisma__ClassClient<ClassGetPayload<T> | null, null>

    /**
     * Find the first Class that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClassFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ClassFindFirstOrThrowArgs>
    ): Prisma__ClassClient<ClassGetPayload<T>>

    /**
     * Find zero or more Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classes
     * const classes = await prisma.class.findMany()
     * 
     * // Get first 10 Classes
     * const classes = await prisma.class.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classWithIdOnly = await prisma.class.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClassFindManyArgs>(
      args?: SelectSubset<T, ClassFindManyArgs>
    ): Prisma.PrismaPromise<Array<ClassGetPayload<T>>>

    /**
     * Create a Class.
     * @param {ClassCreateArgs} args - Arguments to create a Class.
     * @example
     * // Create one Class
     * const Class = await prisma.class.create({
     *   data: {
     *     // ... data to create a Class
     *   }
     * })
     * 
    **/
    create<T extends ClassCreateArgs>(
      args: SelectSubset<T, ClassCreateArgs>
    ): Prisma__ClassClient<ClassGetPayload<T>>

    /**
     * Create many Classes.
     *     @param {ClassCreateManyArgs} args - Arguments to create many Classes.
     *     @example
     *     // Create many Classes
     *     const class = await prisma.class.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClassCreateManyArgs>(
      args?: SelectSubset<T, ClassCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Class.
     * @param {ClassDeleteArgs} args - Arguments to delete one Class.
     * @example
     * // Delete one Class
     * const Class = await prisma.class.delete({
     *   where: {
     *     // ... filter to delete one Class
     *   }
     * })
     * 
    **/
    delete<T extends ClassDeleteArgs>(
      args: SelectSubset<T, ClassDeleteArgs>
    ): Prisma__ClassClient<ClassGetPayload<T>>

    /**
     * Update one Class.
     * @param {ClassUpdateArgs} args - Arguments to update one Class.
     * @example
     * // Update one Class
     * const class = await prisma.class.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClassUpdateArgs>(
      args: SelectSubset<T, ClassUpdateArgs>
    ): Prisma__ClassClient<ClassGetPayload<T>>

    /**
     * Delete zero or more Classes.
     * @param {ClassDeleteManyArgs} args - Arguments to filter Classes to delete.
     * @example
     * // Delete a few Classes
     * const { count } = await prisma.class.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClassDeleteManyArgs>(
      args?: SelectSubset<T, ClassDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClassUpdateManyArgs>(
      args: SelectSubset<T, ClassUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Class.
     * @param {ClassUpsertArgs} args - Arguments to update or create a Class.
     * @example
     * // Update or create a Class
     * const class = await prisma.class.upsert({
     *   create: {
     *     // ... data to create a Class
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Class we want to update
     *   }
     * })
    **/
    upsert<T extends ClassUpsertArgs>(
      args: SelectSubset<T, ClassUpsertArgs>
    ): Prisma__ClassClient<ClassGetPayload<T>>

    /**
     * Count the number of Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassCountArgs} args - Arguments to filter Classes to count.
     * @example
     * // Count the number of Classes
     * const count = await prisma.class.count({
     *   where: {
     *     // ... the filter for the Classes we want to count
     *   }
     * })
    **/
    count<T extends ClassCountArgs>(
      args?: Subset<T, ClassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassAggregateArgs>(args: Subset<T, ClassAggregateArgs>): Prisma.PrismaPromise<GetClassAggregateType<T>>

    /**
     * Group by Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassGroupByArgs['orderBy'] }
        : { orderBy?: ClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Class.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClassClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    course<T extends CourseArgs= {}>(args?: Subset<T, CourseArgs>): Prisma__CourseClient<CourseGetPayload<T> | Null>;

    groups<T extends Class$groupsArgs= {}>(args?: Subset<T, Class$groupsArgs>): Prisma.PrismaPromise<Array<GroupsGetPayload<T>>| Null>;

    rooms<T extends Class$roomsArgs= {}>(args?: Subset<T, Class$roomsArgs>): Prisma.PrismaPromise<Array<RoomGetPayload<T>>| Null>;

    classrooms<T extends Class$classroomsArgs= {}>(args?: Subset<T, Class$classroomsArgs>): Prisma.PrismaPromise<Array<ClassroomGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Class base type for findUnique actions
   */
  export type ClassFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassInclude | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findUnique
   */
  export interface ClassFindUniqueArgs extends ClassFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Class findUniqueOrThrow
   */
  export type ClassFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassInclude | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }


  /**
   * Class base type for findFirst actions
   */
  export type ClassFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassInclude | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: Enumerable<ClassOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: Enumerable<ClassScalarFieldEnum>
  }

  /**
   * Class findFirst
   */
  export interface ClassFindFirstArgs extends ClassFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Class findFirstOrThrow
   */
  export type ClassFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassInclude | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: Enumerable<ClassOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: Enumerable<ClassScalarFieldEnum>
  }


  /**
   * Class findMany
   */
  export type ClassFindManyArgs = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassInclude | null
    /**
     * Filter, which Classes to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: Enumerable<ClassOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    distinct?: Enumerable<ClassScalarFieldEnum>
  }


  /**
   * Class create
   */
  export type ClassCreateArgs = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassInclude | null
    /**
     * The data needed to create a Class.
     */
    data: XOR<ClassCreateInput, ClassUncheckedCreateInput>
  }


  /**
   * Class createMany
   */
  export type ClassCreateManyArgs = {
    /**
     * The data used to create many Classes.
     */
    data: Enumerable<ClassCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Class update
   */
  export type ClassUpdateArgs = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassInclude | null
    /**
     * The data needed to update a Class.
     */
    data: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
    /**
     * Choose, which Class to update.
     */
    where: ClassWhereUniqueInput
  }


  /**
   * Class updateMany
   */
  export type ClassUpdateManyArgs = {
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
  }


  /**
   * Class upsert
   */
  export type ClassUpsertArgs = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassInclude | null
    /**
     * The filter to search for the Class to update in case it exists.
     */
    where: ClassWhereUniqueInput
    /**
     * In case the Class found by the `where` argument doesn't exist, create a new Class with this data.
     */
    create: XOR<ClassCreateInput, ClassUncheckedCreateInput>
    /**
     * In case the Class was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
  }


  /**
   * Class delete
   */
  export type ClassDeleteArgs = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassInclude | null
    /**
     * Filter which Class to delete.
     */
    where: ClassWhereUniqueInput
  }


  /**
   * Class deleteMany
   */
  export type ClassDeleteManyArgs = {
    /**
     * Filter which Classes to delete
     */
    where?: ClassWhereInput
  }


  /**
   * Class.groups
   */
  export type Class$groupsArgs = {
    /**
     * Select specific fields to fetch from the Groups
     */
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupsInclude | null
    where?: GroupsWhereInput
    orderBy?: Enumerable<GroupsOrderByWithRelationInput>
    cursor?: GroupsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GroupsScalarFieldEnum>
  }


  /**
   * Class.rooms
   */
  export type Class$roomsArgs = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude | null
    where?: RoomWhereInput
    orderBy?: Enumerable<RoomOrderByWithRelationInput>
    cursor?: RoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RoomScalarFieldEnum>
  }


  /**
   * Class.classrooms
   */
  export type Class$classroomsArgs = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassroomInclude | null
    where?: ClassroomWhereInput
    orderBy?: Enumerable<ClassroomOrderByWithRelationInput>
    cursor?: ClassroomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ClassroomScalarFieldEnum>
  }


  /**
   * Class without action
   */
  export type ClassArgs = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassInclude | null
  }



  /**
   * Model Groups
   */


  export type AggregateGroups = {
    _count: GroupsCountAggregateOutputType | null
    _min: GroupsMinAggregateOutputType | null
    _max: GroupsMaxAggregateOutputType | null
  }

  export type GroupsMinAggregateOutputType = {
    id: string | null
    group1: string | null
    group2: string | null
    group3: string | null
    group4: string | null
    class_id: string | null
  }

  export type GroupsMaxAggregateOutputType = {
    id: string | null
    group1: string | null
    group2: string | null
    group3: string | null
    group4: string | null
    class_id: string | null
  }

  export type GroupsCountAggregateOutputType = {
    id: number
    group1: number
    group2: number
    group3: number
    group4: number
    class_id: number
    _all: number
  }


  export type GroupsMinAggregateInputType = {
    id?: true
    group1?: true
    group2?: true
    group3?: true
    group4?: true
    class_id?: true
  }

  export type GroupsMaxAggregateInputType = {
    id?: true
    group1?: true
    group2?: true
    group3?: true
    group4?: true
    class_id?: true
  }

  export type GroupsCountAggregateInputType = {
    id?: true
    group1?: true
    group2?: true
    group3?: true
    group4?: true
    class_id?: true
    _all?: true
  }

  export type GroupsAggregateArgs = {
    /**
     * Filter which Groups to aggregate.
     */
    where?: GroupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: Enumerable<GroupsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Groups
    **/
    _count?: true | GroupsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupsMaxAggregateInputType
  }

  export type GetGroupsAggregateType<T extends GroupsAggregateArgs> = {
        [P in keyof T & keyof AggregateGroups]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroups[P]>
      : GetScalarType<T[P], AggregateGroups[P]>
  }




  export type GroupsGroupByArgs = {
    where?: GroupsWhereInput
    orderBy?: Enumerable<GroupsOrderByWithAggregationInput>
    by: GroupsScalarFieldEnum[]
    having?: GroupsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupsCountAggregateInputType | true
    _min?: GroupsMinAggregateInputType
    _max?: GroupsMaxAggregateInputType
  }


  export type GroupsGroupByOutputType = {
    id: string
    group1: string
    group2: string
    group3: string
    group4: string
    class_id: string
    _count: GroupsCountAggregateOutputType | null
    _min: GroupsMinAggregateOutputType | null
    _max: GroupsMaxAggregateOutputType | null
  }

  type GetGroupsGroupByPayload<T extends GroupsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<GroupsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupsGroupByOutputType[P]>
            : GetScalarType<T[P], GroupsGroupByOutputType[P]>
        }
      >
    >


  export type GroupsSelect = {
    id?: boolean
    group1?: boolean
    group2?: boolean
    group3?: boolean
    group4?: boolean
    class_id?: boolean
    class?: boolean | ClassArgs
  }


  export type GroupsInclude = {
    class?: boolean | ClassArgs
  }

  export type GroupsGetPayload<S extends boolean | null | undefined | GroupsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Groups :
    S extends undefined ? never :
    S extends { include: any } & (GroupsArgs | GroupsFindManyArgs)
    ? Groups  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'class' ? ClassGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (GroupsArgs | GroupsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'class' ? ClassGetPayload<S['select'][P]> :  P extends keyof Groups ? Groups[P] : never
  } 
      : Groups


  type GroupsCountArgs = 
    Omit<GroupsFindManyArgs, 'select' | 'include'> & {
      select?: GroupsCountAggregateInputType | true
    }

  export interface GroupsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Groups that matches the filter.
     * @param {GroupsFindUniqueArgs} args - Arguments to find a Groups
     * @example
     * // Get one Groups
     * const groups = await prisma.groups.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GroupsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GroupsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Groups'> extends True ? Prisma__GroupsClient<GroupsGetPayload<T>> : Prisma__GroupsClient<GroupsGetPayload<T> | null, null>

    /**
     * Find one Groups that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GroupsFindUniqueOrThrowArgs} args - Arguments to find a Groups
     * @example
     * // Get one Groups
     * const groups = await prisma.groups.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GroupsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GroupsFindUniqueOrThrowArgs>
    ): Prisma__GroupsClient<GroupsGetPayload<T>>

    /**
     * Find the first Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsFindFirstArgs} args - Arguments to find a Groups
     * @example
     * // Get one Groups
     * const groups = await prisma.groups.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GroupsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GroupsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Groups'> extends True ? Prisma__GroupsClient<GroupsGetPayload<T>> : Prisma__GroupsClient<GroupsGetPayload<T> | null, null>

    /**
     * Find the first Groups that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsFindFirstOrThrowArgs} args - Arguments to find a Groups
     * @example
     * // Get one Groups
     * const groups = await prisma.groups.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GroupsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GroupsFindFirstOrThrowArgs>
    ): Prisma__GroupsClient<GroupsGetPayload<T>>

    /**
     * Find zero or more Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups
     * const groups = await prisma.groups.findMany()
     * 
     * // Get first 10 Groups
     * const groups = await prisma.groups.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupsWithIdOnly = await prisma.groups.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GroupsFindManyArgs>(
      args?: SelectSubset<T, GroupsFindManyArgs>
    ): Prisma.PrismaPromise<Array<GroupsGetPayload<T>>>

    /**
     * Create a Groups.
     * @param {GroupsCreateArgs} args - Arguments to create a Groups.
     * @example
     * // Create one Groups
     * const Groups = await prisma.groups.create({
     *   data: {
     *     // ... data to create a Groups
     *   }
     * })
     * 
    **/
    create<T extends GroupsCreateArgs>(
      args: SelectSubset<T, GroupsCreateArgs>
    ): Prisma__GroupsClient<GroupsGetPayload<T>>

    /**
     * Create many Groups.
     *     @param {GroupsCreateManyArgs} args - Arguments to create many Groups.
     *     @example
     *     // Create many Groups
     *     const groups = await prisma.groups.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GroupsCreateManyArgs>(
      args?: SelectSubset<T, GroupsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Groups.
     * @param {GroupsDeleteArgs} args - Arguments to delete one Groups.
     * @example
     * // Delete one Groups
     * const Groups = await prisma.groups.delete({
     *   where: {
     *     // ... filter to delete one Groups
     *   }
     * })
     * 
    **/
    delete<T extends GroupsDeleteArgs>(
      args: SelectSubset<T, GroupsDeleteArgs>
    ): Prisma__GroupsClient<GroupsGetPayload<T>>

    /**
     * Update one Groups.
     * @param {GroupsUpdateArgs} args - Arguments to update one Groups.
     * @example
     * // Update one Groups
     * const groups = await prisma.groups.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GroupsUpdateArgs>(
      args: SelectSubset<T, GroupsUpdateArgs>
    ): Prisma__GroupsClient<GroupsGetPayload<T>>

    /**
     * Delete zero or more Groups.
     * @param {GroupsDeleteManyArgs} args - Arguments to filter Groups to delete.
     * @example
     * // Delete a few Groups
     * const { count } = await prisma.groups.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GroupsDeleteManyArgs>(
      args?: SelectSubset<T, GroupsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups
     * const groups = await prisma.groups.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GroupsUpdateManyArgs>(
      args: SelectSubset<T, GroupsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Groups.
     * @param {GroupsUpsertArgs} args - Arguments to update or create a Groups.
     * @example
     * // Update or create a Groups
     * const groups = await prisma.groups.upsert({
     *   create: {
     *     // ... data to create a Groups
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Groups we want to update
     *   }
     * })
    **/
    upsert<T extends GroupsUpsertArgs>(
      args: SelectSubset<T, GroupsUpsertArgs>
    ): Prisma__GroupsClient<GroupsGetPayload<T>>

    /**
     * Count the number of Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsCountArgs} args - Arguments to filter Groups to count.
     * @example
     * // Count the number of Groups
     * const count = await prisma.groups.count({
     *   where: {
     *     // ... the filter for the Groups we want to count
     *   }
     * })
    **/
    count<T extends GroupsCountArgs>(
      args?: Subset<T, GroupsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupsAggregateArgs>(args: Subset<T, GroupsAggregateArgs>): Prisma.PrismaPromise<GetGroupsAggregateType<T>>

    /**
     * Group by Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupsGroupByArgs['orderBy'] }
        : { orderBy?: GroupsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Groups.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GroupsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    class<T extends ClassArgs= {}>(args?: Subset<T, ClassArgs>): Prisma__ClassClient<ClassGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Groups base type for findUnique actions
   */
  export type GroupsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Groups
     */
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupsInclude | null
    /**
     * Filter, which Groups to fetch.
     */
    where: GroupsWhereUniqueInput
  }

  /**
   * Groups findUnique
   */
  export interface GroupsFindUniqueArgs extends GroupsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Groups findUniqueOrThrow
   */
  export type GroupsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Groups
     */
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupsInclude | null
    /**
     * Filter, which Groups to fetch.
     */
    where: GroupsWhereUniqueInput
  }


  /**
   * Groups base type for findFirst actions
   */
  export type GroupsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Groups
     */
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupsInclude | null
    /**
     * Filter, which Groups to fetch.
     */
    where?: GroupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: Enumerable<GroupsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: Enumerable<GroupsScalarFieldEnum>
  }

  /**
   * Groups findFirst
   */
  export interface GroupsFindFirstArgs extends GroupsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Groups findFirstOrThrow
   */
  export type GroupsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Groups
     */
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupsInclude | null
    /**
     * Filter, which Groups to fetch.
     */
    where?: GroupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: Enumerable<GroupsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: Enumerable<GroupsScalarFieldEnum>
  }


  /**
   * Groups findMany
   */
  export type GroupsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Groups
     */
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupsInclude | null
    /**
     * Filter, which Groups to fetch.
     */
    where?: GroupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: Enumerable<GroupsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Groups.
     */
    cursor?: GroupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    distinct?: Enumerable<GroupsScalarFieldEnum>
  }


  /**
   * Groups create
   */
  export type GroupsCreateArgs = {
    /**
     * Select specific fields to fetch from the Groups
     */
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupsInclude | null
    /**
     * The data needed to create a Groups.
     */
    data: XOR<GroupsCreateInput, GroupsUncheckedCreateInput>
  }


  /**
   * Groups createMany
   */
  export type GroupsCreateManyArgs = {
    /**
     * The data used to create many Groups.
     */
    data: Enumerable<GroupsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Groups update
   */
  export type GroupsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Groups
     */
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupsInclude | null
    /**
     * The data needed to update a Groups.
     */
    data: XOR<GroupsUpdateInput, GroupsUncheckedUpdateInput>
    /**
     * Choose, which Groups to update.
     */
    where: GroupsWhereUniqueInput
  }


  /**
   * Groups updateMany
   */
  export type GroupsUpdateManyArgs = {
    /**
     * The data used to update Groups.
     */
    data: XOR<GroupsUpdateManyMutationInput, GroupsUncheckedUpdateManyInput>
    /**
     * Filter which Groups to update
     */
    where?: GroupsWhereInput
  }


  /**
   * Groups upsert
   */
  export type GroupsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Groups
     */
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupsInclude | null
    /**
     * The filter to search for the Groups to update in case it exists.
     */
    where: GroupsWhereUniqueInput
    /**
     * In case the Groups found by the `where` argument doesn't exist, create a new Groups with this data.
     */
    create: XOR<GroupsCreateInput, GroupsUncheckedCreateInput>
    /**
     * In case the Groups was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupsUpdateInput, GroupsUncheckedUpdateInput>
  }


  /**
   * Groups delete
   */
  export type GroupsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Groups
     */
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupsInclude | null
    /**
     * Filter which Groups to delete.
     */
    where: GroupsWhereUniqueInput
  }


  /**
   * Groups deleteMany
   */
  export type GroupsDeleteManyArgs = {
    /**
     * Filter which Groups to delete
     */
    where?: GroupsWhereInput
  }


  /**
   * Groups without action
   */
  export type GroupsArgs = {
    /**
     * Select specific fields to fetch from the Groups
     */
    select?: GroupsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupsInclude | null
  }



  /**
   * Model Room
   */


  export type AggregateRoom = {
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  export type RoomAvgAggregateOutputType = {
    capacity: number | null
  }

  export type RoomSumAggregateOutputType = {
    capacity: number | null
  }

  export type RoomMinAggregateOutputType = {
    id: string | null
    name: string | null
    fixed: boolean | null
    building: string | null
    capacity: number | null
    class_id: string | null
  }

  export type RoomMaxAggregateOutputType = {
    id: string | null
    name: string | null
    fixed: boolean | null
    building: string | null
    capacity: number | null
    class_id: string | null
  }

  export type RoomCountAggregateOutputType = {
    id: number
    name: number
    fixed: number
    building: number
    capacity: number
    class_id: number
    _all: number
  }


  export type RoomAvgAggregateInputType = {
    capacity?: true
  }

  export type RoomSumAggregateInputType = {
    capacity?: true
  }

  export type RoomMinAggregateInputType = {
    id?: true
    name?: true
    fixed?: true
    building?: true
    capacity?: true
    class_id?: true
  }

  export type RoomMaxAggregateInputType = {
    id?: true
    name?: true
    fixed?: true
    building?: true
    capacity?: true
    class_id?: true
  }

  export type RoomCountAggregateInputType = {
    id?: true
    name?: true
    fixed?: true
    building?: true
    capacity?: true
    class_id?: true
    _all?: true
  }

  export type RoomAggregateArgs = {
    /**
     * Filter which Room to aggregate.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: Enumerable<RoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rooms
    **/
    _count?: true | RoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomMaxAggregateInputType
  }

  export type GetRoomAggregateType<T extends RoomAggregateArgs> = {
        [P in keyof T & keyof AggregateRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoom[P]>
      : GetScalarType<T[P], AggregateRoom[P]>
  }




  export type RoomGroupByArgs = {
    where?: RoomWhereInput
    orderBy?: Enumerable<RoomOrderByWithAggregationInput>
    by: RoomScalarFieldEnum[]
    having?: RoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomCountAggregateInputType | true
    _avg?: RoomAvgAggregateInputType
    _sum?: RoomSumAggregateInputType
    _min?: RoomMinAggregateInputType
    _max?: RoomMaxAggregateInputType
  }


  export type RoomGroupByOutputType = {
    id: string
    name: string
    fixed: boolean
    building: string
    capacity: number
    class_id: string | null
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  type GetRoomGroupByPayload<T extends RoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomGroupByOutputType[P]>
            : GetScalarType<T[P], RoomGroupByOutputType[P]>
        }
      >
    >


  export type RoomSelect = {
    id?: boolean
    name?: boolean
    fixed?: boolean
    building?: boolean
    capacity?: boolean
    class_id?: boolean
    class?: boolean | ClassArgs
    classrooms?: boolean | Room$classroomsArgs
    _count?: boolean | RoomCountOutputTypeArgs
  }


  export type RoomInclude = {
    class?: boolean | ClassArgs
    classrooms?: boolean | Room$classroomsArgs
    _count?: boolean | RoomCountOutputTypeArgs
  }

  export type RoomGetPayload<S extends boolean | null | undefined | RoomArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Room :
    S extends undefined ? never :
    S extends { include: any } & (RoomArgs | RoomFindManyArgs)
    ? Room  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'class' ? ClassGetPayload<S['include'][P]> | null :
        P extends 'classrooms' ? Array < ClassroomGetPayload<S['include'][P]>>  :
        P extends '_count' ? RoomCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (RoomArgs | RoomFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'class' ? ClassGetPayload<S['select'][P]> | null :
        P extends 'classrooms' ? Array < ClassroomGetPayload<S['select'][P]>>  :
        P extends '_count' ? RoomCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Room ? Room[P] : never
  } 
      : Room


  type RoomCountArgs = 
    Omit<RoomFindManyArgs, 'select' | 'include'> & {
      select?: RoomCountAggregateInputType | true
    }

  export interface RoomDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Room that matches the filter.
     * @param {RoomFindUniqueArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RoomFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RoomFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Room'> extends True ? Prisma__RoomClient<RoomGetPayload<T>> : Prisma__RoomClient<RoomGetPayload<T> | null, null>

    /**
     * Find one Room that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RoomFindUniqueOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RoomFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RoomFindUniqueOrThrowArgs>
    ): Prisma__RoomClient<RoomGetPayload<T>>

    /**
     * Find the first Room that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RoomFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RoomFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Room'> extends True ? Prisma__RoomClient<RoomGetPayload<T>> : Prisma__RoomClient<RoomGetPayload<T> | null, null>

    /**
     * Find the first Room that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RoomFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RoomFindFirstOrThrowArgs>
    ): Prisma__RoomClient<RoomGetPayload<T>>

    /**
     * Find zero or more Rooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rooms
     * const rooms = await prisma.room.findMany()
     * 
     * // Get first 10 Rooms
     * const rooms = await prisma.room.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roomWithIdOnly = await prisma.room.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RoomFindManyArgs>(
      args?: SelectSubset<T, RoomFindManyArgs>
    ): Prisma.PrismaPromise<Array<RoomGetPayload<T>>>

    /**
     * Create a Room.
     * @param {RoomCreateArgs} args - Arguments to create a Room.
     * @example
     * // Create one Room
     * const Room = await prisma.room.create({
     *   data: {
     *     // ... data to create a Room
     *   }
     * })
     * 
    **/
    create<T extends RoomCreateArgs>(
      args: SelectSubset<T, RoomCreateArgs>
    ): Prisma__RoomClient<RoomGetPayload<T>>

    /**
     * Create many Rooms.
     *     @param {RoomCreateManyArgs} args - Arguments to create many Rooms.
     *     @example
     *     // Create many Rooms
     *     const room = await prisma.room.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RoomCreateManyArgs>(
      args?: SelectSubset<T, RoomCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Room.
     * @param {RoomDeleteArgs} args - Arguments to delete one Room.
     * @example
     * // Delete one Room
     * const Room = await prisma.room.delete({
     *   where: {
     *     // ... filter to delete one Room
     *   }
     * })
     * 
    **/
    delete<T extends RoomDeleteArgs>(
      args: SelectSubset<T, RoomDeleteArgs>
    ): Prisma__RoomClient<RoomGetPayload<T>>

    /**
     * Update one Room.
     * @param {RoomUpdateArgs} args - Arguments to update one Room.
     * @example
     * // Update one Room
     * const room = await prisma.room.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RoomUpdateArgs>(
      args: SelectSubset<T, RoomUpdateArgs>
    ): Prisma__RoomClient<RoomGetPayload<T>>

    /**
     * Delete zero or more Rooms.
     * @param {RoomDeleteManyArgs} args - Arguments to filter Rooms to delete.
     * @example
     * // Delete a few Rooms
     * const { count } = await prisma.room.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RoomDeleteManyArgs>(
      args?: SelectSubset<T, RoomDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rooms
     * const room = await prisma.room.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RoomUpdateManyArgs>(
      args: SelectSubset<T, RoomUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Room.
     * @param {RoomUpsertArgs} args - Arguments to update or create a Room.
     * @example
     * // Update or create a Room
     * const room = await prisma.room.upsert({
     *   create: {
     *     // ... data to create a Room
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Room we want to update
     *   }
     * })
    **/
    upsert<T extends RoomUpsertArgs>(
      args: SelectSubset<T, RoomUpsertArgs>
    ): Prisma__RoomClient<RoomGetPayload<T>>

    /**
     * Count the number of Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomCountArgs} args - Arguments to filter Rooms to count.
     * @example
     * // Count the number of Rooms
     * const count = await prisma.room.count({
     *   where: {
     *     // ... the filter for the Rooms we want to count
     *   }
     * })
    **/
    count<T extends RoomCountArgs>(
      args?: Subset<T, RoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomAggregateArgs>(args: Subset<T, RoomAggregateArgs>): Prisma.PrismaPromise<GetRoomAggregateType<T>>

    /**
     * Group by Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomGroupByArgs['orderBy'] }
        : { orderBy?: RoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Room.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RoomClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    class<T extends ClassArgs= {}>(args?: Subset<T, ClassArgs>): Prisma__ClassClient<ClassGetPayload<T> | Null>;

    classrooms<T extends Room$classroomsArgs= {}>(args?: Subset<T, Room$classroomsArgs>): Prisma.PrismaPromise<Array<ClassroomGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Room base type for findUnique actions
   */
  export type RoomFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude | null
    /**
     * Filter, which Room to fetch.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room findUnique
   */
  export interface RoomFindUniqueArgs extends RoomFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Room findUniqueOrThrow
   */
  export type RoomFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude | null
    /**
     * Filter, which Room to fetch.
     */
    where: RoomWhereUniqueInput
  }


  /**
   * Room base type for findFirst actions
   */
  export type RoomFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude | null
    /**
     * Filter, which Room to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: Enumerable<RoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     */
    distinct?: Enumerable<RoomScalarFieldEnum>
  }

  /**
   * Room findFirst
   */
  export interface RoomFindFirstArgs extends RoomFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Room findFirstOrThrow
   */
  export type RoomFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude | null
    /**
     * Filter, which Room to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: Enumerable<RoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     */
    distinct?: Enumerable<RoomScalarFieldEnum>
  }


  /**
   * Room findMany
   */
  export type RoomFindManyArgs = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude | null
    /**
     * Filter, which Rooms to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: Enumerable<RoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    distinct?: Enumerable<RoomScalarFieldEnum>
  }


  /**
   * Room create
   */
  export type RoomCreateArgs = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude | null
    /**
     * The data needed to create a Room.
     */
    data: XOR<RoomCreateInput, RoomUncheckedCreateInput>
  }


  /**
   * Room createMany
   */
  export type RoomCreateManyArgs = {
    /**
     * The data used to create many Rooms.
     */
    data: Enumerable<RoomCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Room update
   */
  export type RoomUpdateArgs = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude | null
    /**
     * The data needed to update a Room.
     */
    data: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
    /**
     * Choose, which Room to update.
     */
    where: RoomWhereUniqueInput
  }


  /**
   * Room updateMany
   */
  export type RoomUpdateManyArgs = {
    /**
     * The data used to update Rooms.
     */
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyInput>
    /**
     * Filter which Rooms to update
     */
    where?: RoomWhereInput
  }


  /**
   * Room upsert
   */
  export type RoomUpsertArgs = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude | null
    /**
     * The filter to search for the Room to update in case it exists.
     */
    where: RoomWhereUniqueInput
    /**
     * In case the Room found by the `where` argument doesn't exist, create a new Room with this data.
     */
    create: XOR<RoomCreateInput, RoomUncheckedCreateInput>
    /**
     * In case the Room was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
  }


  /**
   * Room delete
   */
  export type RoomDeleteArgs = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude | null
    /**
     * Filter which Room to delete.
     */
    where: RoomWhereUniqueInput
  }


  /**
   * Room deleteMany
   */
  export type RoomDeleteManyArgs = {
    /**
     * Filter which Rooms to delete
     */
    where?: RoomWhereInput
  }


  /**
   * Room.classrooms
   */
  export type Room$classroomsArgs = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassroomInclude | null
    where?: ClassroomWhereInput
    orderBy?: Enumerable<ClassroomOrderByWithRelationInput>
    cursor?: ClassroomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ClassroomScalarFieldEnum>
  }


  /**
   * Room without action
   */
  export type RoomArgs = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoomInclude | null
  }



  /**
   * Model Classroom
   */


  export type AggregateClassroom = {
    _count: ClassroomCountAggregateOutputType | null
    _avg: ClassroomAvgAggregateOutputType | null
    _sum: ClassroomSumAggregateOutputType | null
    _min: ClassroomMinAggregateOutputType | null
    _max: ClassroomMaxAggregateOutputType | null
  }

  export type ClassroomAvgAggregateOutputType = {
    amount: number | null
    duration: number | null
  }

  export type ClassroomSumAggregateOutputType = {
    amount: number | null
    duration: number | null
  }

  export type ClassroomMinAggregateOutputType = {
    id: string | null
    amount: number | null
    duration: number | null
    teacher_id: string | null
    discipline_id: string | null
    room_id: string | null
    course_id: string | null
    class_id: string | null
  }

  export type ClassroomMaxAggregateOutputType = {
    id: string | null
    amount: number | null
    duration: number | null
    teacher_id: string | null
    discipline_id: string | null
    room_id: string | null
    course_id: string | null
    class_id: string | null
  }

  export type ClassroomCountAggregateOutputType = {
    id: number
    amount: number
    duration: number
    teacher_id: number
    discipline_id: number
    room_id: number
    course_id: number
    class_id: number
    _all: number
  }


  export type ClassroomAvgAggregateInputType = {
    amount?: true
    duration?: true
  }

  export type ClassroomSumAggregateInputType = {
    amount?: true
    duration?: true
  }

  export type ClassroomMinAggregateInputType = {
    id?: true
    amount?: true
    duration?: true
    teacher_id?: true
    discipline_id?: true
    room_id?: true
    course_id?: true
    class_id?: true
  }

  export type ClassroomMaxAggregateInputType = {
    id?: true
    amount?: true
    duration?: true
    teacher_id?: true
    discipline_id?: true
    room_id?: true
    course_id?: true
    class_id?: true
  }

  export type ClassroomCountAggregateInputType = {
    id?: true
    amount?: true
    duration?: true
    teacher_id?: true
    discipline_id?: true
    room_id?: true
    course_id?: true
    class_id?: true
    _all?: true
  }

  export type ClassroomAggregateArgs = {
    /**
     * Filter which Classroom to aggregate.
     */
    where?: ClassroomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classrooms to fetch.
     */
    orderBy?: Enumerable<ClassroomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassroomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classrooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classrooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Classrooms
    **/
    _count?: true | ClassroomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassroomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassroomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassroomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassroomMaxAggregateInputType
  }

  export type GetClassroomAggregateType<T extends ClassroomAggregateArgs> = {
        [P in keyof T & keyof AggregateClassroom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClassroom[P]>
      : GetScalarType<T[P], AggregateClassroom[P]>
  }




  export type ClassroomGroupByArgs = {
    where?: ClassroomWhereInput
    orderBy?: Enumerable<ClassroomOrderByWithAggregationInput>
    by: ClassroomScalarFieldEnum[]
    having?: ClassroomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassroomCountAggregateInputType | true
    _avg?: ClassroomAvgAggregateInputType
    _sum?: ClassroomSumAggregateInputType
    _min?: ClassroomMinAggregateInputType
    _max?: ClassroomMaxAggregateInputType
  }


  export type ClassroomGroupByOutputType = {
    id: string
    amount: number
    duration: number
    teacher_id: string
    discipline_id: string
    room_id: string
    course_id: string
    class_id: string
    _count: ClassroomCountAggregateOutputType | null
    _avg: ClassroomAvgAggregateOutputType | null
    _sum: ClassroomSumAggregateOutputType | null
    _min: ClassroomMinAggregateOutputType | null
    _max: ClassroomMaxAggregateOutputType | null
  }

  type GetClassroomGroupByPayload<T extends ClassroomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ClassroomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassroomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassroomGroupByOutputType[P]>
            : GetScalarType<T[P], ClassroomGroupByOutputType[P]>
        }
      >
    >


  export type ClassroomSelect = {
    id?: boolean
    amount?: boolean
    duration?: boolean
    teacher_id?: boolean
    discipline_id?: boolean
    room_id?: boolean
    course_id?: boolean
    class_id?: boolean
    teacher?: boolean | TeacherArgs
    discipline?: boolean | DisciplineArgs
    room?: boolean | RoomArgs
    course?: boolean | CourseArgs
    class?: boolean | ClassArgs
  }


  export type ClassroomInclude = {
    teacher?: boolean | TeacherArgs
    discipline?: boolean | DisciplineArgs
    room?: boolean | RoomArgs
    course?: boolean | CourseArgs
    class?: boolean | ClassArgs
  }

  export type ClassroomGetPayload<S extends boolean | null | undefined | ClassroomArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Classroom :
    S extends undefined ? never :
    S extends { include: any } & (ClassroomArgs | ClassroomFindManyArgs)
    ? Classroom  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'teacher' ? TeacherGetPayload<S['include'][P]> :
        P extends 'discipline' ? DisciplineGetPayload<S['include'][P]> :
        P extends 'room' ? RoomGetPayload<S['include'][P]> :
        P extends 'course' ? CourseGetPayload<S['include'][P]> :
        P extends 'class' ? ClassGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ClassroomArgs | ClassroomFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'teacher' ? TeacherGetPayload<S['select'][P]> :
        P extends 'discipline' ? DisciplineGetPayload<S['select'][P]> :
        P extends 'room' ? RoomGetPayload<S['select'][P]> :
        P extends 'course' ? CourseGetPayload<S['select'][P]> :
        P extends 'class' ? ClassGetPayload<S['select'][P]> :  P extends keyof Classroom ? Classroom[P] : never
  } 
      : Classroom


  type ClassroomCountArgs = 
    Omit<ClassroomFindManyArgs, 'select' | 'include'> & {
      select?: ClassroomCountAggregateInputType | true
    }

  export interface ClassroomDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Classroom that matches the filter.
     * @param {ClassroomFindUniqueArgs} args - Arguments to find a Classroom
     * @example
     * // Get one Classroom
     * const classroom = await prisma.classroom.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClassroomFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ClassroomFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Classroom'> extends True ? Prisma__ClassroomClient<ClassroomGetPayload<T>> : Prisma__ClassroomClient<ClassroomGetPayload<T> | null, null>

    /**
     * Find one Classroom that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClassroomFindUniqueOrThrowArgs} args - Arguments to find a Classroom
     * @example
     * // Get one Classroom
     * const classroom = await prisma.classroom.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClassroomFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ClassroomFindUniqueOrThrowArgs>
    ): Prisma__ClassroomClient<ClassroomGetPayload<T>>

    /**
     * Find the first Classroom that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassroomFindFirstArgs} args - Arguments to find a Classroom
     * @example
     * // Get one Classroom
     * const classroom = await prisma.classroom.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClassroomFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ClassroomFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Classroom'> extends True ? Prisma__ClassroomClient<ClassroomGetPayload<T>> : Prisma__ClassroomClient<ClassroomGetPayload<T> | null, null>

    /**
     * Find the first Classroom that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassroomFindFirstOrThrowArgs} args - Arguments to find a Classroom
     * @example
     * // Get one Classroom
     * const classroom = await prisma.classroom.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClassroomFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ClassroomFindFirstOrThrowArgs>
    ): Prisma__ClassroomClient<ClassroomGetPayload<T>>

    /**
     * Find zero or more Classrooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassroomFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classrooms
     * const classrooms = await prisma.classroom.findMany()
     * 
     * // Get first 10 Classrooms
     * const classrooms = await prisma.classroom.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classroomWithIdOnly = await prisma.classroom.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClassroomFindManyArgs>(
      args?: SelectSubset<T, ClassroomFindManyArgs>
    ): Prisma.PrismaPromise<Array<ClassroomGetPayload<T>>>

    /**
     * Create a Classroom.
     * @param {ClassroomCreateArgs} args - Arguments to create a Classroom.
     * @example
     * // Create one Classroom
     * const Classroom = await prisma.classroom.create({
     *   data: {
     *     // ... data to create a Classroom
     *   }
     * })
     * 
    **/
    create<T extends ClassroomCreateArgs>(
      args: SelectSubset<T, ClassroomCreateArgs>
    ): Prisma__ClassroomClient<ClassroomGetPayload<T>>

    /**
     * Create many Classrooms.
     *     @param {ClassroomCreateManyArgs} args - Arguments to create many Classrooms.
     *     @example
     *     // Create many Classrooms
     *     const classroom = await prisma.classroom.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClassroomCreateManyArgs>(
      args?: SelectSubset<T, ClassroomCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Classroom.
     * @param {ClassroomDeleteArgs} args - Arguments to delete one Classroom.
     * @example
     * // Delete one Classroom
     * const Classroom = await prisma.classroom.delete({
     *   where: {
     *     // ... filter to delete one Classroom
     *   }
     * })
     * 
    **/
    delete<T extends ClassroomDeleteArgs>(
      args: SelectSubset<T, ClassroomDeleteArgs>
    ): Prisma__ClassroomClient<ClassroomGetPayload<T>>

    /**
     * Update one Classroom.
     * @param {ClassroomUpdateArgs} args - Arguments to update one Classroom.
     * @example
     * // Update one Classroom
     * const classroom = await prisma.classroom.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClassroomUpdateArgs>(
      args: SelectSubset<T, ClassroomUpdateArgs>
    ): Prisma__ClassroomClient<ClassroomGetPayload<T>>

    /**
     * Delete zero or more Classrooms.
     * @param {ClassroomDeleteManyArgs} args - Arguments to filter Classrooms to delete.
     * @example
     * // Delete a few Classrooms
     * const { count } = await prisma.classroom.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClassroomDeleteManyArgs>(
      args?: SelectSubset<T, ClassroomDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classrooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassroomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classrooms
     * const classroom = await prisma.classroom.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClassroomUpdateManyArgs>(
      args: SelectSubset<T, ClassroomUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Classroom.
     * @param {ClassroomUpsertArgs} args - Arguments to update or create a Classroom.
     * @example
     * // Update or create a Classroom
     * const classroom = await prisma.classroom.upsert({
     *   create: {
     *     // ... data to create a Classroom
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Classroom we want to update
     *   }
     * })
    **/
    upsert<T extends ClassroomUpsertArgs>(
      args: SelectSubset<T, ClassroomUpsertArgs>
    ): Prisma__ClassroomClient<ClassroomGetPayload<T>>

    /**
     * Count the number of Classrooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassroomCountArgs} args - Arguments to filter Classrooms to count.
     * @example
     * // Count the number of Classrooms
     * const count = await prisma.classroom.count({
     *   where: {
     *     // ... the filter for the Classrooms we want to count
     *   }
     * })
    **/
    count<T extends ClassroomCountArgs>(
      args?: Subset<T, ClassroomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassroomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Classroom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassroomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassroomAggregateArgs>(args: Subset<T, ClassroomAggregateArgs>): Prisma.PrismaPromise<GetClassroomAggregateType<T>>

    /**
     * Group by Classroom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassroomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassroomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassroomGroupByArgs['orderBy'] }
        : { orderBy?: ClassroomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassroomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassroomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Classroom.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClassroomClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    teacher<T extends TeacherArgs= {}>(args?: Subset<T, TeacherArgs>): Prisma__TeacherClient<TeacherGetPayload<T> | Null>;

    discipline<T extends DisciplineArgs= {}>(args?: Subset<T, DisciplineArgs>): Prisma__DisciplineClient<DisciplineGetPayload<T> | Null>;

    room<T extends RoomArgs= {}>(args?: Subset<T, RoomArgs>): Prisma__RoomClient<RoomGetPayload<T> | Null>;

    course<T extends CourseArgs= {}>(args?: Subset<T, CourseArgs>): Prisma__CourseClient<CourseGetPayload<T> | Null>;

    class<T extends ClassArgs= {}>(args?: Subset<T, ClassArgs>): Prisma__ClassClient<ClassGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Classroom base type for findUnique actions
   */
  export type ClassroomFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassroomInclude | null
    /**
     * Filter, which Classroom to fetch.
     */
    where: ClassroomWhereUniqueInput
  }

  /**
   * Classroom findUnique
   */
  export interface ClassroomFindUniqueArgs extends ClassroomFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Classroom findUniqueOrThrow
   */
  export type ClassroomFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassroomInclude | null
    /**
     * Filter, which Classroom to fetch.
     */
    where: ClassroomWhereUniqueInput
  }


  /**
   * Classroom base type for findFirst actions
   */
  export type ClassroomFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassroomInclude | null
    /**
     * Filter, which Classroom to fetch.
     */
    where?: ClassroomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classrooms to fetch.
     */
    orderBy?: Enumerable<ClassroomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classrooms.
     */
    cursor?: ClassroomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classrooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classrooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classrooms.
     */
    distinct?: Enumerable<ClassroomScalarFieldEnum>
  }

  /**
   * Classroom findFirst
   */
  export interface ClassroomFindFirstArgs extends ClassroomFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Classroom findFirstOrThrow
   */
  export type ClassroomFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassroomInclude | null
    /**
     * Filter, which Classroom to fetch.
     */
    where?: ClassroomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classrooms to fetch.
     */
    orderBy?: Enumerable<ClassroomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classrooms.
     */
    cursor?: ClassroomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classrooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classrooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classrooms.
     */
    distinct?: Enumerable<ClassroomScalarFieldEnum>
  }


  /**
   * Classroom findMany
   */
  export type ClassroomFindManyArgs = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassroomInclude | null
    /**
     * Filter, which Classrooms to fetch.
     */
    where?: ClassroomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classrooms to fetch.
     */
    orderBy?: Enumerable<ClassroomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Classrooms.
     */
    cursor?: ClassroomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classrooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classrooms.
     */
    skip?: number
    distinct?: Enumerable<ClassroomScalarFieldEnum>
  }


  /**
   * Classroom create
   */
  export type ClassroomCreateArgs = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassroomInclude | null
    /**
     * The data needed to create a Classroom.
     */
    data: XOR<ClassroomCreateInput, ClassroomUncheckedCreateInput>
  }


  /**
   * Classroom createMany
   */
  export type ClassroomCreateManyArgs = {
    /**
     * The data used to create many Classrooms.
     */
    data: Enumerable<ClassroomCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Classroom update
   */
  export type ClassroomUpdateArgs = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassroomInclude | null
    /**
     * The data needed to update a Classroom.
     */
    data: XOR<ClassroomUpdateInput, ClassroomUncheckedUpdateInput>
    /**
     * Choose, which Classroom to update.
     */
    where: ClassroomWhereUniqueInput
  }


  /**
   * Classroom updateMany
   */
  export type ClassroomUpdateManyArgs = {
    /**
     * The data used to update Classrooms.
     */
    data: XOR<ClassroomUpdateManyMutationInput, ClassroomUncheckedUpdateManyInput>
    /**
     * Filter which Classrooms to update
     */
    where?: ClassroomWhereInput
  }


  /**
   * Classroom upsert
   */
  export type ClassroomUpsertArgs = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassroomInclude | null
    /**
     * The filter to search for the Classroom to update in case it exists.
     */
    where: ClassroomWhereUniqueInput
    /**
     * In case the Classroom found by the `where` argument doesn't exist, create a new Classroom with this data.
     */
    create: XOR<ClassroomCreateInput, ClassroomUncheckedCreateInput>
    /**
     * In case the Classroom was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassroomUpdateInput, ClassroomUncheckedUpdateInput>
  }


  /**
   * Classroom delete
   */
  export type ClassroomDeleteArgs = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassroomInclude | null
    /**
     * Filter which Classroom to delete.
     */
    where: ClassroomWhereUniqueInput
  }


  /**
   * Classroom deleteMany
   */
  export type ClassroomDeleteManyArgs = {
    /**
     * Filter which Classrooms to delete
     */
    where?: ClassroomWhereInput
  }


  /**
   * Classroom without action
   */
  export type ClassroomArgs = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClassroomInclude | null
  }



  /**
   * Enums
   */

  export const ClassScalarFieldEnum: {
    id: 'id',
    name: 'name',
    pariod: 'pariod',
    num_students: 'num_students',
    course_id: 'course_id'
  };

  export type ClassScalarFieldEnum = (typeof ClassScalarFieldEnum)[keyof typeof ClassScalarFieldEnum]


  export const ClassroomScalarFieldEnum: {
    id: 'id',
    amount: 'amount',
    duration: 'duration',
    teacher_id: 'teacher_id',
    discipline_id: 'discipline_id',
    room_id: 'room_id',
    course_id: 'course_id',
    class_id: 'class_id'
  };

  export type ClassroomScalarFieldEnum = (typeof ClassroomScalarFieldEnum)[keyof typeof ClassroomScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    shift: 'shift',
    grouping: 'grouping'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const DisciplineScalarFieldEnum: {
    id: 'id',
    name: 'name',
    period: 'period'
  };

  export type DisciplineScalarFieldEnum = (typeof DisciplineScalarFieldEnum)[keyof typeof DisciplineScalarFieldEnum]


  export const GroupsScalarFieldEnum: {
    id: 'id',
    group1: 'group1',
    group2: 'group2',
    group3: 'group3',
    group4: 'group4',
    class_id: 'class_id'
  };

  export type GroupsScalarFieldEnum = (typeof GroupsScalarFieldEnum)[keyof typeof GroupsScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const RestrictionScalarFieldEnum: {
    id: 'id',
    Period: 'Period',
    Day: 'Day',
    teacher_id: 'teacher_id'
  };

  export type RestrictionScalarFieldEnum = (typeof RestrictionScalarFieldEnum)[keyof typeof RestrictionScalarFieldEnum]


  export const RoomScalarFieldEnum: {
    id: 'id',
    name: 'name',
    fixed: 'fixed',
    building: 'building',
    capacity: 'capacity',
    class_id: 'class_id'
  };

  export type RoomScalarFieldEnum = (typeof RoomScalarFieldEnum)[keyof typeof RoomScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TeacherScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email'
  };

  export type TeacherScalarFieldEnum = (typeof TeacherScalarFieldEnum)[keyof typeof TeacherScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type TeacherWhereInput = {
    AND?: Enumerable<TeacherWhereInput>
    OR?: Enumerable<TeacherWhereInput>
    NOT?: Enumerable<TeacherWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    email?: StringFilter | string
    restrictions?: RestrictionListRelationFilter
    classrooms?: ClassroomListRelationFilter
  }

  export type TeacherOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    restrictions?: RestrictionOrderByRelationAggregateInput
    classrooms?: ClassroomOrderByRelationAggregateInput
  }

  export type TeacherWhereUniqueInput = {
    id?: string
  }

  export type TeacherOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    _count?: TeacherCountOrderByAggregateInput
    _max?: TeacherMaxOrderByAggregateInput
    _min?: TeacherMinOrderByAggregateInput
  }

  export type TeacherScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TeacherScalarWhereWithAggregatesInput>
    OR?: Enumerable<TeacherScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TeacherScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
  }

  export type RestrictionWhereInput = {
    AND?: Enumerable<RestrictionWhereInput>
    OR?: Enumerable<RestrictionWhereInput>
    NOT?: Enumerable<RestrictionWhereInput>
    id?: StringFilter | string
    Period?: StringFilter | string
    Day?: IntFilter | number
    teacher_id?: StringFilter | string
    teacher?: XOR<TeacherRelationFilter, TeacherWhereInput>
  }

  export type RestrictionOrderByWithRelationInput = {
    id?: SortOrder
    Period?: SortOrder
    Day?: SortOrder
    teacher_id?: SortOrder
    teacher?: TeacherOrderByWithRelationInput
  }

  export type RestrictionWhereUniqueInput = {
    id?: string
  }

  export type RestrictionOrderByWithAggregationInput = {
    id?: SortOrder
    Period?: SortOrder
    Day?: SortOrder
    teacher_id?: SortOrder
    _count?: RestrictionCountOrderByAggregateInput
    _avg?: RestrictionAvgOrderByAggregateInput
    _max?: RestrictionMaxOrderByAggregateInput
    _min?: RestrictionMinOrderByAggregateInput
    _sum?: RestrictionSumOrderByAggregateInput
  }

  export type RestrictionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RestrictionScalarWhereWithAggregatesInput>
    OR?: Enumerable<RestrictionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RestrictionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    Period?: StringWithAggregatesFilter | string
    Day?: IntWithAggregatesFilter | number
    teacher_id?: StringWithAggregatesFilter | string
  }

  export type DisciplineWhereInput = {
    AND?: Enumerable<DisciplineWhereInput>
    OR?: Enumerable<DisciplineWhereInput>
    NOT?: Enumerable<DisciplineWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    period?: IntFilter | number
    classrooms?: ClassroomListRelationFilter
  }

  export type DisciplineOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    period?: SortOrder
    classrooms?: ClassroomOrderByRelationAggregateInput
  }

  export type DisciplineWhereUniqueInput = {
    id?: string
  }

  export type DisciplineOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    period?: SortOrder
    _count?: DisciplineCountOrderByAggregateInput
    _avg?: DisciplineAvgOrderByAggregateInput
    _max?: DisciplineMaxOrderByAggregateInput
    _min?: DisciplineMinOrderByAggregateInput
    _sum?: DisciplineSumOrderByAggregateInput
  }

  export type DisciplineScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DisciplineScalarWhereWithAggregatesInput>
    OR?: Enumerable<DisciplineScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DisciplineScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    period?: IntWithAggregatesFilter | number
  }

  export type CourseWhereInput = {
    AND?: Enumerable<CourseWhereInput>
    OR?: Enumerable<CourseWhereInput>
    NOT?: Enumerable<CourseWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    shift?: StringFilter | string
    grouping?: IntFilter | number
    classes?: ClassListRelationFilter
    classrooms?: ClassroomListRelationFilter
  }

  export type CourseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    shift?: SortOrder
    grouping?: SortOrder
    classes?: ClassOrderByRelationAggregateInput
    classrooms?: ClassroomOrderByRelationAggregateInput
  }

  export type CourseWhereUniqueInput = {
    id?: string
  }

  export type CourseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    shift?: SortOrder
    grouping?: SortOrder
    _count?: CourseCountOrderByAggregateInput
    _avg?: CourseAvgOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
    _sum?: CourseSumOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CourseScalarWhereWithAggregatesInput>
    OR?: Enumerable<CourseScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CourseScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    shift?: StringWithAggregatesFilter | string
    grouping?: IntWithAggregatesFilter | number
  }

  export type ClassWhereInput = {
    AND?: Enumerable<ClassWhereInput>
    OR?: Enumerable<ClassWhereInput>
    NOT?: Enumerable<ClassWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    pariod?: IntFilter | number
    num_students?: IntFilter | number
    course_id?: StringFilter | string
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    groups?: GroupsListRelationFilter
    rooms?: RoomListRelationFilter
    classrooms?: ClassroomListRelationFilter
  }

  export type ClassOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    pariod?: SortOrder
    num_students?: SortOrder
    course_id?: SortOrder
    course?: CourseOrderByWithRelationInput
    groups?: GroupsOrderByRelationAggregateInput
    rooms?: RoomOrderByRelationAggregateInput
    classrooms?: ClassroomOrderByRelationAggregateInput
  }

  export type ClassWhereUniqueInput = {
    id?: string
  }

  export type ClassOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    pariod?: SortOrder
    num_students?: SortOrder
    course_id?: SortOrder
    _count?: ClassCountOrderByAggregateInput
    _avg?: ClassAvgOrderByAggregateInput
    _max?: ClassMaxOrderByAggregateInput
    _min?: ClassMinOrderByAggregateInput
    _sum?: ClassSumOrderByAggregateInput
  }

  export type ClassScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ClassScalarWhereWithAggregatesInput>
    OR?: Enumerable<ClassScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ClassScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    pariod?: IntWithAggregatesFilter | number
    num_students?: IntWithAggregatesFilter | number
    course_id?: StringWithAggregatesFilter | string
  }

  export type GroupsWhereInput = {
    AND?: Enumerable<GroupsWhereInput>
    OR?: Enumerable<GroupsWhereInput>
    NOT?: Enumerable<GroupsWhereInput>
    id?: StringFilter | string
    group1?: StringFilter | string
    group2?: StringFilter | string
    group3?: StringFilter | string
    group4?: StringFilter | string
    class_id?: StringFilter | string
    class?: XOR<ClassRelationFilter, ClassWhereInput>
  }

  export type GroupsOrderByWithRelationInput = {
    id?: SortOrder
    group1?: SortOrder
    group2?: SortOrder
    group3?: SortOrder
    group4?: SortOrder
    class_id?: SortOrder
    class?: ClassOrderByWithRelationInput
  }

  export type GroupsWhereUniqueInput = {
    id?: string
  }

  export type GroupsOrderByWithAggregationInput = {
    id?: SortOrder
    group1?: SortOrder
    group2?: SortOrder
    group3?: SortOrder
    group4?: SortOrder
    class_id?: SortOrder
    _count?: GroupsCountOrderByAggregateInput
    _max?: GroupsMaxOrderByAggregateInput
    _min?: GroupsMinOrderByAggregateInput
  }

  export type GroupsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GroupsScalarWhereWithAggregatesInput>
    OR?: Enumerable<GroupsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GroupsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    group1?: StringWithAggregatesFilter | string
    group2?: StringWithAggregatesFilter | string
    group3?: StringWithAggregatesFilter | string
    group4?: StringWithAggregatesFilter | string
    class_id?: StringWithAggregatesFilter | string
  }

  export type RoomWhereInput = {
    AND?: Enumerable<RoomWhereInput>
    OR?: Enumerable<RoomWhereInput>
    NOT?: Enumerable<RoomWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    fixed?: BoolFilter | boolean
    building?: StringFilter | string
    capacity?: IntFilter | number
    class_id?: StringNullableFilter | string | null
    class?: XOR<ClassRelationFilter, ClassWhereInput> | null
    classrooms?: ClassroomListRelationFilter
  }

  export type RoomOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    fixed?: SortOrder
    building?: SortOrder
    capacity?: SortOrder
    class_id?: SortOrder
    class?: ClassOrderByWithRelationInput
    classrooms?: ClassroomOrderByRelationAggregateInput
  }

  export type RoomWhereUniqueInput = {
    id?: string
  }

  export type RoomOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    fixed?: SortOrder
    building?: SortOrder
    capacity?: SortOrder
    class_id?: SortOrder
    _count?: RoomCountOrderByAggregateInput
    _avg?: RoomAvgOrderByAggregateInput
    _max?: RoomMaxOrderByAggregateInput
    _min?: RoomMinOrderByAggregateInput
    _sum?: RoomSumOrderByAggregateInput
  }

  export type RoomScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RoomScalarWhereWithAggregatesInput>
    OR?: Enumerable<RoomScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RoomScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    fixed?: BoolWithAggregatesFilter | boolean
    building?: StringWithAggregatesFilter | string
    capacity?: IntWithAggregatesFilter | number
    class_id?: StringNullableWithAggregatesFilter | string | null
  }

  export type ClassroomWhereInput = {
    AND?: Enumerable<ClassroomWhereInput>
    OR?: Enumerable<ClassroomWhereInput>
    NOT?: Enumerable<ClassroomWhereInput>
    id?: StringFilter | string
    amount?: IntFilter | number
    duration?: IntFilter | number
    teacher_id?: StringFilter | string
    discipline_id?: StringFilter | string
    room_id?: StringFilter | string
    course_id?: StringFilter | string
    class_id?: StringFilter | string
    teacher?: XOR<TeacherRelationFilter, TeacherWhereInput>
    discipline?: XOR<DisciplineRelationFilter, DisciplineWhereInput>
    room?: XOR<RoomRelationFilter, RoomWhereInput>
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    class?: XOR<ClassRelationFilter, ClassWhereInput>
  }

  export type ClassroomOrderByWithRelationInput = {
    id?: SortOrder
    amount?: SortOrder
    duration?: SortOrder
    teacher_id?: SortOrder
    discipline_id?: SortOrder
    room_id?: SortOrder
    course_id?: SortOrder
    class_id?: SortOrder
    teacher?: TeacherOrderByWithRelationInput
    discipline?: DisciplineOrderByWithRelationInput
    room?: RoomOrderByWithRelationInput
    course?: CourseOrderByWithRelationInput
    class?: ClassOrderByWithRelationInput
  }

  export type ClassroomWhereUniqueInput = {
    id?: string
  }

  export type ClassroomOrderByWithAggregationInput = {
    id?: SortOrder
    amount?: SortOrder
    duration?: SortOrder
    teacher_id?: SortOrder
    discipline_id?: SortOrder
    room_id?: SortOrder
    course_id?: SortOrder
    class_id?: SortOrder
    _count?: ClassroomCountOrderByAggregateInput
    _avg?: ClassroomAvgOrderByAggregateInput
    _max?: ClassroomMaxOrderByAggregateInput
    _min?: ClassroomMinOrderByAggregateInput
    _sum?: ClassroomSumOrderByAggregateInput
  }

  export type ClassroomScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ClassroomScalarWhereWithAggregatesInput>
    OR?: Enumerable<ClassroomScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ClassroomScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    amount?: IntWithAggregatesFilter | number
    duration?: IntWithAggregatesFilter | number
    teacher_id?: StringWithAggregatesFilter | string
    discipline_id?: StringWithAggregatesFilter | string
    room_id?: StringWithAggregatesFilter | string
    course_id?: StringWithAggregatesFilter | string
    class_id?: StringWithAggregatesFilter | string
  }

  export type TeacherCreateInput = {
    id?: string
    name: string
    email: string
    restrictions?: RestrictionCreateNestedManyWithoutTeacherInput
    classrooms?: ClassroomCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    restrictions?: RestrictionUncheckedCreateNestedManyWithoutTeacherInput
    classrooms?: ClassroomUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    restrictions?: RestrictionUpdateManyWithoutTeacherNestedInput
    classrooms?: ClassroomUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    restrictions?: RestrictionUncheckedUpdateManyWithoutTeacherNestedInput
    classrooms?: ClassroomUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherCreateManyInput = {
    id?: string
    name: string
    email: string
  }

  export type TeacherUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type RestrictionCreateInput = {
    id?: string
    Period: string
    Day: number
    teacher: TeacherCreateNestedOneWithoutRestrictionsInput
  }

  export type RestrictionUncheckedCreateInput = {
    id?: string
    Period: string
    Day: number
    teacher_id: string
  }

  export type RestrictionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Period?: StringFieldUpdateOperationsInput | string
    Day?: IntFieldUpdateOperationsInput | number
    teacher?: TeacherUpdateOneRequiredWithoutRestrictionsNestedInput
  }

  export type RestrictionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Period?: StringFieldUpdateOperationsInput | string
    Day?: IntFieldUpdateOperationsInput | number
    teacher_id?: StringFieldUpdateOperationsInput | string
  }

  export type RestrictionCreateManyInput = {
    id?: string
    Period: string
    Day: number
    teacher_id: string
  }

  export type RestrictionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    Period?: StringFieldUpdateOperationsInput | string
    Day?: IntFieldUpdateOperationsInput | number
  }

  export type RestrictionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    Period?: StringFieldUpdateOperationsInput | string
    Day?: IntFieldUpdateOperationsInput | number
    teacher_id?: StringFieldUpdateOperationsInput | string
  }

  export type DisciplineCreateInput = {
    id?: string
    name: string
    period: number
    classrooms?: ClassroomCreateNestedManyWithoutDisciplineInput
  }

  export type DisciplineUncheckedCreateInput = {
    id?: string
    name: string
    period: number
    classrooms?: ClassroomUncheckedCreateNestedManyWithoutDisciplineInput
  }

  export type DisciplineUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    period?: IntFieldUpdateOperationsInput | number
    classrooms?: ClassroomUpdateManyWithoutDisciplineNestedInput
  }

  export type DisciplineUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    period?: IntFieldUpdateOperationsInput | number
    classrooms?: ClassroomUncheckedUpdateManyWithoutDisciplineNestedInput
  }

  export type DisciplineCreateManyInput = {
    id?: string
    name: string
    period: number
  }

  export type DisciplineUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    period?: IntFieldUpdateOperationsInput | number
  }

  export type DisciplineUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    period?: IntFieldUpdateOperationsInput | number
  }

  export type CourseCreateInput = {
    id?: string
    name: string
    shift: string
    grouping: number
    classes?: ClassCreateNestedManyWithoutCourseInput
    classrooms?: ClassroomCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateInput = {
    id?: string
    name: string
    shift: string
    grouping: number
    classes?: ClassUncheckedCreateNestedManyWithoutCourseInput
    classrooms?: ClassroomUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shift?: StringFieldUpdateOperationsInput | string
    grouping?: IntFieldUpdateOperationsInput | number
    classes?: ClassUpdateManyWithoutCourseNestedInput
    classrooms?: ClassroomUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shift?: StringFieldUpdateOperationsInput | string
    grouping?: IntFieldUpdateOperationsInput | number
    classes?: ClassUncheckedUpdateManyWithoutCourseNestedInput
    classrooms?: ClassroomUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseCreateManyInput = {
    id?: string
    name: string
    shift: string
    grouping: number
  }

  export type CourseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shift?: StringFieldUpdateOperationsInput | string
    grouping?: IntFieldUpdateOperationsInput | number
  }

  export type CourseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shift?: StringFieldUpdateOperationsInput | string
    grouping?: IntFieldUpdateOperationsInput | number
  }

  export type ClassCreateInput = {
    id?: string
    name: string
    pariod: number
    num_students: number
    course: CourseCreateNestedOneWithoutClassesInput
    groups?: GroupsCreateNestedManyWithoutClassInput
    rooms?: RoomCreateNestedManyWithoutClassInput
    classrooms?: ClassroomCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateInput = {
    id?: string
    name: string
    pariod: number
    num_students: number
    course_id: string
    groups?: GroupsUncheckedCreateNestedManyWithoutClassInput
    rooms?: RoomUncheckedCreateNestedManyWithoutClassInput
    classrooms?: ClassroomUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pariod?: IntFieldUpdateOperationsInput | number
    num_students?: IntFieldUpdateOperationsInput | number
    course?: CourseUpdateOneRequiredWithoutClassesNestedInput
    groups?: GroupsUpdateManyWithoutClassNestedInput
    rooms?: RoomUpdateManyWithoutClassNestedInput
    classrooms?: ClassroomUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pariod?: IntFieldUpdateOperationsInput | number
    num_students?: IntFieldUpdateOperationsInput | number
    course_id?: StringFieldUpdateOperationsInput | string
    groups?: GroupsUncheckedUpdateManyWithoutClassNestedInput
    rooms?: RoomUncheckedUpdateManyWithoutClassNestedInput
    classrooms?: ClassroomUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassCreateManyInput = {
    id?: string
    name: string
    pariod: number
    num_students: number
    course_id: string
  }

  export type ClassUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pariod?: IntFieldUpdateOperationsInput | number
    num_students?: IntFieldUpdateOperationsInput | number
  }

  export type ClassUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pariod?: IntFieldUpdateOperationsInput | number
    num_students?: IntFieldUpdateOperationsInput | number
    course_id?: StringFieldUpdateOperationsInput | string
  }

  export type GroupsCreateInput = {
    id?: string
    group1: string
    group2: string
    group3: string
    group4: string
    class: ClassCreateNestedOneWithoutGroupsInput
  }

  export type GroupsUncheckedCreateInput = {
    id?: string
    group1: string
    group2: string
    group3: string
    group4: string
    class_id: string
  }

  export type GroupsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    group1?: StringFieldUpdateOperationsInput | string
    group2?: StringFieldUpdateOperationsInput | string
    group3?: StringFieldUpdateOperationsInput | string
    group4?: StringFieldUpdateOperationsInput | string
    class?: ClassUpdateOneRequiredWithoutGroupsNestedInput
  }

  export type GroupsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    group1?: StringFieldUpdateOperationsInput | string
    group2?: StringFieldUpdateOperationsInput | string
    group3?: StringFieldUpdateOperationsInput | string
    group4?: StringFieldUpdateOperationsInput | string
    class_id?: StringFieldUpdateOperationsInput | string
  }

  export type GroupsCreateManyInput = {
    id?: string
    group1: string
    group2: string
    group3: string
    group4: string
    class_id: string
  }

  export type GroupsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    group1?: StringFieldUpdateOperationsInput | string
    group2?: StringFieldUpdateOperationsInput | string
    group3?: StringFieldUpdateOperationsInput | string
    group4?: StringFieldUpdateOperationsInput | string
  }

  export type GroupsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    group1?: StringFieldUpdateOperationsInput | string
    group2?: StringFieldUpdateOperationsInput | string
    group3?: StringFieldUpdateOperationsInput | string
    group4?: StringFieldUpdateOperationsInput | string
    class_id?: StringFieldUpdateOperationsInput | string
  }

  export type RoomCreateInput = {
    id?: string
    name: string
    fixed: boolean
    building: string
    capacity: number
    class?: ClassCreateNestedOneWithoutRoomsInput
    classrooms?: ClassroomCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateInput = {
    id?: string
    name: string
    fixed: boolean
    building: string
    capacity: number
    class_id?: string | null
    classrooms?: ClassroomUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fixed?: BoolFieldUpdateOperationsInput | boolean
    building?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    class?: ClassUpdateOneWithoutRoomsNestedInput
    classrooms?: ClassroomUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fixed?: BoolFieldUpdateOperationsInput | boolean
    building?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    class_id?: NullableStringFieldUpdateOperationsInput | string | null
    classrooms?: ClassroomUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type RoomCreateManyInput = {
    id?: string
    name: string
    fixed: boolean
    building: string
    capacity: number
    class_id?: string | null
  }

  export type RoomUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fixed?: BoolFieldUpdateOperationsInput | boolean
    building?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
  }

  export type RoomUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fixed?: BoolFieldUpdateOperationsInput | boolean
    building?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    class_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClassroomCreateInput = {
    id?: string
    amount: number
    duration: number
    teacher: TeacherCreateNestedOneWithoutClassroomsInput
    discipline: DisciplineCreateNestedOneWithoutClassroomsInput
    room: RoomCreateNestedOneWithoutClassroomsInput
    course: CourseCreateNestedOneWithoutClassroomsInput
    class: ClassCreateNestedOneWithoutClassroomsInput
  }

  export type ClassroomUncheckedCreateInput = {
    id?: string
    amount: number
    duration: number
    teacher_id: string
    discipline_id: string
    room_id: string
    course_id: string
    class_id: string
  }

  export type ClassroomUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    teacher?: TeacherUpdateOneRequiredWithoutClassroomsNestedInput
    discipline?: DisciplineUpdateOneRequiredWithoutClassroomsNestedInput
    room?: RoomUpdateOneRequiredWithoutClassroomsNestedInput
    course?: CourseUpdateOneRequiredWithoutClassroomsNestedInput
    class?: ClassUpdateOneRequiredWithoutClassroomsNestedInput
  }

  export type ClassroomUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    teacher_id?: StringFieldUpdateOperationsInput | string
    discipline_id?: StringFieldUpdateOperationsInput | string
    room_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    class_id?: StringFieldUpdateOperationsInput | string
  }

  export type ClassroomCreateManyInput = {
    id?: string
    amount: number
    duration: number
    teacher_id: string
    discipline_id: string
    room_id: string
    course_id: string
    class_id: string
  }

  export type ClassroomUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
  }

  export type ClassroomUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    teacher_id?: StringFieldUpdateOperationsInput | string
    discipline_id?: StringFieldUpdateOperationsInput | string
    room_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    class_id?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type RestrictionListRelationFilter = {
    every?: RestrictionWhereInput
    some?: RestrictionWhereInput
    none?: RestrictionWhereInput
  }

  export type ClassroomListRelationFilter = {
    every?: ClassroomWhereInput
    some?: ClassroomWhereInput
    none?: ClassroomWhereInput
  }

  export type RestrictionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassroomOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeacherCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
  }

  export type TeacherMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
  }

  export type TeacherMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type TeacherRelationFilter = {
    is?: TeacherWhereInput
    isNot?: TeacherWhereInput
  }

  export type RestrictionCountOrderByAggregateInput = {
    id?: SortOrder
    Period?: SortOrder
    Day?: SortOrder
    teacher_id?: SortOrder
  }

  export type RestrictionAvgOrderByAggregateInput = {
    Day?: SortOrder
  }

  export type RestrictionMaxOrderByAggregateInput = {
    id?: SortOrder
    Period?: SortOrder
    Day?: SortOrder
    teacher_id?: SortOrder
  }

  export type RestrictionMinOrderByAggregateInput = {
    id?: SortOrder
    Period?: SortOrder
    Day?: SortOrder
    teacher_id?: SortOrder
  }

  export type RestrictionSumOrderByAggregateInput = {
    Day?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DisciplineCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    period?: SortOrder
  }

  export type DisciplineAvgOrderByAggregateInput = {
    period?: SortOrder
  }

  export type DisciplineMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    period?: SortOrder
  }

  export type DisciplineMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    period?: SortOrder
  }

  export type DisciplineSumOrderByAggregateInput = {
    period?: SortOrder
  }

  export type ClassListRelationFilter = {
    every?: ClassWhereInput
    some?: ClassWhereInput
    none?: ClassWhereInput
  }

  export type ClassOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    shift?: SortOrder
    grouping?: SortOrder
  }

  export type CourseAvgOrderByAggregateInput = {
    grouping?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    shift?: SortOrder
    grouping?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    shift?: SortOrder
    grouping?: SortOrder
  }

  export type CourseSumOrderByAggregateInput = {
    grouping?: SortOrder
  }

  export type CourseRelationFilter = {
    is?: CourseWhereInput
    isNot?: CourseWhereInput
  }

  export type GroupsListRelationFilter = {
    every?: GroupsWhereInput
    some?: GroupsWhereInput
    none?: GroupsWhereInput
  }

  export type RoomListRelationFilter = {
    every?: RoomWhereInput
    some?: RoomWhereInput
    none?: RoomWhereInput
  }

  export type GroupsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoomOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    pariod?: SortOrder
    num_students?: SortOrder
    course_id?: SortOrder
  }

  export type ClassAvgOrderByAggregateInput = {
    pariod?: SortOrder
    num_students?: SortOrder
  }

  export type ClassMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    pariod?: SortOrder
    num_students?: SortOrder
    course_id?: SortOrder
  }

  export type ClassMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    pariod?: SortOrder
    num_students?: SortOrder
    course_id?: SortOrder
  }

  export type ClassSumOrderByAggregateInput = {
    pariod?: SortOrder
    num_students?: SortOrder
  }

  export type ClassRelationFilter = {
    is?: ClassWhereInput
    isNot?: ClassWhereInput
  }

  export type GroupsCountOrderByAggregateInput = {
    id?: SortOrder
    group1?: SortOrder
    group2?: SortOrder
    group3?: SortOrder
    group4?: SortOrder
    class_id?: SortOrder
  }

  export type GroupsMaxOrderByAggregateInput = {
    id?: SortOrder
    group1?: SortOrder
    group2?: SortOrder
    group3?: SortOrder
    group4?: SortOrder
    class_id?: SortOrder
  }

  export type GroupsMinOrderByAggregateInput = {
    id?: SortOrder
    group1?: SortOrder
    group2?: SortOrder
    group3?: SortOrder
    group4?: SortOrder
    class_id?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type RoomCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    fixed?: SortOrder
    building?: SortOrder
    capacity?: SortOrder
    class_id?: SortOrder
  }

  export type RoomAvgOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type RoomMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    fixed?: SortOrder
    building?: SortOrder
    capacity?: SortOrder
    class_id?: SortOrder
  }

  export type RoomMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    fixed?: SortOrder
    building?: SortOrder
    capacity?: SortOrder
    class_id?: SortOrder
  }

  export type RoomSumOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DisciplineRelationFilter = {
    is?: DisciplineWhereInput
    isNot?: DisciplineWhereInput
  }

  export type RoomRelationFilter = {
    is?: RoomWhereInput
    isNot?: RoomWhereInput
  }

  export type ClassroomCountOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    duration?: SortOrder
    teacher_id?: SortOrder
    discipline_id?: SortOrder
    room_id?: SortOrder
    course_id?: SortOrder
    class_id?: SortOrder
  }

  export type ClassroomAvgOrderByAggregateInput = {
    amount?: SortOrder
    duration?: SortOrder
  }

  export type ClassroomMaxOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    duration?: SortOrder
    teacher_id?: SortOrder
    discipline_id?: SortOrder
    room_id?: SortOrder
    course_id?: SortOrder
    class_id?: SortOrder
  }

  export type ClassroomMinOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    duration?: SortOrder
    teacher_id?: SortOrder
    discipline_id?: SortOrder
    room_id?: SortOrder
    course_id?: SortOrder
    class_id?: SortOrder
  }

  export type ClassroomSumOrderByAggregateInput = {
    amount?: SortOrder
    duration?: SortOrder
  }

  export type RestrictionCreateNestedManyWithoutTeacherInput = {
    create?: XOR<Enumerable<RestrictionCreateWithoutTeacherInput>, Enumerable<RestrictionUncheckedCreateWithoutTeacherInput>>
    connectOrCreate?: Enumerable<RestrictionCreateOrConnectWithoutTeacherInput>
    createMany?: RestrictionCreateManyTeacherInputEnvelope
    connect?: Enumerable<RestrictionWhereUniqueInput>
  }

  export type ClassroomCreateNestedManyWithoutTeacherInput = {
    create?: XOR<Enumerable<ClassroomCreateWithoutTeacherInput>, Enumerable<ClassroomUncheckedCreateWithoutTeacherInput>>
    connectOrCreate?: Enumerable<ClassroomCreateOrConnectWithoutTeacherInput>
    createMany?: ClassroomCreateManyTeacherInputEnvelope
    connect?: Enumerable<ClassroomWhereUniqueInput>
  }

  export type RestrictionUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<Enumerable<RestrictionCreateWithoutTeacherInput>, Enumerable<RestrictionUncheckedCreateWithoutTeacherInput>>
    connectOrCreate?: Enumerable<RestrictionCreateOrConnectWithoutTeacherInput>
    createMany?: RestrictionCreateManyTeacherInputEnvelope
    connect?: Enumerable<RestrictionWhereUniqueInput>
  }

  export type ClassroomUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<Enumerable<ClassroomCreateWithoutTeacherInput>, Enumerable<ClassroomUncheckedCreateWithoutTeacherInput>>
    connectOrCreate?: Enumerable<ClassroomCreateOrConnectWithoutTeacherInput>
    createMany?: ClassroomCreateManyTeacherInputEnvelope
    connect?: Enumerable<ClassroomWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type RestrictionUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<Enumerable<RestrictionCreateWithoutTeacherInput>, Enumerable<RestrictionUncheckedCreateWithoutTeacherInput>>
    connectOrCreate?: Enumerable<RestrictionCreateOrConnectWithoutTeacherInput>
    upsert?: Enumerable<RestrictionUpsertWithWhereUniqueWithoutTeacherInput>
    createMany?: RestrictionCreateManyTeacherInputEnvelope
    set?: Enumerable<RestrictionWhereUniqueInput>
    disconnect?: Enumerable<RestrictionWhereUniqueInput>
    delete?: Enumerable<RestrictionWhereUniqueInput>
    connect?: Enumerable<RestrictionWhereUniqueInput>
    update?: Enumerable<RestrictionUpdateWithWhereUniqueWithoutTeacherInput>
    updateMany?: Enumerable<RestrictionUpdateManyWithWhereWithoutTeacherInput>
    deleteMany?: Enumerable<RestrictionScalarWhereInput>
  }

  export type ClassroomUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<Enumerable<ClassroomCreateWithoutTeacherInput>, Enumerable<ClassroomUncheckedCreateWithoutTeacherInput>>
    connectOrCreate?: Enumerable<ClassroomCreateOrConnectWithoutTeacherInput>
    upsert?: Enumerable<ClassroomUpsertWithWhereUniqueWithoutTeacherInput>
    createMany?: ClassroomCreateManyTeacherInputEnvelope
    set?: Enumerable<ClassroomWhereUniqueInput>
    disconnect?: Enumerable<ClassroomWhereUniqueInput>
    delete?: Enumerable<ClassroomWhereUniqueInput>
    connect?: Enumerable<ClassroomWhereUniqueInput>
    update?: Enumerable<ClassroomUpdateWithWhereUniqueWithoutTeacherInput>
    updateMany?: Enumerable<ClassroomUpdateManyWithWhereWithoutTeacherInput>
    deleteMany?: Enumerable<ClassroomScalarWhereInput>
  }

  export type RestrictionUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<Enumerable<RestrictionCreateWithoutTeacherInput>, Enumerable<RestrictionUncheckedCreateWithoutTeacherInput>>
    connectOrCreate?: Enumerable<RestrictionCreateOrConnectWithoutTeacherInput>
    upsert?: Enumerable<RestrictionUpsertWithWhereUniqueWithoutTeacherInput>
    createMany?: RestrictionCreateManyTeacherInputEnvelope
    set?: Enumerable<RestrictionWhereUniqueInput>
    disconnect?: Enumerable<RestrictionWhereUniqueInput>
    delete?: Enumerable<RestrictionWhereUniqueInput>
    connect?: Enumerable<RestrictionWhereUniqueInput>
    update?: Enumerable<RestrictionUpdateWithWhereUniqueWithoutTeacherInput>
    updateMany?: Enumerable<RestrictionUpdateManyWithWhereWithoutTeacherInput>
    deleteMany?: Enumerable<RestrictionScalarWhereInput>
  }

  export type ClassroomUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<Enumerable<ClassroomCreateWithoutTeacherInput>, Enumerable<ClassroomUncheckedCreateWithoutTeacherInput>>
    connectOrCreate?: Enumerable<ClassroomCreateOrConnectWithoutTeacherInput>
    upsert?: Enumerable<ClassroomUpsertWithWhereUniqueWithoutTeacherInput>
    createMany?: ClassroomCreateManyTeacherInputEnvelope
    set?: Enumerable<ClassroomWhereUniqueInput>
    disconnect?: Enumerable<ClassroomWhereUniqueInput>
    delete?: Enumerable<ClassroomWhereUniqueInput>
    connect?: Enumerable<ClassroomWhereUniqueInput>
    update?: Enumerable<ClassroomUpdateWithWhereUniqueWithoutTeacherInput>
    updateMany?: Enumerable<ClassroomUpdateManyWithWhereWithoutTeacherInput>
    deleteMany?: Enumerable<ClassroomScalarWhereInput>
  }

  export type TeacherCreateNestedOneWithoutRestrictionsInput = {
    create?: XOR<TeacherCreateWithoutRestrictionsInput, TeacherUncheckedCreateWithoutRestrictionsInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutRestrictionsInput
    connect?: TeacherWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TeacherUpdateOneRequiredWithoutRestrictionsNestedInput = {
    create?: XOR<TeacherCreateWithoutRestrictionsInput, TeacherUncheckedCreateWithoutRestrictionsInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutRestrictionsInput
    upsert?: TeacherUpsertWithoutRestrictionsInput
    connect?: TeacherWhereUniqueInput
    update?: XOR<TeacherUpdateWithoutRestrictionsInput, TeacherUncheckedUpdateWithoutRestrictionsInput>
  }

  export type ClassroomCreateNestedManyWithoutDisciplineInput = {
    create?: XOR<Enumerable<ClassroomCreateWithoutDisciplineInput>, Enumerable<ClassroomUncheckedCreateWithoutDisciplineInput>>
    connectOrCreate?: Enumerable<ClassroomCreateOrConnectWithoutDisciplineInput>
    createMany?: ClassroomCreateManyDisciplineInputEnvelope
    connect?: Enumerable<ClassroomWhereUniqueInput>
  }

  export type ClassroomUncheckedCreateNestedManyWithoutDisciplineInput = {
    create?: XOR<Enumerable<ClassroomCreateWithoutDisciplineInput>, Enumerable<ClassroomUncheckedCreateWithoutDisciplineInput>>
    connectOrCreate?: Enumerable<ClassroomCreateOrConnectWithoutDisciplineInput>
    createMany?: ClassroomCreateManyDisciplineInputEnvelope
    connect?: Enumerable<ClassroomWhereUniqueInput>
  }

  export type ClassroomUpdateManyWithoutDisciplineNestedInput = {
    create?: XOR<Enumerable<ClassroomCreateWithoutDisciplineInput>, Enumerable<ClassroomUncheckedCreateWithoutDisciplineInput>>
    connectOrCreate?: Enumerable<ClassroomCreateOrConnectWithoutDisciplineInput>
    upsert?: Enumerable<ClassroomUpsertWithWhereUniqueWithoutDisciplineInput>
    createMany?: ClassroomCreateManyDisciplineInputEnvelope
    set?: Enumerable<ClassroomWhereUniqueInput>
    disconnect?: Enumerable<ClassroomWhereUniqueInput>
    delete?: Enumerable<ClassroomWhereUniqueInput>
    connect?: Enumerable<ClassroomWhereUniqueInput>
    update?: Enumerable<ClassroomUpdateWithWhereUniqueWithoutDisciplineInput>
    updateMany?: Enumerable<ClassroomUpdateManyWithWhereWithoutDisciplineInput>
    deleteMany?: Enumerable<ClassroomScalarWhereInput>
  }

  export type ClassroomUncheckedUpdateManyWithoutDisciplineNestedInput = {
    create?: XOR<Enumerable<ClassroomCreateWithoutDisciplineInput>, Enumerable<ClassroomUncheckedCreateWithoutDisciplineInput>>
    connectOrCreate?: Enumerable<ClassroomCreateOrConnectWithoutDisciplineInput>
    upsert?: Enumerable<ClassroomUpsertWithWhereUniqueWithoutDisciplineInput>
    createMany?: ClassroomCreateManyDisciplineInputEnvelope
    set?: Enumerable<ClassroomWhereUniqueInput>
    disconnect?: Enumerable<ClassroomWhereUniqueInput>
    delete?: Enumerable<ClassroomWhereUniqueInput>
    connect?: Enumerable<ClassroomWhereUniqueInput>
    update?: Enumerable<ClassroomUpdateWithWhereUniqueWithoutDisciplineInput>
    updateMany?: Enumerable<ClassroomUpdateManyWithWhereWithoutDisciplineInput>
    deleteMany?: Enumerable<ClassroomScalarWhereInput>
  }

  export type ClassCreateNestedManyWithoutCourseInput = {
    create?: XOR<Enumerable<ClassCreateWithoutCourseInput>, Enumerable<ClassUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<ClassCreateOrConnectWithoutCourseInput>
    createMany?: ClassCreateManyCourseInputEnvelope
    connect?: Enumerable<ClassWhereUniqueInput>
  }

  export type ClassroomCreateNestedManyWithoutCourseInput = {
    create?: XOR<Enumerable<ClassroomCreateWithoutCourseInput>, Enumerable<ClassroomUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<ClassroomCreateOrConnectWithoutCourseInput>
    createMany?: ClassroomCreateManyCourseInputEnvelope
    connect?: Enumerable<ClassroomWhereUniqueInput>
  }

  export type ClassUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<Enumerable<ClassCreateWithoutCourseInput>, Enumerable<ClassUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<ClassCreateOrConnectWithoutCourseInput>
    createMany?: ClassCreateManyCourseInputEnvelope
    connect?: Enumerable<ClassWhereUniqueInput>
  }

  export type ClassroomUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<Enumerable<ClassroomCreateWithoutCourseInput>, Enumerable<ClassroomUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<ClassroomCreateOrConnectWithoutCourseInput>
    createMany?: ClassroomCreateManyCourseInputEnvelope
    connect?: Enumerable<ClassroomWhereUniqueInput>
  }

  export type ClassUpdateManyWithoutCourseNestedInput = {
    create?: XOR<Enumerable<ClassCreateWithoutCourseInput>, Enumerable<ClassUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<ClassCreateOrConnectWithoutCourseInput>
    upsert?: Enumerable<ClassUpsertWithWhereUniqueWithoutCourseInput>
    createMany?: ClassCreateManyCourseInputEnvelope
    set?: Enumerable<ClassWhereUniqueInput>
    disconnect?: Enumerable<ClassWhereUniqueInput>
    delete?: Enumerable<ClassWhereUniqueInput>
    connect?: Enumerable<ClassWhereUniqueInput>
    update?: Enumerable<ClassUpdateWithWhereUniqueWithoutCourseInput>
    updateMany?: Enumerable<ClassUpdateManyWithWhereWithoutCourseInput>
    deleteMany?: Enumerable<ClassScalarWhereInput>
  }

  export type ClassroomUpdateManyWithoutCourseNestedInput = {
    create?: XOR<Enumerable<ClassroomCreateWithoutCourseInput>, Enumerable<ClassroomUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<ClassroomCreateOrConnectWithoutCourseInput>
    upsert?: Enumerable<ClassroomUpsertWithWhereUniqueWithoutCourseInput>
    createMany?: ClassroomCreateManyCourseInputEnvelope
    set?: Enumerable<ClassroomWhereUniqueInput>
    disconnect?: Enumerable<ClassroomWhereUniqueInput>
    delete?: Enumerable<ClassroomWhereUniqueInput>
    connect?: Enumerable<ClassroomWhereUniqueInput>
    update?: Enumerable<ClassroomUpdateWithWhereUniqueWithoutCourseInput>
    updateMany?: Enumerable<ClassroomUpdateManyWithWhereWithoutCourseInput>
    deleteMany?: Enumerable<ClassroomScalarWhereInput>
  }

  export type ClassUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<Enumerable<ClassCreateWithoutCourseInput>, Enumerable<ClassUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<ClassCreateOrConnectWithoutCourseInput>
    upsert?: Enumerable<ClassUpsertWithWhereUniqueWithoutCourseInput>
    createMany?: ClassCreateManyCourseInputEnvelope
    set?: Enumerable<ClassWhereUniqueInput>
    disconnect?: Enumerable<ClassWhereUniqueInput>
    delete?: Enumerable<ClassWhereUniqueInput>
    connect?: Enumerable<ClassWhereUniqueInput>
    update?: Enumerable<ClassUpdateWithWhereUniqueWithoutCourseInput>
    updateMany?: Enumerable<ClassUpdateManyWithWhereWithoutCourseInput>
    deleteMany?: Enumerable<ClassScalarWhereInput>
  }

  export type ClassroomUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<Enumerable<ClassroomCreateWithoutCourseInput>, Enumerable<ClassroomUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<ClassroomCreateOrConnectWithoutCourseInput>
    upsert?: Enumerable<ClassroomUpsertWithWhereUniqueWithoutCourseInput>
    createMany?: ClassroomCreateManyCourseInputEnvelope
    set?: Enumerable<ClassroomWhereUniqueInput>
    disconnect?: Enumerable<ClassroomWhereUniqueInput>
    delete?: Enumerable<ClassroomWhereUniqueInput>
    connect?: Enumerable<ClassroomWhereUniqueInput>
    update?: Enumerable<ClassroomUpdateWithWhereUniqueWithoutCourseInput>
    updateMany?: Enumerable<ClassroomUpdateManyWithWhereWithoutCourseInput>
    deleteMany?: Enumerable<ClassroomScalarWhereInput>
  }

  export type CourseCreateNestedOneWithoutClassesInput = {
    create?: XOR<CourseCreateWithoutClassesInput, CourseUncheckedCreateWithoutClassesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutClassesInput
    connect?: CourseWhereUniqueInput
  }

  export type GroupsCreateNestedManyWithoutClassInput = {
    create?: XOR<Enumerable<GroupsCreateWithoutClassInput>, Enumerable<GroupsUncheckedCreateWithoutClassInput>>
    connectOrCreate?: Enumerable<GroupsCreateOrConnectWithoutClassInput>
    createMany?: GroupsCreateManyClassInputEnvelope
    connect?: Enumerable<GroupsWhereUniqueInput>
  }

  export type RoomCreateNestedManyWithoutClassInput = {
    create?: XOR<Enumerable<RoomCreateWithoutClassInput>, Enumerable<RoomUncheckedCreateWithoutClassInput>>
    connectOrCreate?: Enumerable<RoomCreateOrConnectWithoutClassInput>
    createMany?: RoomCreateManyClassInputEnvelope
    connect?: Enumerable<RoomWhereUniqueInput>
  }

  export type ClassroomCreateNestedManyWithoutClassInput = {
    create?: XOR<Enumerable<ClassroomCreateWithoutClassInput>, Enumerable<ClassroomUncheckedCreateWithoutClassInput>>
    connectOrCreate?: Enumerable<ClassroomCreateOrConnectWithoutClassInput>
    createMany?: ClassroomCreateManyClassInputEnvelope
    connect?: Enumerable<ClassroomWhereUniqueInput>
  }

  export type GroupsUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<Enumerable<GroupsCreateWithoutClassInput>, Enumerable<GroupsUncheckedCreateWithoutClassInput>>
    connectOrCreate?: Enumerable<GroupsCreateOrConnectWithoutClassInput>
    createMany?: GroupsCreateManyClassInputEnvelope
    connect?: Enumerable<GroupsWhereUniqueInput>
  }

  export type RoomUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<Enumerable<RoomCreateWithoutClassInput>, Enumerable<RoomUncheckedCreateWithoutClassInput>>
    connectOrCreate?: Enumerable<RoomCreateOrConnectWithoutClassInput>
    createMany?: RoomCreateManyClassInputEnvelope
    connect?: Enumerable<RoomWhereUniqueInput>
  }

  export type ClassroomUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<Enumerable<ClassroomCreateWithoutClassInput>, Enumerable<ClassroomUncheckedCreateWithoutClassInput>>
    connectOrCreate?: Enumerable<ClassroomCreateOrConnectWithoutClassInput>
    createMany?: ClassroomCreateManyClassInputEnvelope
    connect?: Enumerable<ClassroomWhereUniqueInput>
  }

  export type CourseUpdateOneRequiredWithoutClassesNestedInput = {
    create?: XOR<CourseCreateWithoutClassesInput, CourseUncheckedCreateWithoutClassesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutClassesInput
    upsert?: CourseUpsertWithoutClassesInput
    connect?: CourseWhereUniqueInput
    update?: XOR<CourseUpdateWithoutClassesInput, CourseUncheckedUpdateWithoutClassesInput>
  }

  export type GroupsUpdateManyWithoutClassNestedInput = {
    create?: XOR<Enumerable<GroupsCreateWithoutClassInput>, Enumerable<GroupsUncheckedCreateWithoutClassInput>>
    connectOrCreate?: Enumerable<GroupsCreateOrConnectWithoutClassInput>
    upsert?: Enumerable<GroupsUpsertWithWhereUniqueWithoutClassInput>
    createMany?: GroupsCreateManyClassInputEnvelope
    set?: Enumerable<GroupsWhereUniqueInput>
    disconnect?: Enumerable<GroupsWhereUniqueInput>
    delete?: Enumerable<GroupsWhereUniqueInput>
    connect?: Enumerable<GroupsWhereUniqueInput>
    update?: Enumerable<GroupsUpdateWithWhereUniqueWithoutClassInput>
    updateMany?: Enumerable<GroupsUpdateManyWithWhereWithoutClassInput>
    deleteMany?: Enumerable<GroupsScalarWhereInput>
  }

  export type RoomUpdateManyWithoutClassNestedInput = {
    create?: XOR<Enumerable<RoomCreateWithoutClassInput>, Enumerable<RoomUncheckedCreateWithoutClassInput>>
    connectOrCreate?: Enumerable<RoomCreateOrConnectWithoutClassInput>
    upsert?: Enumerable<RoomUpsertWithWhereUniqueWithoutClassInput>
    createMany?: RoomCreateManyClassInputEnvelope
    set?: Enumerable<RoomWhereUniqueInput>
    disconnect?: Enumerable<RoomWhereUniqueInput>
    delete?: Enumerable<RoomWhereUniqueInput>
    connect?: Enumerable<RoomWhereUniqueInput>
    update?: Enumerable<RoomUpdateWithWhereUniqueWithoutClassInput>
    updateMany?: Enumerable<RoomUpdateManyWithWhereWithoutClassInput>
    deleteMany?: Enumerable<RoomScalarWhereInput>
  }

  export type ClassroomUpdateManyWithoutClassNestedInput = {
    create?: XOR<Enumerable<ClassroomCreateWithoutClassInput>, Enumerable<ClassroomUncheckedCreateWithoutClassInput>>
    connectOrCreate?: Enumerable<ClassroomCreateOrConnectWithoutClassInput>
    upsert?: Enumerable<ClassroomUpsertWithWhereUniqueWithoutClassInput>
    createMany?: ClassroomCreateManyClassInputEnvelope
    set?: Enumerable<ClassroomWhereUniqueInput>
    disconnect?: Enumerable<ClassroomWhereUniqueInput>
    delete?: Enumerable<ClassroomWhereUniqueInput>
    connect?: Enumerable<ClassroomWhereUniqueInput>
    update?: Enumerable<ClassroomUpdateWithWhereUniqueWithoutClassInput>
    updateMany?: Enumerable<ClassroomUpdateManyWithWhereWithoutClassInput>
    deleteMany?: Enumerable<ClassroomScalarWhereInput>
  }

  export type GroupsUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<Enumerable<GroupsCreateWithoutClassInput>, Enumerable<GroupsUncheckedCreateWithoutClassInput>>
    connectOrCreate?: Enumerable<GroupsCreateOrConnectWithoutClassInput>
    upsert?: Enumerable<GroupsUpsertWithWhereUniqueWithoutClassInput>
    createMany?: GroupsCreateManyClassInputEnvelope
    set?: Enumerable<GroupsWhereUniqueInput>
    disconnect?: Enumerable<GroupsWhereUniqueInput>
    delete?: Enumerable<GroupsWhereUniqueInput>
    connect?: Enumerable<GroupsWhereUniqueInput>
    update?: Enumerable<GroupsUpdateWithWhereUniqueWithoutClassInput>
    updateMany?: Enumerable<GroupsUpdateManyWithWhereWithoutClassInput>
    deleteMany?: Enumerable<GroupsScalarWhereInput>
  }

  export type RoomUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<Enumerable<RoomCreateWithoutClassInput>, Enumerable<RoomUncheckedCreateWithoutClassInput>>
    connectOrCreate?: Enumerable<RoomCreateOrConnectWithoutClassInput>
    upsert?: Enumerable<RoomUpsertWithWhereUniqueWithoutClassInput>
    createMany?: RoomCreateManyClassInputEnvelope
    set?: Enumerable<RoomWhereUniqueInput>
    disconnect?: Enumerable<RoomWhereUniqueInput>
    delete?: Enumerable<RoomWhereUniqueInput>
    connect?: Enumerable<RoomWhereUniqueInput>
    update?: Enumerable<RoomUpdateWithWhereUniqueWithoutClassInput>
    updateMany?: Enumerable<RoomUpdateManyWithWhereWithoutClassInput>
    deleteMany?: Enumerable<RoomScalarWhereInput>
  }

  export type ClassroomUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<Enumerable<ClassroomCreateWithoutClassInput>, Enumerable<ClassroomUncheckedCreateWithoutClassInput>>
    connectOrCreate?: Enumerable<ClassroomCreateOrConnectWithoutClassInput>
    upsert?: Enumerable<ClassroomUpsertWithWhereUniqueWithoutClassInput>
    createMany?: ClassroomCreateManyClassInputEnvelope
    set?: Enumerable<ClassroomWhereUniqueInput>
    disconnect?: Enumerable<ClassroomWhereUniqueInput>
    delete?: Enumerable<ClassroomWhereUniqueInput>
    connect?: Enumerable<ClassroomWhereUniqueInput>
    update?: Enumerable<ClassroomUpdateWithWhereUniqueWithoutClassInput>
    updateMany?: Enumerable<ClassroomUpdateManyWithWhereWithoutClassInput>
    deleteMany?: Enumerable<ClassroomScalarWhereInput>
  }

  export type ClassCreateNestedOneWithoutGroupsInput = {
    create?: XOR<ClassCreateWithoutGroupsInput, ClassUncheckedCreateWithoutGroupsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutGroupsInput
    connect?: ClassWhereUniqueInput
  }

  export type ClassUpdateOneRequiredWithoutGroupsNestedInput = {
    create?: XOR<ClassCreateWithoutGroupsInput, ClassUncheckedCreateWithoutGroupsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutGroupsInput
    upsert?: ClassUpsertWithoutGroupsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<ClassUpdateWithoutGroupsInput, ClassUncheckedUpdateWithoutGroupsInput>
  }

  export type ClassCreateNestedOneWithoutRoomsInput = {
    create?: XOR<ClassCreateWithoutRoomsInput, ClassUncheckedCreateWithoutRoomsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutRoomsInput
    connect?: ClassWhereUniqueInput
  }

  export type ClassroomCreateNestedManyWithoutRoomInput = {
    create?: XOR<Enumerable<ClassroomCreateWithoutRoomInput>, Enumerable<ClassroomUncheckedCreateWithoutRoomInput>>
    connectOrCreate?: Enumerable<ClassroomCreateOrConnectWithoutRoomInput>
    createMany?: ClassroomCreateManyRoomInputEnvelope
    connect?: Enumerable<ClassroomWhereUniqueInput>
  }

  export type ClassroomUncheckedCreateNestedManyWithoutRoomInput = {
    create?: XOR<Enumerable<ClassroomCreateWithoutRoomInput>, Enumerable<ClassroomUncheckedCreateWithoutRoomInput>>
    connectOrCreate?: Enumerable<ClassroomCreateOrConnectWithoutRoomInput>
    createMany?: ClassroomCreateManyRoomInputEnvelope
    connect?: Enumerable<ClassroomWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ClassUpdateOneWithoutRoomsNestedInput = {
    create?: XOR<ClassCreateWithoutRoomsInput, ClassUncheckedCreateWithoutRoomsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutRoomsInput
    upsert?: ClassUpsertWithoutRoomsInput
    disconnect?: boolean
    delete?: boolean
    connect?: ClassWhereUniqueInput
    update?: XOR<ClassUpdateWithoutRoomsInput, ClassUncheckedUpdateWithoutRoomsInput>
  }

  export type ClassroomUpdateManyWithoutRoomNestedInput = {
    create?: XOR<Enumerable<ClassroomCreateWithoutRoomInput>, Enumerable<ClassroomUncheckedCreateWithoutRoomInput>>
    connectOrCreate?: Enumerable<ClassroomCreateOrConnectWithoutRoomInput>
    upsert?: Enumerable<ClassroomUpsertWithWhereUniqueWithoutRoomInput>
    createMany?: ClassroomCreateManyRoomInputEnvelope
    set?: Enumerable<ClassroomWhereUniqueInput>
    disconnect?: Enumerable<ClassroomWhereUniqueInput>
    delete?: Enumerable<ClassroomWhereUniqueInput>
    connect?: Enumerable<ClassroomWhereUniqueInput>
    update?: Enumerable<ClassroomUpdateWithWhereUniqueWithoutRoomInput>
    updateMany?: Enumerable<ClassroomUpdateManyWithWhereWithoutRoomInput>
    deleteMany?: Enumerable<ClassroomScalarWhereInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ClassroomUncheckedUpdateManyWithoutRoomNestedInput = {
    create?: XOR<Enumerable<ClassroomCreateWithoutRoomInput>, Enumerable<ClassroomUncheckedCreateWithoutRoomInput>>
    connectOrCreate?: Enumerable<ClassroomCreateOrConnectWithoutRoomInput>
    upsert?: Enumerable<ClassroomUpsertWithWhereUniqueWithoutRoomInput>
    createMany?: ClassroomCreateManyRoomInputEnvelope
    set?: Enumerable<ClassroomWhereUniqueInput>
    disconnect?: Enumerable<ClassroomWhereUniqueInput>
    delete?: Enumerable<ClassroomWhereUniqueInput>
    connect?: Enumerable<ClassroomWhereUniqueInput>
    update?: Enumerable<ClassroomUpdateWithWhereUniqueWithoutRoomInput>
    updateMany?: Enumerable<ClassroomUpdateManyWithWhereWithoutRoomInput>
    deleteMany?: Enumerable<ClassroomScalarWhereInput>
  }

  export type TeacherCreateNestedOneWithoutClassroomsInput = {
    create?: XOR<TeacherCreateWithoutClassroomsInput, TeacherUncheckedCreateWithoutClassroomsInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutClassroomsInput
    connect?: TeacherWhereUniqueInput
  }

  export type DisciplineCreateNestedOneWithoutClassroomsInput = {
    create?: XOR<DisciplineCreateWithoutClassroomsInput, DisciplineUncheckedCreateWithoutClassroomsInput>
    connectOrCreate?: DisciplineCreateOrConnectWithoutClassroomsInput
    connect?: DisciplineWhereUniqueInput
  }

  export type RoomCreateNestedOneWithoutClassroomsInput = {
    create?: XOR<RoomCreateWithoutClassroomsInput, RoomUncheckedCreateWithoutClassroomsInput>
    connectOrCreate?: RoomCreateOrConnectWithoutClassroomsInput
    connect?: RoomWhereUniqueInput
  }

  export type CourseCreateNestedOneWithoutClassroomsInput = {
    create?: XOR<CourseCreateWithoutClassroomsInput, CourseUncheckedCreateWithoutClassroomsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutClassroomsInput
    connect?: CourseWhereUniqueInput
  }

  export type ClassCreateNestedOneWithoutClassroomsInput = {
    create?: XOR<ClassCreateWithoutClassroomsInput, ClassUncheckedCreateWithoutClassroomsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutClassroomsInput
    connect?: ClassWhereUniqueInput
  }

  export type TeacherUpdateOneRequiredWithoutClassroomsNestedInput = {
    create?: XOR<TeacherCreateWithoutClassroomsInput, TeacherUncheckedCreateWithoutClassroomsInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutClassroomsInput
    upsert?: TeacherUpsertWithoutClassroomsInput
    connect?: TeacherWhereUniqueInput
    update?: XOR<TeacherUpdateWithoutClassroomsInput, TeacherUncheckedUpdateWithoutClassroomsInput>
  }

  export type DisciplineUpdateOneRequiredWithoutClassroomsNestedInput = {
    create?: XOR<DisciplineCreateWithoutClassroomsInput, DisciplineUncheckedCreateWithoutClassroomsInput>
    connectOrCreate?: DisciplineCreateOrConnectWithoutClassroomsInput
    upsert?: DisciplineUpsertWithoutClassroomsInput
    connect?: DisciplineWhereUniqueInput
    update?: XOR<DisciplineUpdateWithoutClassroomsInput, DisciplineUncheckedUpdateWithoutClassroomsInput>
  }

  export type RoomUpdateOneRequiredWithoutClassroomsNestedInput = {
    create?: XOR<RoomCreateWithoutClassroomsInput, RoomUncheckedCreateWithoutClassroomsInput>
    connectOrCreate?: RoomCreateOrConnectWithoutClassroomsInput
    upsert?: RoomUpsertWithoutClassroomsInput
    connect?: RoomWhereUniqueInput
    update?: XOR<RoomUpdateWithoutClassroomsInput, RoomUncheckedUpdateWithoutClassroomsInput>
  }

  export type CourseUpdateOneRequiredWithoutClassroomsNestedInput = {
    create?: XOR<CourseCreateWithoutClassroomsInput, CourseUncheckedCreateWithoutClassroomsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutClassroomsInput
    upsert?: CourseUpsertWithoutClassroomsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<CourseUpdateWithoutClassroomsInput, CourseUncheckedUpdateWithoutClassroomsInput>
  }

  export type ClassUpdateOneRequiredWithoutClassroomsNestedInput = {
    create?: XOR<ClassCreateWithoutClassroomsInput, ClassUncheckedCreateWithoutClassroomsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutClassroomsInput
    upsert?: ClassUpsertWithoutClassroomsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<ClassUpdateWithoutClassroomsInput, ClassUncheckedUpdateWithoutClassroomsInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type RestrictionCreateWithoutTeacherInput = {
    id?: string
    Period: string
    Day: number
  }

  export type RestrictionUncheckedCreateWithoutTeacherInput = {
    id?: string
    Period: string
    Day: number
  }

  export type RestrictionCreateOrConnectWithoutTeacherInput = {
    where: RestrictionWhereUniqueInput
    create: XOR<RestrictionCreateWithoutTeacherInput, RestrictionUncheckedCreateWithoutTeacherInput>
  }

  export type RestrictionCreateManyTeacherInputEnvelope = {
    data: Enumerable<RestrictionCreateManyTeacherInput>
    skipDuplicates?: boolean
  }

  export type ClassroomCreateWithoutTeacherInput = {
    id?: string
    amount: number
    duration: number
    discipline: DisciplineCreateNestedOneWithoutClassroomsInput
    room: RoomCreateNestedOneWithoutClassroomsInput
    course: CourseCreateNestedOneWithoutClassroomsInput
    class: ClassCreateNestedOneWithoutClassroomsInput
  }

  export type ClassroomUncheckedCreateWithoutTeacherInput = {
    id?: string
    amount: number
    duration: number
    discipline_id: string
    room_id: string
    course_id: string
    class_id: string
  }

  export type ClassroomCreateOrConnectWithoutTeacherInput = {
    where: ClassroomWhereUniqueInput
    create: XOR<ClassroomCreateWithoutTeacherInput, ClassroomUncheckedCreateWithoutTeacherInput>
  }

  export type ClassroomCreateManyTeacherInputEnvelope = {
    data: Enumerable<ClassroomCreateManyTeacherInput>
    skipDuplicates?: boolean
  }

  export type RestrictionUpsertWithWhereUniqueWithoutTeacherInput = {
    where: RestrictionWhereUniqueInput
    update: XOR<RestrictionUpdateWithoutTeacherInput, RestrictionUncheckedUpdateWithoutTeacherInput>
    create: XOR<RestrictionCreateWithoutTeacherInput, RestrictionUncheckedCreateWithoutTeacherInput>
  }

  export type RestrictionUpdateWithWhereUniqueWithoutTeacherInput = {
    where: RestrictionWhereUniqueInput
    data: XOR<RestrictionUpdateWithoutTeacherInput, RestrictionUncheckedUpdateWithoutTeacherInput>
  }

  export type RestrictionUpdateManyWithWhereWithoutTeacherInput = {
    where: RestrictionScalarWhereInput
    data: XOR<RestrictionUpdateManyMutationInput, RestrictionUncheckedUpdateManyWithoutRestrictionsInput>
  }

  export type RestrictionScalarWhereInput = {
    AND?: Enumerable<RestrictionScalarWhereInput>
    OR?: Enumerable<RestrictionScalarWhereInput>
    NOT?: Enumerable<RestrictionScalarWhereInput>
    id?: StringFilter | string
    Period?: StringFilter | string
    Day?: IntFilter | number
    teacher_id?: StringFilter | string
  }

  export type ClassroomUpsertWithWhereUniqueWithoutTeacherInput = {
    where: ClassroomWhereUniqueInput
    update: XOR<ClassroomUpdateWithoutTeacherInput, ClassroomUncheckedUpdateWithoutTeacherInput>
    create: XOR<ClassroomCreateWithoutTeacherInput, ClassroomUncheckedCreateWithoutTeacherInput>
  }

  export type ClassroomUpdateWithWhereUniqueWithoutTeacherInput = {
    where: ClassroomWhereUniqueInput
    data: XOR<ClassroomUpdateWithoutTeacherInput, ClassroomUncheckedUpdateWithoutTeacherInput>
  }

  export type ClassroomUpdateManyWithWhereWithoutTeacherInput = {
    where: ClassroomScalarWhereInput
    data: XOR<ClassroomUpdateManyMutationInput, ClassroomUncheckedUpdateManyWithoutClassroomsInput>
  }

  export type ClassroomScalarWhereInput = {
    AND?: Enumerable<ClassroomScalarWhereInput>
    OR?: Enumerable<ClassroomScalarWhereInput>
    NOT?: Enumerable<ClassroomScalarWhereInput>
    id?: StringFilter | string
    amount?: IntFilter | number
    duration?: IntFilter | number
    teacher_id?: StringFilter | string
    discipline_id?: StringFilter | string
    room_id?: StringFilter | string
    course_id?: StringFilter | string
    class_id?: StringFilter | string
  }

  export type TeacherCreateWithoutRestrictionsInput = {
    id?: string
    name: string
    email: string
    classrooms?: ClassroomCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutRestrictionsInput = {
    id?: string
    name: string
    email: string
    classrooms?: ClassroomUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherCreateOrConnectWithoutRestrictionsInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutRestrictionsInput, TeacherUncheckedCreateWithoutRestrictionsInput>
  }

  export type TeacherUpsertWithoutRestrictionsInput = {
    update: XOR<TeacherUpdateWithoutRestrictionsInput, TeacherUncheckedUpdateWithoutRestrictionsInput>
    create: XOR<TeacherCreateWithoutRestrictionsInput, TeacherUncheckedCreateWithoutRestrictionsInput>
  }

  export type TeacherUpdateWithoutRestrictionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    classrooms?: ClassroomUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutRestrictionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    classrooms?: ClassroomUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type ClassroomCreateWithoutDisciplineInput = {
    id?: string
    amount: number
    duration: number
    teacher: TeacherCreateNestedOneWithoutClassroomsInput
    room: RoomCreateNestedOneWithoutClassroomsInput
    course: CourseCreateNestedOneWithoutClassroomsInput
    class: ClassCreateNestedOneWithoutClassroomsInput
  }

  export type ClassroomUncheckedCreateWithoutDisciplineInput = {
    id?: string
    amount: number
    duration: number
    teacher_id: string
    room_id: string
    course_id: string
    class_id: string
  }

  export type ClassroomCreateOrConnectWithoutDisciplineInput = {
    where: ClassroomWhereUniqueInput
    create: XOR<ClassroomCreateWithoutDisciplineInput, ClassroomUncheckedCreateWithoutDisciplineInput>
  }

  export type ClassroomCreateManyDisciplineInputEnvelope = {
    data: Enumerable<ClassroomCreateManyDisciplineInput>
    skipDuplicates?: boolean
  }

  export type ClassroomUpsertWithWhereUniqueWithoutDisciplineInput = {
    where: ClassroomWhereUniqueInput
    update: XOR<ClassroomUpdateWithoutDisciplineInput, ClassroomUncheckedUpdateWithoutDisciplineInput>
    create: XOR<ClassroomCreateWithoutDisciplineInput, ClassroomUncheckedCreateWithoutDisciplineInput>
  }

  export type ClassroomUpdateWithWhereUniqueWithoutDisciplineInput = {
    where: ClassroomWhereUniqueInput
    data: XOR<ClassroomUpdateWithoutDisciplineInput, ClassroomUncheckedUpdateWithoutDisciplineInput>
  }

  export type ClassroomUpdateManyWithWhereWithoutDisciplineInput = {
    where: ClassroomScalarWhereInput
    data: XOR<ClassroomUpdateManyMutationInput, ClassroomUncheckedUpdateManyWithoutClassroomsInput>
  }

  export type ClassCreateWithoutCourseInput = {
    id?: string
    name: string
    pariod: number
    num_students: number
    groups?: GroupsCreateNestedManyWithoutClassInput
    rooms?: RoomCreateNestedManyWithoutClassInput
    classrooms?: ClassroomCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutCourseInput = {
    id?: string
    name: string
    pariod: number
    num_students: number
    groups?: GroupsUncheckedCreateNestedManyWithoutClassInput
    rooms?: RoomUncheckedCreateNestedManyWithoutClassInput
    classrooms?: ClassroomUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutCourseInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutCourseInput, ClassUncheckedCreateWithoutCourseInput>
  }

  export type ClassCreateManyCourseInputEnvelope = {
    data: Enumerable<ClassCreateManyCourseInput>
    skipDuplicates?: boolean
  }

  export type ClassroomCreateWithoutCourseInput = {
    id?: string
    amount: number
    duration: number
    teacher: TeacherCreateNestedOneWithoutClassroomsInput
    discipline: DisciplineCreateNestedOneWithoutClassroomsInput
    room: RoomCreateNestedOneWithoutClassroomsInput
    class: ClassCreateNestedOneWithoutClassroomsInput
  }

  export type ClassroomUncheckedCreateWithoutCourseInput = {
    id?: string
    amount: number
    duration: number
    teacher_id: string
    discipline_id: string
    room_id: string
    class_id: string
  }

  export type ClassroomCreateOrConnectWithoutCourseInput = {
    where: ClassroomWhereUniqueInput
    create: XOR<ClassroomCreateWithoutCourseInput, ClassroomUncheckedCreateWithoutCourseInput>
  }

  export type ClassroomCreateManyCourseInputEnvelope = {
    data: Enumerable<ClassroomCreateManyCourseInput>
    skipDuplicates?: boolean
  }

  export type ClassUpsertWithWhereUniqueWithoutCourseInput = {
    where: ClassWhereUniqueInput
    update: XOR<ClassUpdateWithoutCourseInput, ClassUncheckedUpdateWithoutCourseInput>
    create: XOR<ClassCreateWithoutCourseInput, ClassUncheckedCreateWithoutCourseInput>
  }

  export type ClassUpdateWithWhereUniqueWithoutCourseInput = {
    where: ClassWhereUniqueInput
    data: XOR<ClassUpdateWithoutCourseInput, ClassUncheckedUpdateWithoutCourseInput>
  }

  export type ClassUpdateManyWithWhereWithoutCourseInput = {
    where: ClassScalarWhereInput
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyWithoutClassesInput>
  }

  export type ClassScalarWhereInput = {
    AND?: Enumerable<ClassScalarWhereInput>
    OR?: Enumerable<ClassScalarWhereInput>
    NOT?: Enumerable<ClassScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    pariod?: IntFilter | number
    num_students?: IntFilter | number
    course_id?: StringFilter | string
  }

  export type ClassroomUpsertWithWhereUniqueWithoutCourseInput = {
    where: ClassroomWhereUniqueInput
    update: XOR<ClassroomUpdateWithoutCourseInput, ClassroomUncheckedUpdateWithoutCourseInput>
    create: XOR<ClassroomCreateWithoutCourseInput, ClassroomUncheckedCreateWithoutCourseInput>
  }

  export type ClassroomUpdateWithWhereUniqueWithoutCourseInput = {
    where: ClassroomWhereUniqueInput
    data: XOR<ClassroomUpdateWithoutCourseInput, ClassroomUncheckedUpdateWithoutCourseInput>
  }

  export type ClassroomUpdateManyWithWhereWithoutCourseInput = {
    where: ClassroomScalarWhereInput
    data: XOR<ClassroomUpdateManyMutationInput, ClassroomUncheckedUpdateManyWithoutClassroomsInput>
  }

  export type CourseCreateWithoutClassesInput = {
    id?: string
    name: string
    shift: string
    grouping: number
    classrooms?: ClassroomCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutClassesInput = {
    id?: string
    name: string
    shift: string
    grouping: number
    classrooms?: ClassroomUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutClassesInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutClassesInput, CourseUncheckedCreateWithoutClassesInput>
  }

  export type GroupsCreateWithoutClassInput = {
    id?: string
    group1: string
    group2: string
    group3: string
    group4: string
  }

  export type GroupsUncheckedCreateWithoutClassInput = {
    id?: string
    group1: string
    group2: string
    group3: string
    group4: string
  }

  export type GroupsCreateOrConnectWithoutClassInput = {
    where: GroupsWhereUniqueInput
    create: XOR<GroupsCreateWithoutClassInput, GroupsUncheckedCreateWithoutClassInput>
  }

  export type GroupsCreateManyClassInputEnvelope = {
    data: Enumerable<GroupsCreateManyClassInput>
    skipDuplicates?: boolean
  }

  export type RoomCreateWithoutClassInput = {
    id?: string
    name: string
    fixed: boolean
    building: string
    capacity: number
    classrooms?: ClassroomCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateWithoutClassInput = {
    id?: string
    name: string
    fixed: boolean
    building: string
    capacity: number
    classrooms?: ClassroomUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomCreateOrConnectWithoutClassInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutClassInput, RoomUncheckedCreateWithoutClassInput>
  }

  export type RoomCreateManyClassInputEnvelope = {
    data: Enumerable<RoomCreateManyClassInput>
    skipDuplicates?: boolean
  }

  export type ClassroomCreateWithoutClassInput = {
    id?: string
    amount: number
    duration: number
    teacher: TeacherCreateNestedOneWithoutClassroomsInput
    discipline: DisciplineCreateNestedOneWithoutClassroomsInput
    room: RoomCreateNestedOneWithoutClassroomsInput
    course: CourseCreateNestedOneWithoutClassroomsInput
  }

  export type ClassroomUncheckedCreateWithoutClassInput = {
    id?: string
    amount: number
    duration: number
    teacher_id: string
    discipline_id: string
    room_id: string
    course_id: string
  }

  export type ClassroomCreateOrConnectWithoutClassInput = {
    where: ClassroomWhereUniqueInput
    create: XOR<ClassroomCreateWithoutClassInput, ClassroomUncheckedCreateWithoutClassInput>
  }

  export type ClassroomCreateManyClassInputEnvelope = {
    data: Enumerable<ClassroomCreateManyClassInput>
    skipDuplicates?: boolean
  }

  export type CourseUpsertWithoutClassesInput = {
    update: XOR<CourseUpdateWithoutClassesInput, CourseUncheckedUpdateWithoutClassesInput>
    create: XOR<CourseCreateWithoutClassesInput, CourseUncheckedCreateWithoutClassesInput>
  }

  export type CourseUpdateWithoutClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shift?: StringFieldUpdateOperationsInput | string
    grouping?: IntFieldUpdateOperationsInput | number
    classrooms?: ClassroomUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shift?: StringFieldUpdateOperationsInput | string
    grouping?: IntFieldUpdateOperationsInput | number
    classrooms?: ClassroomUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type GroupsUpsertWithWhereUniqueWithoutClassInput = {
    where: GroupsWhereUniqueInput
    update: XOR<GroupsUpdateWithoutClassInput, GroupsUncheckedUpdateWithoutClassInput>
    create: XOR<GroupsCreateWithoutClassInput, GroupsUncheckedCreateWithoutClassInput>
  }

  export type GroupsUpdateWithWhereUniqueWithoutClassInput = {
    where: GroupsWhereUniqueInput
    data: XOR<GroupsUpdateWithoutClassInput, GroupsUncheckedUpdateWithoutClassInput>
  }

  export type GroupsUpdateManyWithWhereWithoutClassInput = {
    where: GroupsScalarWhereInput
    data: XOR<GroupsUpdateManyMutationInput, GroupsUncheckedUpdateManyWithoutGroupsInput>
  }

  export type GroupsScalarWhereInput = {
    AND?: Enumerable<GroupsScalarWhereInput>
    OR?: Enumerable<GroupsScalarWhereInput>
    NOT?: Enumerable<GroupsScalarWhereInput>
    id?: StringFilter | string
    group1?: StringFilter | string
    group2?: StringFilter | string
    group3?: StringFilter | string
    group4?: StringFilter | string
    class_id?: StringFilter | string
  }

  export type RoomUpsertWithWhereUniqueWithoutClassInput = {
    where: RoomWhereUniqueInput
    update: XOR<RoomUpdateWithoutClassInput, RoomUncheckedUpdateWithoutClassInput>
    create: XOR<RoomCreateWithoutClassInput, RoomUncheckedCreateWithoutClassInput>
  }

  export type RoomUpdateWithWhereUniqueWithoutClassInput = {
    where: RoomWhereUniqueInput
    data: XOR<RoomUpdateWithoutClassInput, RoomUncheckedUpdateWithoutClassInput>
  }

  export type RoomUpdateManyWithWhereWithoutClassInput = {
    where: RoomScalarWhereInput
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyWithoutRoomsInput>
  }

  export type RoomScalarWhereInput = {
    AND?: Enumerable<RoomScalarWhereInput>
    OR?: Enumerable<RoomScalarWhereInput>
    NOT?: Enumerable<RoomScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    fixed?: BoolFilter | boolean
    building?: StringFilter | string
    capacity?: IntFilter | number
    class_id?: StringNullableFilter | string | null
  }

  export type ClassroomUpsertWithWhereUniqueWithoutClassInput = {
    where: ClassroomWhereUniqueInput
    update: XOR<ClassroomUpdateWithoutClassInput, ClassroomUncheckedUpdateWithoutClassInput>
    create: XOR<ClassroomCreateWithoutClassInput, ClassroomUncheckedCreateWithoutClassInput>
  }

  export type ClassroomUpdateWithWhereUniqueWithoutClassInput = {
    where: ClassroomWhereUniqueInput
    data: XOR<ClassroomUpdateWithoutClassInput, ClassroomUncheckedUpdateWithoutClassInput>
  }

  export type ClassroomUpdateManyWithWhereWithoutClassInput = {
    where: ClassroomScalarWhereInput
    data: XOR<ClassroomUpdateManyMutationInput, ClassroomUncheckedUpdateManyWithoutClassroomsInput>
  }

  export type ClassCreateWithoutGroupsInput = {
    id?: string
    name: string
    pariod: number
    num_students: number
    course: CourseCreateNestedOneWithoutClassesInput
    rooms?: RoomCreateNestedManyWithoutClassInput
    classrooms?: ClassroomCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutGroupsInput = {
    id?: string
    name: string
    pariod: number
    num_students: number
    course_id: string
    rooms?: RoomUncheckedCreateNestedManyWithoutClassInput
    classrooms?: ClassroomUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutGroupsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutGroupsInput, ClassUncheckedCreateWithoutGroupsInput>
  }

  export type ClassUpsertWithoutGroupsInput = {
    update: XOR<ClassUpdateWithoutGroupsInput, ClassUncheckedUpdateWithoutGroupsInput>
    create: XOR<ClassCreateWithoutGroupsInput, ClassUncheckedCreateWithoutGroupsInput>
  }

  export type ClassUpdateWithoutGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pariod?: IntFieldUpdateOperationsInput | number
    num_students?: IntFieldUpdateOperationsInput | number
    course?: CourseUpdateOneRequiredWithoutClassesNestedInput
    rooms?: RoomUpdateManyWithoutClassNestedInput
    classrooms?: ClassroomUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pariod?: IntFieldUpdateOperationsInput | number
    num_students?: IntFieldUpdateOperationsInput | number
    course_id?: StringFieldUpdateOperationsInput | string
    rooms?: RoomUncheckedUpdateManyWithoutClassNestedInput
    classrooms?: ClassroomUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassCreateWithoutRoomsInput = {
    id?: string
    name: string
    pariod: number
    num_students: number
    course: CourseCreateNestedOneWithoutClassesInput
    groups?: GroupsCreateNestedManyWithoutClassInput
    classrooms?: ClassroomCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutRoomsInput = {
    id?: string
    name: string
    pariod: number
    num_students: number
    course_id: string
    groups?: GroupsUncheckedCreateNestedManyWithoutClassInput
    classrooms?: ClassroomUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutRoomsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutRoomsInput, ClassUncheckedCreateWithoutRoomsInput>
  }

  export type ClassroomCreateWithoutRoomInput = {
    id?: string
    amount: number
    duration: number
    teacher: TeacherCreateNestedOneWithoutClassroomsInput
    discipline: DisciplineCreateNestedOneWithoutClassroomsInput
    course: CourseCreateNestedOneWithoutClassroomsInput
    class: ClassCreateNestedOneWithoutClassroomsInput
  }

  export type ClassroomUncheckedCreateWithoutRoomInput = {
    id?: string
    amount: number
    duration: number
    teacher_id: string
    discipline_id: string
    course_id: string
    class_id: string
  }

  export type ClassroomCreateOrConnectWithoutRoomInput = {
    where: ClassroomWhereUniqueInput
    create: XOR<ClassroomCreateWithoutRoomInput, ClassroomUncheckedCreateWithoutRoomInput>
  }

  export type ClassroomCreateManyRoomInputEnvelope = {
    data: Enumerable<ClassroomCreateManyRoomInput>
    skipDuplicates?: boolean
  }

  export type ClassUpsertWithoutRoomsInput = {
    update: XOR<ClassUpdateWithoutRoomsInput, ClassUncheckedUpdateWithoutRoomsInput>
    create: XOR<ClassCreateWithoutRoomsInput, ClassUncheckedCreateWithoutRoomsInput>
  }

  export type ClassUpdateWithoutRoomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pariod?: IntFieldUpdateOperationsInput | number
    num_students?: IntFieldUpdateOperationsInput | number
    course?: CourseUpdateOneRequiredWithoutClassesNestedInput
    groups?: GroupsUpdateManyWithoutClassNestedInput
    classrooms?: ClassroomUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutRoomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pariod?: IntFieldUpdateOperationsInput | number
    num_students?: IntFieldUpdateOperationsInput | number
    course_id?: StringFieldUpdateOperationsInput | string
    groups?: GroupsUncheckedUpdateManyWithoutClassNestedInput
    classrooms?: ClassroomUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassroomUpsertWithWhereUniqueWithoutRoomInput = {
    where: ClassroomWhereUniqueInput
    update: XOR<ClassroomUpdateWithoutRoomInput, ClassroomUncheckedUpdateWithoutRoomInput>
    create: XOR<ClassroomCreateWithoutRoomInput, ClassroomUncheckedCreateWithoutRoomInput>
  }

  export type ClassroomUpdateWithWhereUniqueWithoutRoomInput = {
    where: ClassroomWhereUniqueInput
    data: XOR<ClassroomUpdateWithoutRoomInput, ClassroomUncheckedUpdateWithoutRoomInput>
  }

  export type ClassroomUpdateManyWithWhereWithoutRoomInput = {
    where: ClassroomScalarWhereInput
    data: XOR<ClassroomUpdateManyMutationInput, ClassroomUncheckedUpdateManyWithoutClassroomsInput>
  }

  export type TeacherCreateWithoutClassroomsInput = {
    id?: string
    name: string
    email: string
    restrictions?: RestrictionCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutClassroomsInput = {
    id?: string
    name: string
    email: string
    restrictions?: RestrictionUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherCreateOrConnectWithoutClassroomsInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutClassroomsInput, TeacherUncheckedCreateWithoutClassroomsInput>
  }

  export type DisciplineCreateWithoutClassroomsInput = {
    id?: string
    name: string
    period: number
  }

  export type DisciplineUncheckedCreateWithoutClassroomsInput = {
    id?: string
    name: string
    period: number
  }

  export type DisciplineCreateOrConnectWithoutClassroomsInput = {
    where: DisciplineWhereUniqueInput
    create: XOR<DisciplineCreateWithoutClassroomsInput, DisciplineUncheckedCreateWithoutClassroomsInput>
  }

  export type RoomCreateWithoutClassroomsInput = {
    id?: string
    name: string
    fixed: boolean
    building: string
    capacity: number
    class?: ClassCreateNestedOneWithoutRoomsInput
  }

  export type RoomUncheckedCreateWithoutClassroomsInput = {
    id?: string
    name: string
    fixed: boolean
    building: string
    capacity: number
    class_id?: string | null
  }

  export type RoomCreateOrConnectWithoutClassroomsInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutClassroomsInput, RoomUncheckedCreateWithoutClassroomsInput>
  }

  export type CourseCreateWithoutClassroomsInput = {
    id?: string
    name: string
    shift: string
    grouping: number
    classes?: ClassCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutClassroomsInput = {
    id?: string
    name: string
    shift: string
    grouping: number
    classes?: ClassUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutClassroomsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutClassroomsInput, CourseUncheckedCreateWithoutClassroomsInput>
  }

  export type ClassCreateWithoutClassroomsInput = {
    id?: string
    name: string
    pariod: number
    num_students: number
    course: CourseCreateNestedOneWithoutClassesInput
    groups?: GroupsCreateNestedManyWithoutClassInput
    rooms?: RoomCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutClassroomsInput = {
    id?: string
    name: string
    pariod: number
    num_students: number
    course_id: string
    groups?: GroupsUncheckedCreateNestedManyWithoutClassInput
    rooms?: RoomUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutClassroomsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutClassroomsInput, ClassUncheckedCreateWithoutClassroomsInput>
  }

  export type TeacherUpsertWithoutClassroomsInput = {
    update: XOR<TeacherUpdateWithoutClassroomsInput, TeacherUncheckedUpdateWithoutClassroomsInput>
    create: XOR<TeacherCreateWithoutClassroomsInput, TeacherUncheckedCreateWithoutClassroomsInput>
  }

  export type TeacherUpdateWithoutClassroomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    restrictions?: RestrictionUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutClassroomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    restrictions?: RestrictionUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type DisciplineUpsertWithoutClassroomsInput = {
    update: XOR<DisciplineUpdateWithoutClassroomsInput, DisciplineUncheckedUpdateWithoutClassroomsInput>
    create: XOR<DisciplineCreateWithoutClassroomsInput, DisciplineUncheckedCreateWithoutClassroomsInput>
  }

  export type DisciplineUpdateWithoutClassroomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    period?: IntFieldUpdateOperationsInput | number
  }

  export type DisciplineUncheckedUpdateWithoutClassroomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    period?: IntFieldUpdateOperationsInput | number
  }

  export type RoomUpsertWithoutClassroomsInput = {
    update: XOR<RoomUpdateWithoutClassroomsInput, RoomUncheckedUpdateWithoutClassroomsInput>
    create: XOR<RoomCreateWithoutClassroomsInput, RoomUncheckedCreateWithoutClassroomsInput>
  }

  export type RoomUpdateWithoutClassroomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fixed?: BoolFieldUpdateOperationsInput | boolean
    building?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    class?: ClassUpdateOneWithoutRoomsNestedInput
  }

  export type RoomUncheckedUpdateWithoutClassroomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fixed?: BoolFieldUpdateOperationsInput | boolean
    building?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    class_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CourseUpsertWithoutClassroomsInput = {
    update: XOR<CourseUpdateWithoutClassroomsInput, CourseUncheckedUpdateWithoutClassroomsInput>
    create: XOR<CourseCreateWithoutClassroomsInput, CourseUncheckedCreateWithoutClassroomsInput>
  }

  export type CourseUpdateWithoutClassroomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shift?: StringFieldUpdateOperationsInput | string
    grouping?: IntFieldUpdateOperationsInput | number
    classes?: ClassUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutClassroomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shift?: StringFieldUpdateOperationsInput | string
    grouping?: IntFieldUpdateOperationsInput | number
    classes?: ClassUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type ClassUpsertWithoutClassroomsInput = {
    update: XOR<ClassUpdateWithoutClassroomsInput, ClassUncheckedUpdateWithoutClassroomsInput>
    create: XOR<ClassCreateWithoutClassroomsInput, ClassUncheckedCreateWithoutClassroomsInput>
  }

  export type ClassUpdateWithoutClassroomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pariod?: IntFieldUpdateOperationsInput | number
    num_students?: IntFieldUpdateOperationsInput | number
    course?: CourseUpdateOneRequiredWithoutClassesNestedInput
    groups?: GroupsUpdateManyWithoutClassNestedInput
    rooms?: RoomUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutClassroomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pariod?: IntFieldUpdateOperationsInput | number
    num_students?: IntFieldUpdateOperationsInput | number
    course_id?: StringFieldUpdateOperationsInput | string
    groups?: GroupsUncheckedUpdateManyWithoutClassNestedInput
    rooms?: RoomUncheckedUpdateManyWithoutClassNestedInput
  }

  export type RestrictionCreateManyTeacherInput = {
    id?: string
    Period: string
    Day: number
  }

  export type ClassroomCreateManyTeacherInput = {
    id?: string
    amount: number
    duration: number
    discipline_id: string
    room_id: string
    course_id: string
    class_id: string
  }

  export type RestrictionUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    Period?: StringFieldUpdateOperationsInput | string
    Day?: IntFieldUpdateOperationsInput | number
  }

  export type RestrictionUncheckedUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    Period?: StringFieldUpdateOperationsInput | string
    Day?: IntFieldUpdateOperationsInput | number
  }

  export type RestrictionUncheckedUpdateManyWithoutRestrictionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    Period?: StringFieldUpdateOperationsInput | string
    Day?: IntFieldUpdateOperationsInput | number
  }

  export type ClassroomUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    discipline?: DisciplineUpdateOneRequiredWithoutClassroomsNestedInput
    room?: RoomUpdateOneRequiredWithoutClassroomsNestedInput
    course?: CourseUpdateOneRequiredWithoutClassroomsNestedInput
    class?: ClassUpdateOneRequiredWithoutClassroomsNestedInput
  }

  export type ClassroomUncheckedUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    discipline_id?: StringFieldUpdateOperationsInput | string
    room_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    class_id?: StringFieldUpdateOperationsInput | string
  }

  export type ClassroomUncheckedUpdateManyWithoutClassroomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    discipline_id?: StringFieldUpdateOperationsInput | string
    room_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    class_id?: StringFieldUpdateOperationsInput | string
  }

  export type ClassroomCreateManyDisciplineInput = {
    id?: string
    amount: number
    duration: number
    teacher_id: string
    room_id: string
    course_id: string
    class_id: string
  }

  export type ClassroomUpdateWithoutDisciplineInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    teacher?: TeacherUpdateOneRequiredWithoutClassroomsNestedInput
    room?: RoomUpdateOneRequiredWithoutClassroomsNestedInput
    course?: CourseUpdateOneRequiredWithoutClassroomsNestedInput
    class?: ClassUpdateOneRequiredWithoutClassroomsNestedInput
  }

  export type ClassroomUncheckedUpdateWithoutDisciplineInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    teacher_id?: StringFieldUpdateOperationsInput | string
    room_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    class_id?: StringFieldUpdateOperationsInput | string
  }

  export type ClassCreateManyCourseInput = {
    id?: string
    name: string
    pariod: number
    num_students: number
  }

  export type ClassroomCreateManyCourseInput = {
    id?: string
    amount: number
    duration: number
    teacher_id: string
    discipline_id: string
    room_id: string
    class_id: string
  }

  export type ClassUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pariod?: IntFieldUpdateOperationsInput | number
    num_students?: IntFieldUpdateOperationsInput | number
    groups?: GroupsUpdateManyWithoutClassNestedInput
    rooms?: RoomUpdateManyWithoutClassNestedInput
    classrooms?: ClassroomUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pariod?: IntFieldUpdateOperationsInput | number
    num_students?: IntFieldUpdateOperationsInput | number
    groups?: GroupsUncheckedUpdateManyWithoutClassNestedInput
    rooms?: RoomUncheckedUpdateManyWithoutClassNestedInput
    classrooms?: ClassroomUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateManyWithoutClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pariod?: IntFieldUpdateOperationsInput | number
    num_students?: IntFieldUpdateOperationsInput | number
  }

  export type ClassroomUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    teacher?: TeacherUpdateOneRequiredWithoutClassroomsNestedInput
    discipline?: DisciplineUpdateOneRequiredWithoutClassroomsNestedInput
    room?: RoomUpdateOneRequiredWithoutClassroomsNestedInput
    class?: ClassUpdateOneRequiredWithoutClassroomsNestedInput
  }

  export type ClassroomUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    teacher_id?: StringFieldUpdateOperationsInput | string
    discipline_id?: StringFieldUpdateOperationsInput | string
    room_id?: StringFieldUpdateOperationsInput | string
    class_id?: StringFieldUpdateOperationsInput | string
  }

  export type GroupsCreateManyClassInput = {
    id?: string
    group1: string
    group2: string
    group3: string
    group4: string
  }

  export type RoomCreateManyClassInput = {
    id?: string
    name: string
    fixed: boolean
    building: string
    capacity: number
  }

  export type ClassroomCreateManyClassInput = {
    id?: string
    amount: number
    duration: number
    teacher_id: string
    discipline_id: string
    room_id: string
    course_id: string
  }

  export type GroupsUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    group1?: StringFieldUpdateOperationsInput | string
    group2?: StringFieldUpdateOperationsInput | string
    group3?: StringFieldUpdateOperationsInput | string
    group4?: StringFieldUpdateOperationsInput | string
  }

  export type GroupsUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    group1?: StringFieldUpdateOperationsInput | string
    group2?: StringFieldUpdateOperationsInput | string
    group3?: StringFieldUpdateOperationsInput | string
    group4?: StringFieldUpdateOperationsInput | string
  }

  export type GroupsUncheckedUpdateManyWithoutGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    group1?: StringFieldUpdateOperationsInput | string
    group2?: StringFieldUpdateOperationsInput | string
    group3?: StringFieldUpdateOperationsInput | string
    group4?: StringFieldUpdateOperationsInput | string
  }

  export type RoomUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fixed?: BoolFieldUpdateOperationsInput | boolean
    building?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    classrooms?: ClassroomUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fixed?: BoolFieldUpdateOperationsInput | boolean
    building?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    classrooms?: ClassroomUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateManyWithoutRoomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fixed?: BoolFieldUpdateOperationsInput | boolean
    building?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
  }

  export type ClassroomUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    teacher?: TeacherUpdateOneRequiredWithoutClassroomsNestedInput
    discipline?: DisciplineUpdateOneRequiredWithoutClassroomsNestedInput
    room?: RoomUpdateOneRequiredWithoutClassroomsNestedInput
    course?: CourseUpdateOneRequiredWithoutClassroomsNestedInput
  }

  export type ClassroomUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    teacher_id?: StringFieldUpdateOperationsInput | string
    discipline_id?: StringFieldUpdateOperationsInput | string
    room_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
  }

  export type ClassroomCreateManyRoomInput = {
    id?: string
    amount: number
    duration: number
    teacher_id: string
    discipline_id: string
    course_id: string
    class_id: string
  }

  export type ClassroomUpdateWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    teacher?: TeacherUpdateOneRequiredWithoutClassroomsNestedInput
    discipline?: DisciplineUpdateOneRequiredWithoutClassroomsNestedInput
    course?: CourseUpdateOneRequiredWithoutClassroomsNestedInput
    class?: ClassUpdateOneRequiredWithoutClassroomsNestedInput
  }

  export type ClassroomUncheckedUpdateWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    teacher_id?: StringFieldUpdateOperationsInput | string
    discipline_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    class_id?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}